{
  "address": "0x3570A0800874a78607DD31Fac18495A2e50A68C1",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_rewardToken",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_lpToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenPerSec",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_originUser",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isNative",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "OnReward",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldRate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newRate",
          "type": "uint256"
        }
      ],
      "name": "RewardRateUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "balance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNextIncentivesController",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isNative",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lpToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_lpAmount",
          "type": "uint256"
        }
      ],
      "name": "onReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "operator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "originUser",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "pendingTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "pending",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "accTokenPerShare",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastRewardTimestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nextIncentivesController",
          "type": "address"
        }
      ],
      "name": "setNextIncentivesController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenPerSec",
          "type": "uint256"
        }
      ],
      "name": "setRewardRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenPerSec",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updatePool",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "accTokenPerShare",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastRewardTimestamp",
              "type": "uint256"
            }
          ],
          "internalType": "struct SimpleIncentivesController.PoolInfo",
          "name": "pool",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardDebt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "unpaidRewards",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x2a1572ffa9744bf685d8be5c2732c2291fceed121608f5ab4c300fd1577e8cd6",
  "receipt": {
    "to": null,
    "from": "0x0aA282136b3924ca6767C4D5B9aad6f83bD40A9c",
    "contractAddress": "0x3570A0800874a78607DD31Fac18495A2e50A68C1",
    "transactionIndex": 5,
    "gasUsed": "1508096",
    "logsBloom": "0x00000000000000000000000000000000000400000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000800000000000000020000000000000000000800000000000000000000080000000000400000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000020000000000200000000000000000000000",
    "blockHash": "0x4b712275e43c2378bb3ddb35316ffbe32160939f15885aa7b90d7f876afaf42f",
    "transactionHash": "0x2a1572ffa9744bf685d8be5c2732c2291fceed121608f5ab4c300fd1577e8cd6",
    "logs": [
      {
        "transactionIndex": 5,
        "blockNumber": 19357057,
        "transactionHash": "0x2a1572ffa9744bf685d8be5c2732c2291fceed121608f5ab4c300fd1577e8cd6",
        "address": "0x3570A0800874a78607DD31Fac18495A2e50A68C1",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000aa282136b3924ca6767c4d5b9aad6f83bd40a9c"
        ],
        "data": "0x",
        "logIndex": 10,
        "blockHash": "0x4b712275e43c2378bb3ddb35316ffbe32160939f15885aa7b90d7f876afaf42f"
      }
    ],
    "blockNumber": 19357057,
    "cumulativeGasUsed": "2646110",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x3094A01FC000a38c1996fE6c17E92AADa0e585A5",
    "0xF6210A01E8F271862871a80Dbf3fdCD720F8Ef3C",
    "250000000000000000",
    "0xD3930575cf356f5cba89DD7Cdb06668e6C00F4a9",
    "0xD3930575cf356f5cba89DD7Cdb06668e6C00F4a9",
    false
  ],
  "solcInputHash": "a446a3ecf802cd554ad6cd17661d3447",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenPerSec\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_originUser\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isNative\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"OnReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRate\",\"type\":\"uint256\"}],\"name\":\"RewardRateUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNextIncentivesController\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isNative\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_lpAmount\",\"type\":\"uint256\"}],\"name\":\"onReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"originUser\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pending\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"accTokenPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nextIncentivesController\",\"type\":\"address\"}],\"name\":\"setNextIncentivesController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenPerSec\",\"type\":\"uint256\"}],\"name\":\"setRewardRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenPerSec\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updatePool\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"accTokenPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardTimestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct SimpleIncentivesController.PoolInfo\",\"name\":\"pool\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unpaidRewards\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"onReward(address,uint256)\":{\"params\":{\"_lpAmount\":\"Number of LP tokens the user has\",\"_user\":\"Address of user\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pendingTokens(address)\":{\"params\":{\"_user\":\"Address of user.\"},\"returns\":{\"pending\":\"reward for a given user.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setRewardRate(uint256)\":{\"params\":{\"_tokenPerSec\":\"The number of tokens to distribute per second\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updatePool()\":{\"returns\":{\"pool\":\"Returns the pool that was updated.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"balance()\":{\"notice\":\"View function to see balance of reward token.\"},\"emergencyWithdraw()\":{\"notice\":\"In case rewarder is stopped before emissions finished, this function allows withdrawal of remaining tokens.\"},\"onReward(address,uint256)\":{\"notice\":\"Function called by operator whenever staker claims harvest. Allows staker to also receive a 2nd reward token.\"},\"pendingTokens(address)\":{\"notice\":\"View function to see pending tokens\"},\"setRewardRate(uint256)\":{\"notice\":\"Sets the distribution reward rate. This will also update the poolInfo.\"},\"updatePool()\":{\"notice\":\"Update reward variables of the given poolInfo.\"},\"userInfo(address)\":{\"notice\":\"Info of each user that stakes LP tokens.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/incentives/SimpleIncentivesController.sol\":\"SimpleIncentivesController\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x15e2d5bd4c28a88548074c54d220e8086f638a71ed07e6b3ba5a70066fcf458d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x8bbbc2f5c10065ee272592ae0a7a6ceb23de2fbd81564ee0bb015ecf404d5f61\",\"license\":\"MIT\"},\"contracts/incentives/SimpleIncentivesController.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"../interfaces/IOnwardIncentivesController.sol\\\";\\n\\ncontract SimpleIncentivesController is IOnwardIncentivesController, Ownable, ReentrancyGuard {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    IERC20 public immutable override rewardToken;\\n    IERC20 public immutable lpToken;\\n    bool public immutable isNative;\\n    // It is who call onReward method\\n    address public immutable operator;\\n    // always be masterchef\\n    address public immutable originUser;\\n\\n    address private _nextIncentivesController;\\n\\n    struct UserInfo {\\n        uint256 amount;\\n        uint256 rewardDebt;\\n        uint256 unpaidRewards;\\n    }\\n\\n    struct PoolInfo {\\n        uint256 accTokenPerShare;\\n        uint256 lastRewardTimestamp;\\n    }\\n\\n    PoolInfo public poolInfo;\\n    /// @notice Info of each user that stakes LP tokens.\\n    mapping(address => UserInfo) public userInfo;\\n\\n    uint256 public tokenPerSec;\\n\\n    uint256 private ACC_TOKEN_PRECISION;\\n\\n    event OnReward(address indexed user, uint256 amount);\\n    event RewardRateUpdated(uint256 oldRate, uint256 newRate);\\n\\n    modifier onlyOperator() {\\n        require(msg.sender == operator, \\\"onlyOperator: only operator can call this function\\\");\\n        _;\\n    }\\n\\n    constructor(\\n        IERC20 _rewardToken,\\n        IERC20 _lpToken,\\n        uint256 _tokenPerSec,\\n        address _operator,\\n        address _originUser,\\n        bool _isNative\\n    ) public {\\n        require(Address.isContract(address(_rewardToken)), \\\"constructor: reward token must be a valid contract\\\");\\n        require(Address.isContract(address(_lpToken)), \\\"constructor: LP token must be a valid contract\\\");\\n        require(Address.isContract(_operator), \\\"constructor: operator must be a valid contract\\\");\\n        require(Address.isContract(_originUser), \\\"constructor: originUser must be a valid contract\\\");\\n        require(_tokenPerSec <= 1e30, \\\"constructor: token per seconds can't be greater than 1e30\\\");\\n\\n        rewardToken = _rewardToken;\\n        lpToken = _lpToken;\\n        tokenPerSec = _tokenPerSec;\\n        operator = _operator;\\n        originUser = _originUser;\\n        isNative = _isNative;\\n        poolInfo = PoolInfo({lastRewardTimestamp: block.timestamp, accTokenPerShare: 0});\\n\\n        // Given the fraction, tokenReward * ACC_TOKEN_PRECISION / lpSupply\\n        ACC_TOKEN_PRECISION = 1e36;\\n    }\\n\\n    /// @notice Update reward variables of the given poolInfo.\\n    /// @return pool Returns the pool that was updated.\\n    function updatePool() public returns (PoolInfo memory pool) {\\n        pool = poolInfo;\\n\\n        if (block.timestamp > pool.lastRewardTimestamp) {\\n            uint256 lpSupply = lpToken.balanceOf(originUser);\\n\\n            if (lpSupply > 0) {\\n                uint256 timeElapsed = block.timestamp.sub(pool.lastRewardTimestamp);\\n                uint256 tokenReward = timeElapsed.mul(tokenPerSec);\\n                pool.accTokenPerShare = pool.accTokenPerShare.add((tokenReward.mul(ACC_TOKEN_PRECISION) / lpSupply));\\n            }\\n\\n            pool.lastRewardTimestamp = block.timestamp;\\n            poolInfo = pool;\\n        }\\n    }\\n\\n    function setNextIncentivesController(address nextIncentivesController) external onlyOwner {\\n        _nextIncentivesController = nextIncentivesController;\\n    }\\n\\n    /// @notice Sets the distribution reward rate. This will also update the poolInfo.\\n    /// @param _tokenPerSec The number of tokens to distribute per second\\n    function setRewardRate(uint256 _tokenPerSec) external onlyOwner {\\n        updatePool();\\n\\n        uint256 oldRate = tokenPerSec;\\n        tokenPerSec = _tokenPerSec;\\n\\n        emit RewardRateUpdated(oldRate, _tokenPerSec);\\n    }\\n\\n    /// @notice Function called by operator whenever staker claims harvest. Allows staker to also receive a 2nd reward token.\\n    /// @param _user Address of user\\n    /// @param _lpAmount Number of LP tokens the user has\\n    function onReward(address _user, uint256 _lpAmount) external override onlyOperator nonReentrant {\\n        updatePool();\\n        PoolInfo memory pool = poolInfo;\\n        UserInfo storage user = userInfo[_user];\\n        uint256 pending;\\n        if (user.amount > 0) {\\n            pending = (user.amount.mul(pool.accTokenPerShare) / ACC_TOKEN_PRECISION).sub(user.rewardDebt).add(\\n                user.unpaidRewards\\n            );\\n\\n            if (isNative) {\\n                uint256 balance = address(this).balance;\\n                if (pending > balance) {\\n                    (bool success,) = _user.call{value : balance}(\\\"\\\");\\n                    require(success, \\\"Transfer failed\\\");\\n                    user.unpaidRewards = pending - balance;\\n                } else {\\n                    (bool success,) = _user.call{value : pending}(\\\"\\\");\\n                    require(success, \\\"Transfer failed\\\");\\n                    user.unpaidRewards = 0;\\n                }\\n            } else {\\n                uint256 balance = rewardToken.balanceOf(address(this));\\n                if (pending > balance) {\\n                    rewardToken.safeTransfer(_user, balance);\\n                    user.unpaidRewards = pending - balance;\\n                } else {\\n                    rewardToken.safeTransfer(_user, pending);\\n                    user.unpaidRewards = 0;\\n                }\\n            }\\n        }\\n\\n        user.amount = _lpAmount;\\n        user.rewardDebt = user.amount.mul(pool.accTokenPerShare) / ACC_TOKEN_PRECISION;\\n\\n        // Interactions\\n        if (_nextIncentivesController != address(0)) {\\n            IOnwardIncentivesController(_nextIncentivesController).onReward(_user, _lpAmount);\\n        }\\n\\n        emit OnReward(_user, pending - user.unpaidRewards);\\n    }\\n\\n    /// @notice View function to see pending tokens\\n    /// @param _user Address of user.\\n    /// @return pending reward for a given user.\\n    function pendingTokens(address _user) external view override returns (uint256 pending) {\\n        PoolInfo memory pool = poolInfo;\\n        UserInfo storage user = userInfo[_user];\\n\\n        uint256 accTokenPerShare = pool.accTokenPerShare;\\n        uint256 lpSupply = lpToken.balanceOf(originUser);\\n\\n        if (block.timestamp > pool.lastRewardTimestamp && lpSupply != 0) {\\n            uint256 timeElapsed = block.timestamp.sub(pool.lastRewardTimestamp);\\n            uint256 tokenReward = timeElapsed.mul(tokenPerSec);\\n            accTokenPerShare = accTokenPerShare.add(tokenReward.mul(ACC_TOKEN_PRECISION).div(lpSupply));\\n        }\\n\\n        pending = (user.amount.mul(accTokenPerShare) / ACC_TOKEN_PRECISION).sub(user.rewardDebt).add(\\n            user.unpaidRewards\\n        );\\n    }\\n\\n    /// @notice In case rewarder is stopped before emissions finished, this function allows\\n    /// withdrawal of remaining tokens.\\n    function emergencyWithdraw() public onlyOwner {\\n        if (isNative) {\\n            (bool success,) = msg.sender.call{value : address(this).balance}(\\\"\\\");\\n            require(success, \\\"Transfer failed\\\");\\n        } else {\\n            rewardToken.safeTransfer(address(msg.sender), rewardToken.balanceOf(address(this)));\\n        }\\n    }\\n\\n    /// @notice View function to see balance of reward token.\\n    function balance() external view returns (uint256) {\\n        if (isNative) {\\n            return address(this).balance;\\n        } else {\\n            return rewardToken.balanceOf(address(this));\\n        }\\n    }\\n\\n    function getNextIncentivesController() external view override returns (address) {\\n        return _nextIncentivesController;\\n    }\\n\\n    /// @notice payable function needed to receive AVAX\\n    receive() external payable {}\\n}\",\"keccak256\":\"0x18755131ff8219481a697db0bf097905b4da6c5569a967c5888c4701ee6764d9\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IOnwardIncentivesController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IOnwardIncentivesController {\\n    function onReward(address user, uint256 newLpAmount) external;\\n\\n    function pendingTokens(address user) external view returns (uint256 pending);\\n\\n    function rewardToken() external view returns (IERC20);\\n\\n    function getNextIncentivesController() external view returns (address);\\n}\\n\",\"keccak256\":\"0x6671bd4d8674181b6c5d60076c6468fced9538a28c6ce5d85974a40610f1d3e4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101206040523480156200001257600080fd5b5060405162001d0e38038062001d0e83398101604081905262000035916200021a565b60006200004162000210565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35060018081905550620000a8866200021460201b620010861760201c565b620000d05760405162461bcd60e51b8152600401620000c790620002f2565b60405180910390fd5b620000e6856200021460201b620010861760201c565b620001055760405162461bcd60e51b8152600401620000c790620003a1565b6200011b836200021460201b620010861760201c565b6200013a5760405162461bcd60e51b8152600401620000c790620002a4565b62000150826200021460201b620010861760201c565b6200016f5760405162461bcd60e51b8152600401620000c790620003ef565b6c0c9f2c9cd04674edea400000008411156200019f5760405162461bcd60e51b8152600401620000c79062000344565b6001600160601b0319606096871b811660805294861b851660a05260069390935590841b831660e05290921b1661010052151560f81b60c052604080518082019091526000808252426020929092018290526003556004556ec097ce7bc90715b34b9f100000000060075562000458565b3390565b3b151590565b60008060008060008060c0878903121562000233578182fd5b865162000240816200043f565b602088015190965062000253816200043f565b6040880151606089015191965094506200026d816200043f565b608088015190935062000280816200043f565b60a0880151909250801515811462000296578182fd5b809150509295509295509295565b6020808252602e908201527f636f6e7374727563746f723a206f70657261746f72206d75737420626520612060408201526d1d985b1a590818dbdb9d1c9858dd60921b606082015260800190565b60208082526032908201527f636f6e7374727563746f723a2072657761726420746f6b656e206d7573742062604082015271194818481d985b1a590818dbdb9d1c9858dd60721b606082015260800190565b60208082526039908201527f636f6e7374727563746f723a20746f6b656e20706572207365636f6e6473206360408201527f616e27742062652067726561746572207468616e203165333000000000000000606082015260800190565b6020808252602e908201527f636f6e7374727563746f723a204c5020746f6b656e206d75737420626520612060408201526d1d985b1a590818dbdb9d1c9858dd60921b606082015260800190565b60208082526030908201527f636f6e7374727563746f723a206f726967696e55736572206d7573742062652060408201526f18481d985b1a590818dbdb9d1c9858dd60821b606082015260800190565b6001600160a01b03811681146200045557600080fd5b50565b60805160601c60a05160601c60c05160f81c60e05160601c6101005160601c611821620004ed6000398061049152806107065280610eab52508061038a528061084a52508061046d52806105b5528061092f5280610cc25250806103b752806106d75280610e7e5250806105f75280610a8b5280610b275280610b685280610d6e5280610e12528061106452506118216000f3fe6080604052600436106101185760003560e01c80638da5cb5b116100a0578063c372328811610064578063c3723288146102c5578063db2e21bc146102e5578063e3161ddd146102fa578063f2fde38b1461031c578063f7c618c11461033c5761011f565b80638da5cb5b1461023b57806396335c17146102505780639e447fc614610270578063b69ef8a814610290578063c031a66f146102a55761011f565b80635a2f3d09116100e75780635a2f3d09146101b55780635fcbd285146101d8578063715018a6146101ed57806373cfc6b2146102045780637f575bce146102265761011f565b80631959a002146101245780633fdb343e1461015c57806350fd1f3e1461017e578063570ca735146101a05761011f565b3661011f57005b600080fd5b34801561013057600080fd5b5061014461013f366004611381565b610351565b604051610153939291906117a5565b60405180910390f35b34801561016857600080fd5b50610171610372565b6040516101539190611432565b34801561018a57600080fd5b50610193610382565b604051610153919061178e565b3480156101ac57600080fd5b50610171610388565b3480156101c157600080fd5b506101ca6103ac565b604051610153929190611797565b3480156101e457600080fd5b506101716103b5565b3480156101f957600080fd5b506102026103d9565b005b34801561021057600080fd5b5061021961046b565b604051610153919061145f565b34801561023257600080fd5b5061017161048f565b34801561024757600080fd5b506101716104b3565b34801561025c57600080fd5b5061020261026b366004611381565b6104c2565b34801561027c57600080fd5b5061020261028b3660046113e6565b610523565b34801561029c57600080fd5b506101936105b1565b3480156102b157600080fd5b506101936102c0366004611381565b610683565b3480156102d157600080fd5b506102026102e036600461139c565b61083f565b3480156102f157600080fd5b50610202610c81565b34801561030657600080fd5b5061030f610e3b565b6040516101539190611777565b34801561032857600080fd5b50610202610337366004611381565b610fa2565b34801561034857600080fd5b50610171611062565b60056020526000908152604090208054600182015460029092015490919083565b6002546001600160a01b03165b90565b60065481565b7f000000000000000000000000000000000000000000000000000000000000000081565b60035460045482565b7f000000000000000000000000000000000000000000000000000000000000000081565b6103e161108c565b6001600160a01b03166103f26104b3565b6001600160a01b0316146104215760405162461bcd60e51b815260040161041890611638565b60405180910390fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000546001600160a01b031690565b6104ca61108c565b6001600160a01b03166104db6104b3565b6001600160a01b0316146105015760405162461bcd60e51b815260040161041890611638565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b61052b61108c565b6001600160a01b031661053c6104b3565b6001600160a01b0316146105625760405162461bcd60e51b815260040161041890611638565b61056a610e3b565b5060068054908290556040517fc390a98ace15a7bb6bab611eedfdbb2685043b241a869420043cdfb23ccfee50906105a59083908590611797565b60405180910390a15050565b60007f0000000000000000000000000000000000000000000000000000000000000000156105e057504761037f565b6040516370a0823160e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319061062c903090600401611432565b60206040518083038186803b15801561064457600080fd5b505afa158015610658573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061067c91906113fe565b905061037f565b600061068d611350565b506040805180820182526003548152600480546020808401919091526001600160a01b0380871660009081526005909252848220845195516370a0823160e01b81529495909490937f0000000000000000000000000000000000000000000000000000000000000000909216916370a082319161072c917f00000000000000000000000000000000000000000000000000000000000000009101611432565b60206040518083038186803b15801561074457600080fd5b505afa158015610758573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061077c91906113fe565b905083602001514211801561079057508015155b156107f75760006107ae85602001514261109090919063ffffffff16565b905060006107c7600654836110bd90919063ffffffff16565b90506107f26107eb846107e5600754856110bd90919063ffffffff16565b906110fe565b8590611130565b935050505b610835836002015461082f85600101546007546108218789600001546110bd90919063ffffffff16565b8161082857fe5b0490611090565b90611130565b9695505050505050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146108875760405162461bcd60e51b8152600401610418906116ee565b600260015414156108aa5760405162461bcd60e51b815260040161041890611740565b60026001556108b7610e3b565b506108c0611350565b5060408051808201825260035481526004546020808301919091526001600160a01b0385166000908152600590915291822080549192909115610b995761092b826002015461082f8460010154600754610821886000015188600001546110bd90919063ffffffff16565b90507f000000000000000000000000000000000000000000000000000000000000000015610a715747808211156109e6576000866001600160a01b0316826040516109759061037f565b60006040518083038185875af1925050503d80600081146109b2576040519150601f19603f3d011682016040523d82523d6000602084013e6109b7565b606091505b50509050806109d85760405162461bcd60e51b8152600401610418906114e3565b508082036002840155610a6b565b6000866001600160a01b0316836040516109ff9061037f565b60006040518083038185875af1925050503d8060008114610a3c576040519150601f19603f3d011682016040523d82523d6000602084013e610a41565b606091505b5050905080610a625760405162461bcd60e51b8152600401610418906114e3565b50600060028401555b50610b99565b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190610ac0903090600401611432565b60206040518083038186803b158015610ad857600080fd5b505afa158015610aec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b1091906113fe565b905080821115610b5b57610b4e6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168783611155565b8082036002840155610b97565b610b8f6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168784611155565b600060028401555b505b8382556007548351610bac9086906110bd565b81610bb357fe5b0460018301556002546001600160a01b031615610c2f5760025460405163186e465160e31b81526001600160a01b039091169063c372328890610bfc9088908890600401611446565b600060405180830381600087803b158015610c1657600080fd5b505af1158015610c2a573d6000803e3d6000fd5b505050505b846001600160a01b03167fd1072bb52c3131d0c96197b73fb8a45637e30f8b6664fc142310cc9b242859b483600201548303604051610c6e919061178e565b60405180910390a2505060018055505050565b610c8961108c565b6001600160a01b0316610c9a6104b3565b6001600160a01b031614610cc05760405162461bcd60e51b815260040161041890611638565b7f000000000000000000000000000000000000000000000000000000000000000015610d68576000336001600160a01b031647604051610cff9061037f565b60006040518083038185875af1925050503d8060008114610d3c576040519150601f19603f3d011682016040523d82523d6000602084013e610d41565b606091505b5050905080610d625760405162461bcd60e51b8152600401610418906114e3565b50610e39565b610e39337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401610db89190611432565b60206040518083038186803b158015610dd057600080fd5b505afa158015610de4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e0891906113fe565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169190611155565b565b610e43611350565b506040805180820190915260035481526004546020820181905242111561037f576040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190610ed3907f000000000000000000000000000000000000000000000000000000000000000090600401611432565b60206040518083038186803b158015610eeb57600080fd5b505afa158015610eff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f2391906113fe565b90508015610f8e576000610f4483602001514261109090919063ffffffff16565b90506000610f5d600654836110bd90919063ffffffff16565b9050610f8983610f78600754846110bd90919063ffffffff16565b81610f7f57fe5b8651919004611130565b845250505b504260208201819052815160035560045590565b610faa61108c565b6001600160a01b0316610fbb6104b3565b6001600160a01b031614610fe15760405162461bcd60e51b815260040161041890611638565b6001600160a01b0381166110075760405162461bcd60e51b81526004016104189061149d565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b7f000000000000000000000000000000000000000000000000000000000000000081565b3b151590565b3390565b6000828211156110b25760405162461bcd60e51b815260040161041890611543565b508082035b92915050565b6000826110cc575060006110b7565b828202828482816110d957fe5b04146110f75760405162461bcd60e51b8152600401610418906115f7565b9392505050565b600080821161111f5760405162461bcd60e51b8152600401610418906115c0565b81838161112857fe5b049392505050565b6000828201838110156110f75760405162461bcd60e51b81526004016104189061150c565b6111ab8363a9059cbb60e01b8484604051602401611174929190611446565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526111b0565b505050565b6060611205826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661123f9092919063ffffffff16565b8051909150156111ab578080602001905181019061122391906113c6565b6111ab5760405162461bcd60e51b8152600401610418906116a4565b606061124e8484600085611256565b949350505050565b6060824710156112785760405162461bcd60e51b81526004016104189061157a565b61128185611086565b61129d5760405162461bcd60e51b81526004016104189061166d565b60006060866001600160a01b031685876040516112ba9190611416565b60006040518083038185875af1925050503d80600081146112f7576040519150601f19603f3d011682016040523d82523d6000602084013e6112fc565b606091505b509150915061130c828286611317565b979650505050505050565b606083156113265750816110f7565b8251156113365782518084602001fd5b8160405162461bcd60e51b8152600401610418919061146a565b604051806040016040528060008152602001600081525090565b80356001600160a01b03811681146110b757600080fd5b600060208284031215611392578081fd5b6110f7838361136a565b600080604083850312156113ae578081fd5b6113b8848461136a565b946020939093013593505050565b6000602082840312156113d7578081fd5b815180151581146110f7578182fd5b6000602082840312156113f7578081fd5b5035919050565b60006020828403121561140f578081fd5b5051919050565b600082516114288184602087016117bb565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b901515815260200190565b60006020825282518060208401526114898160408501602087016117bb565b601f01601f19169190910160400192915050565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b6020808252600f908201526e151c985b9cd9995c8819985a5b1959608a1b604082015260600190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b6020808252601e908201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604082015260600190565b60208082526026908201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6040820152651c8818d85b1b60d21b606082015260800190565b6020808252601a908201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601d908201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6040820152691bdd081cdd58d8d9595960b21b606082015260800190565b60208082526032908201527f6f6e6c794f70657261746f723a206f6e6c79206f70657261746f722063616e2060408201527131b0b636103a3434b990333ab731ba34b7b760711b606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b815181526020918201519181019190915260400190565b90815260200190565b918252602082015260400190565b9283526020830191909152604082015260600190565b60005b838110156117d65781810151838201526020016117be565b838111156117e5576000848401525b5050505056fea264697066735822122026baec23b72f734f04777e9ae5415e419ec55f0eb44760b41e56967d7967e38f64736f6c634300060c0033",
  "deployedBytecode": "0x6080604052600436106101185760003560e01c80638da5cb5b116100a0578063c372328811610064578063c3723288146102c5578063db2e21bc146102e5578063e3161ddd146102fa578063f2fde38b1461031c578063f7c618c11461033c5761011f565b80638da5cb5b1461023b57806396335c17146102505780639e447fc614610270578063b69ef8a814610290578063c031a66f146102a55761011f565b80635a2f3d09116100e75780635a2f3d09146101b55780635fcbd285146101d8578063715018a6146101ed57806373cfc6b2146102045780637f575bce146102265761011f565b80631959a002146101245780633fdb343e1461015c57806350fd1f3e1461017e578063570ca735146101a05761011f565b3661011f57005b600080fd5b34801561013057600080fd5b5061014461013f366004611381565b610351565b604051610153939291906117a5565b60405180910390f35b34801561016857600080fd5b50610171610372565b6040516101539190611432565b34801561018a57600080fd5b50610193610382565b604051610153919061178e565b3480156101ac57600080fd5b50610171610388565b3480156101c157600080fd5b506101ca6103ac565b604051610153929190611797565b3480156101e457600080fd5b506101716103b5565b3480156101f957600080fd5b506102026103d9565b005b34801561021057600080fd5b5061021961046b565b604051610153919061145f565b34801561023257600080fd5b5061017161048f565b34801561024757600080fd5b506101716104b3565b34801561025c57600080fd5b5061020261026b366004611381565b6104c2565b34801561027c57600080fd5b5061020261028b3660046113e6565b610523565b34801561029c57600080fd5b506101936105b1565b3480156102b157600080fd5b506101936102c0366004611381565b610683565b3480156102d157600080fd5b506102026102e036600461139c565b61083f565b3480156102f157600080fd5b50610202610c81565b34801561030657600080fd5b5061030f610e3b565b6040516101539190611777565b34801561032857600080fd5b50610202610337366004611381565b610fa2565b34801561034857600080fd5b50610171611062565b60056020526000908152604090208054600182015460029092015490919083565b6002546001600160a01b03165b90565b60065481565b7f000000000000000000000000000000000000000000000000000000000000000081565b60035460045482565b7f000000000000000000000000000000000000000000000000000000000000000081565b6103e161108c565b6001600160a01b03166103f26104b3565b6001600160a01b0316146104215760405162461bcd60e51b815260040161041890611638565b60405180910390fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000546001600160a01b031690565b6104ca61108c565b6001600160a01b03166104db6104b3565b6001600160a01b0316146105015760405162461bcd60e51b815260040161041890611638565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b61052b61108c565b6001600160a01b031661053c6104b3565b6001600160a01b0316146105625760405162461bcd60e51b815260040161041890611638565b61056a610e3b565b5060068054908290556040517fc390a98ace15a7bb6bab611eedfdbb2685043b241a869420043cdfb23ccfee50906105a59083908590611797565b60405180910390a15050565b60007f0000000000000000000000000000000000000000000000000000000000000000156105e057504761037f565b6040516370a0823160e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319061062c903090600401611432565b60206040518083038186803b15801561064457600080fd5b505afa158015610658573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061067c91906113fe565b905061037f565b600061068d611350565b506040805180820182526003548152600480546020808401919091526001600160a01b0380871660009081526005909252848220845195516370a0823160e01b81529495909490937f0000000000000000000000000000000000000000000000000000000000000000909216916370a082319161072c917f00000000000000000000000000000000000000000000000000000000000000009101611432565b60206040518083038186803b15801561074457600080fd5b505afa158015610758573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061077c91906113fe565b905083602001514211801561079057508015155b156107f75760006107ae85602001514261109090919063ffffffff16565b905060006107c7600654836110bd90919063ffffffff16565b90506107f26107eb846107e5600754856110bd90919063ffffffff16565b906110fe565b8590611130565b935050505b610835836002015461082f85600101546007546108218789600001546110bd90919063ffffffff16565b8161082857fe5b0490611090565b90611130565b9695505050505050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146108875760405162461bcd60e51b8152600401610418906116ee565b600260015414156108aa5760405162461bcd60e51b815260040161041890611740565b60026001556108b7610e3b565b506108c0611350565b5060408051808201825260035481526004546020808301919091526001600160a01b0385166000908152600590915291822080549192909115610b995761092b826002015461082f8460010154600754610821886000015188600001546110bd90919063ffffffff16565b90507f000000000000000000000000000000000000000000000000000000000000000015610a715747808211156109e6576000866001600160a01b0316826040516109759061037f565b60006040518083038185875af1925050503d80600081146109b2576040519150601f19603f3d011682016040523d82523d6000602084013e6109b7565b606091505b50509050806109d85760405162461bcd60e51b8152600401610418906114e3565b508082036002840155610a6b565b6000866001600160a01b0316836040516109ff9061037f565b60006040518083038185875af1925050503d8060008114610a3c576040519150601f19603f3d011682016040523d82523d6000602084013e610a41565b606091505b5050905080610a625760405162461bcd60e51b8152600401610418906114e3565b50600060028401555b50610b99565b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190610ac0903090600401611432565b60206040518083038186803b158015610ad857600080fd5b505afa158015610aec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b1091906113fe565b905080821115610b5b57610b4e6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168783611155565b8082036002840155610b97565b610b8f6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168784611155565b600060028401555b505b8382556007548351610bac9086906110bd565b81610bb357fe5b0460018301556002546001600160a01b031615610c2f5760025460405163186e465160e31b81526001600160a01b039091169063c372328890610bfc9088908890600401611446565b600060405180830381600087803b158015610c1657600080fd5b505af1158015610c2a573d6000803e3d6000fd5b505050505b846001600160a01b03167fd1072bb52c3131d0c96197b73fb8a45637e30f8b6664fc142310cc9b242859b483600201548303604051610c6e919061178e565b60405180910390a2505060018055505050565b610c8961108c565b6001600160a01b0316610c9a6104b3565b6001600160a01b031614610cc05760405162461bcd60e51b815260040161041890611638565b7f000000000000000000000000000000000000000000000000000000000000000015610d68576000336001600160a01b031647604051610cff9061037f565b60006040518083038185875af1925050503d8060008114610d3c576040519150601f19603f3d011682016040523d82523d6000602084013e610d41565b606091505b5050905080610d625760405162461bcd60e51b8152600401610418906114e3565b50610e39565b610e39337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401610db89190611432565b60206040518083038186803b158015610dd057600080fd5b505afa158015610de4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e0891906113fe565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169190611155565b565b610e43611350565b506040805180820190915260035481526004546020820181905242111561037f576040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190610ed3907f000000000000000000000000000000000000000000000000000000000000000090600401611432565b60206040518083038186803b158015610eeb57600080fd5b505afa158015610eff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f2391906113fe565b90508015610f8e576000610f4483602001514261109090919063ffffffff16565b90506000610f5d600654836110bd90919063ffffffff16565b9050610f8983610f78600754846110bd90919063ffffffff16565b81610f7f57fe5b8651919004611130565b845250505b504260208201819052815160035560045590565b610faa61108c565b6001600160a01b0316610fbb6104b3565b6001600160a01b031614610fe15760405162461bcd60e51b815260040161041890611638565b6001600160a01b0381166110075760405162461bcd60e51b81526004016104189061149d565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b7f000000000000000000000000000000000000000000000000000000000000000081565b3b151590565b3390565b6000828211156110b25760405162461bcd60e51b815260040161041890611543565b508082035b92915050565b6000826110cc575060006110b7565b828202828482816110d957fe5b04146110f75760405162461bcd60e51b8152600401610418906115f7565b9392505050565b600080821161111f5760405162461bcd60e51b8152600401610418906115c0565b81838161112857fe5b049392505050565b6000828201838110156110f75760405162461bcd60e51b81526004016104189061150c565b6111ab8363a9059cbb60e01b8484604051602401611174929190611446565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526111b0565b505050565b6060611205826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661123f9092919063ffffffff16565b8051909150156111ab578080602001905181019061122391906113c6565b6111ab5760405162461bcd60e51b8152600401610418906116a4565b606061124e8484600085611256565b949350505050565b6060824710156112785760405162461bcd60e51b81526004016104189061157a565b61128185611086565b61129d5760405162461bcd60e51b81526004016104189061166d565b60006060866001600160a01b031685876040516112ba9190611416565b60006040518083038185875af1925050503d80600081146112f7576040519150601f19603f3d011682016040523d82523d6000602084013e6112fc565b606091505b509150915061130c828286611317565b979650505050505050565b606083156113265750816110f7565b8251156113365782518084602001fd5b8160405162461bcd60e51b8152600401610418919061146a565b604051806040016040528060008152602001600081525090565b80356001600160a01b03811681146110b757600080fd5b600060208284031215611392578081fd5b6110f7838361136a565b600080604083850312156113ae578081fd5b6113b8848461136a565b946020939093013593505050565b6000602082840312156113d7578081fd5b815180151581146110f7578182fd5b6000602082840312156113f7578081fd5b5035919050565b60006020828403121561140f578081fd5b5051919050565b600082516114288184602087016117bb565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b901515815260200190565b60006020825282518060208401526114898160408501602087016117bb565b601f01601f19169190910160400192915050565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b6020808252600f908201526e151c985b9cd9995c8819985a5b1959608a1b604082015260600190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b6020808252601e908201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604082015260600190565b60208082526026908201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6040820152651c8818d85b1b60d21b606082015260800190565b6020808252601a908201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601d908201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6040820152691bdd081cdd58d8d9595960b21b606082015260800190565b60208082526032908201527f6f6e6c794f70657261746f723a206f6e6c79206f70657261746f722063616e2060408201527131b0b636103a3434b990333ab731ba34b7b760711b606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b815181526020918201519181019190915260400190565b90815260200190565b918252602082015260400190565b9283526020830191909152604082015260600190565b60005b838110156117d65781810151838201526020016117be565b838111156117e5576000848401525b5050505056fea264697066735822122026baec23b72f734f04777e9ae5415e419ec55f0eb44760b41e56967d7967e38f64736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "onReward(address,uint256)": {
        "params": {
          "_lpAmount": "Number of LP tokens the user has",
          "_user": "Address of user"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pendingTokens(address)": {
        "params": {
          "_user": "Address of user."
        },
        "returns": {
          "pending": "reward for a given user."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setRewardRate(uint256)": {
        "params": {
          "_tokenPerSec": "The number of tokens to distribute per second"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updatePool()": {
        "returns": {
          "pool": "Returns the pool that was updated."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "balance()": {
        "notice": "View function to see balance of reward token."
      },
      "emergencyWithdraw()": {
        "notice": "In case rewarder is stopped before emissions finished, this function allows withdrawal of remaining tokens."
      },
      "onReward(address,uint256)": {
        "notice": "Function called by operator whenever staker claims harvest. Allows staker to also receive a 2nd reward token."
      },
      "pendingTokens(address)": {
        "notice": "View function to see pending tokens"
      },
      "setRewardRate(uint256)": {
        "notice": "Sets the distribution reward rate. This will also update the poolInfo."
      },
      "updatePool()": {
        "notice": "Update reward variables of the given poolInfo."
      },
      "userInfo(address)": {
        "notice": "Info of each user that stakes LP tokens."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10,
        "contract": "contracts/incentives/SimpleIncentivesController.sol:SimpleIncentivesController",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2305,
        "contract": "contracts/incentives/SimpleIncentivesController.sol:SimpleIncentivesController",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 7397,
        "contract": "contracts/incentives/SimpleIncentivesController.sol:SimpleIncentivesController",
        "label": "_nextIncentivesController",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 7411,
        "contract": "contracts/incentives/SimpleIncentivesController.sol:SimpleIncentivesController",
        "label": "poolInfo",
        "offset": 0,
        "slot": "3",
        "type": "t_struct(PoolInfo)7409_storage"
      },
      {
        "astId": 7416,
        "contract": "contracts/incentives/SimpleIncentivesController.sol:SimpleIncentivesController",
        "label": "userInfo",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_struct(UserInfo)7404_storage)"
      },
      {
        "astId": 7418,
        "contract": "contracts/incentives/SimpleIncentivesController.sol:SimpleIncentivesController",
        "label": "tokenPerSec",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 7420,
        "contract": "contracts/incentives/SimpleIncentivesController.sol:SimpleIncentivesController",
        "label": "ACC_TOKEN_PRECISION",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(UserInfo)7404_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct SimpleIncentivesController.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)7404_storage"
      },
      "t_struct(PoolInfo)7409_storage": {
        "encoding": "inplace",
        "label": "struct SimpleIncentivesController.PoolInfo",
        "members": [
          {
            "astId": 7406,
            "contract": "contracts/incentives/SimpleIncentivesController.sol:SimpleIncentivesController",
            "label": "accTokenPerShare",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 7408,
            "contract": "contracts/incentives/SimpleIncentivesController.sol:SimpleIncentivesController",
            "label": "lastRewardTimestamp",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UserInfo)7404_storage": {
        "encoding": "inplace",
        "label": "struct SimpleIncentivesController.UserInfo",
        "members": [
          {
            "astId": 7399,
            "contract": "contracts/incentives/SimpleIncentivesController.sol:SimpleIncentivesController",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 7401,
            "contract": "contracts/incentives/SimpleIncentivesController.sol:SimpleIncentivesController",
            "label": "rewardDebt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 7403,
            "contract": "contracts/incentives/SimpleIncentivesController.sol:SimpleIncentivesController",
            "label": "unpaidRewards",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}