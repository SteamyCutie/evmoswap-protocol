{
  "language": "Solidity",
  "sources": {
    "contracts/gemo/GemEMO.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.6.12;\n\n/*\n * EvmoSwap\n * App:             https://app.evmoswap.org/\n * Medium:          https://evmoswap.medium.com/\n * GitHub:          https://github.com/evmoswap/\n */\n\nimport \"./RBEP20.sol\";\n\ncontract GemEMO is RBEP20 {\n\n    constructor () public RBEP20(500000000 * 1e18, \"Gem EMO Token\", \"GEMO\", 18, 200) {}\n\n}"
    },
    "contracts/gemo/RBEP20.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.6.2;\n\n/*\n * EvmoSwap\n * App:             https://app.evmoswap.org/\n * Medium:          https://evmoswap.medium.com/\n * GitHub:          https://github.com/evmoswap/\n */\n\nimport \"@openzeppelin/contracts/GSN/Context.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract RBEP20 is Context, IERC20, Ownable {\n    using SafeMath for uint256;\n    using Address for address;\n\n    mapping (address => uint256) private _rOwned;\n    mapping (address => uint256) private _tOwned;\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    mapping (address => bool) private _isExcluded;\n    address[] private _excluded;\n\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    uint256 _taxFee = 200; // 2%\n    uint256 _maxTaxFee = 1000; // 10%\n    uint256 private constant _GRANULARITY = 100;\n\n    uint256 private constant MAX = ~uint256(0);\n    uint256 private _tTotal;\n    uint256 private _rTotal;\n    uint256 private _tFeeTotal;\n\n    event UpdateTaxFee(uint256 previousTaxFee, uint256 newTaxFee);\n\n    constructor (\n        uint256 initialSupply,\n        string memory name,\n        string memory symbol,\n        uint8 decimals,\n        uint256 taxFee\n        ) public {\n        _name = name;\n        _symbol = symbol;\n        _decimals = decimals;\n        _taxFee = taxFee;\n\n        _tTotal = initialSupply;\n        _rTotal = (MAX - (MAX % _tTotal));\n\n        _rOwned[_msgSender()] = _rTotal;\n        emit Transfer(address(0), _msgSender(), _tTotal);\n    }\n\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n\n    function totalSupply() public view override returns (uint256) {\n        return _tTotal;\n    }\n\n    function taxFee() external view returns (uint256) {\n        return _taxFee;\n    }\n\n    function maxTaxFee() external view returns (uint256) {\n        return _maxTaxFee;\n    }\n\n    function balanceOf(address account) public view override returns (uint256) {\n        if (_isExcluded[account]) return _tOwned[account];\n        return tokenFromReflection(_rOwned[account]);\n    }\n\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    function allowance(address owner, address spender) public view override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    function approve(address spender, uint256 amount) public override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n    }\n\n    function isExcluded(address account) public view returns (bool) {\n        return _isExcluded[account];\n    }\n\n    function totalFees() public view returns (uint256) {\n        return _tFeeTotal;\n    }\n\n    function reflect(uint256 tAmount) external {\n        address sender = _msgSender();\n        require(!_isExcluded[sender], \"Excluded addresses cannot call this function\");\n        (uint256 rAmount,,,,) = _getValues(tAmount);\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\n        _rTotal = _rTotal.sub(rAmount);\n        _tFeeTotal = _tFeeTotal.add(tAmount);\n    }\n\n    function reflectionFromToken(uint256 tAmount, bool deductTransferFee) public view returns(uint256) {\n        require(tAmount <= _tTotal, \"Amount must be less than supply\");\n        (uint256 rAmount, uint256 rTransferAmount,,,) = _getValues(tAmount);\n        return deductTransferFee ? rTransferAmount : rAmount;\n    }\n\n    function tokenFromReflection(uint256 rAmount) public view returns(uint256) {\n        require(rAmount <= _rTotal, \"Amount must be less than total reflections\");\n        uint256 currentRate = _getRate();\n        return rAmount.div(currentRate);\n    }\n\n    function excludeAccount(address account) external onlyOwner() {\n        require(!_isExcluded[account], \"Account is already excluded\");\n        if(_rOwned[account] > 0) {\n            _tOwned[account] = tokenFromReflection(_rOwned[account]);\n        }\n        _isExcluded[account] = true;\n        _excluded.push(account);\n    }\n\n    function includeAccount(address account) external onlyOwner() {\n        require(_isExcluded[account], \"Account is already excluded\");\n        for (uint256 i = 0; i < _excluded.length; i++) {\n            if (_excluded[i] == account) {\n                _excluded[i] = _excluded[_excluded.length - 1];\n                _tOwned[account] = 0;\n                _isExcluded[account] = false;\n                _excluded.pop();\n                break;\n            }\n        }\n    }\n\n    function updateTaxFee(uint256 _fee) public onlyOwner {\n        require(_fee <= _maxTaxFee, 'fee must be mess than maxTaxFee');\n        uint256 previousTaxFee = _taxFee;\n        _taxFee = _fee;\n        emit UpdateTaxFee(previousTaxFee, _taxFee);\n    }\n\n    function _approve(address owner, address spender, uint256 amount) private {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    function _transfer(address sender, address recipient, uint256 amount) private {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n        require(amount > 0, \"Transfer amount must be greater than zero\");\n        if (_isExcluded[sender] && !_isExcluded[recipient]) {\n            _transferFromExcluded(sender, recipient, amount);\n        } else if (!_isExcluded[sender] && _isExcluded[recipient]) {\n            _transferToExcluded(sender, recipient, amount);\n        } else if (_isExcluded[sender] && _isExcluded[recipient]) {\n            _transferBothExcluded(sender, recipient, amount);\n        } else {\n            /// @dev neither are excluded\n            _transferStandard(sender, recipient, amount);\n        }\n    }\n\n    function _transferStandard(address sender, address recipient, uint256 tAmount) private {\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee) = _getValues(tAmount);\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\n        _reflectFee(rFee, tFee);\n        emit Transfer(sender, recipient, tTransferAmount);\n    }\n\n    function _transferToExcluded(address sender, address recipient, uint256 tAmount) private {\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee) = _getValues(tAmount);\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\n        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\n        _reflectFee(rFee, tFee);\n        emit Transfer(sender, recipient, tTransferAmount);\n    }\n\n    function _transferFromExcluded(address sender, address recipient, uint256 tAmount) private {\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee) = _getValues(tAmount);\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\n        _reflectFee(rFee, tFee);\n        emit Transfer(sender, recipient, tTransferAmount);\n    }\n\n    function _transferBothExcluded(address sender, address recipient, uint256 tAmount) private {\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee) = _getValues(tAmount);\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\n        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\n        _reflectFee(rFee, tFee);\n        emit Transfer(sender, recipient, tTransferAmount);\n    }\n\n    function _reflectFee(uint256 rFee, uint256 tFee) private {\n        _rTotal = _rTotal.sub(rFee);\n        _tFeeTotal = _tFeeTotal.add(tFee);\n    }\n\n    function _getValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256, uint256) {\n        (uint256 tTransferAmount, uint256 tFee) = _getTValues(tAmount);\n        uint256 currentRate = _getRate();\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(tAmount, tFee, currentRate);\n        return (rAmount, rTransferAmount, rFee, tTransferAmount, tFee);\n    }\n\n    function _getTValues(uint256 tAmount) private view returns (uint256, uint256) {\n        uint256 tFee = ((tAmount.mul(_taxFee)).div(_GRANULARITY)).div(100);\n        uint256 tTransferAmount = tAmount.sub(tFee);\n        return (tTransferAmount, tFee);\n    }\n\n    function _getRValues(uint256 tAmount, uint256 tFee, uint256 currentRate) private pure returns (uint256, uint256, uint256) {\n        uint256 rAmount = tAmount.mul(currentRate);\n        uint256 rFee = tFee.mul(currentRate);\n        uint256 rTransferAmount = rAmount.sub(rFee);\n        return (rAmount, rTransferAmount, rFee);\n    }\n\n    function _getRate() private view returns(uint256) {\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\n        return rSupply.div(tSupply);\n    }\n\n    function _getCurrentSupply() private view returns(uint256, uint256) {\n        uint256 rSupply = _rTotal;\n        uint256 tSupply = _tTotal;\n        for (uint256 i = 0; i < _excluded.length; i++) {\n            if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply) return (_rTotal, _tTotal);\n            rSupply = rSupply.sub(_rOwned[_excluded[i]]);\n            tSupply = tSupply.sub(_tOwned[_excluded[i]]);\n        }\n        if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\n        return (rSupply, tSupply);\n    }\n\n}"
    },
    "@openzeppelin/contracts/GSN/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../utils/Context.sol\";\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        uint256 c = a + b;\n        if (c < a) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b > a) return (false, 0);\n        return (true, a - b);\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) return (true, 0);\n        uint256 c = a * b;\n        if (c / a != b) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a / b);\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a % b);\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) return 0;\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a % b;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.2 <0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../utils/Context.sol\";\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"
    },
    "contracts/tools/VCTokenVesting.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.12;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\r\n\r\n/**\r\n * @title VCTokenVesting\r\n * @dev A token holder contract that can release its token balance gradually like a\r\n * typical vesting scheme, with a cliff and vesting period. Optionally revocable by the\r\n * owner.\r\n */\r\ncontract VCTokenVesting is Ownable {\r\n    // The vesting schedule is time-based (i.e. using block timestamps as opposed to e.g. block numbers), and is\r\n    // therefore sensitive to timestamp manipulation (which is something miners can do, to a certain degree). Therefore,\r\n    // it is recommended to avoid using short time durations (less than a minute). Typical vesting schemes, with a\r\n    // cliff period of a year and a duration of four years, are safe to use.\r\n    // solhint-disable not-rely-on-time\r\n\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    event TokensReleased(address token, uint256 amount);\r\n    event TokenVestingRevoked(address token);\r\n\r\n    // beneficiary of tokens after they are released\r\n    address private _beneficiary;\r\n\r\n    // Durations and timestamps are expressed in UNIX time, the same units as block.timestamp.\r\n    uint256 private _cliff;\r\n    uint256 private _start;\r\n    uint256 private _duration;\r\n\r\n    bool private _revocable;\r\n\r\n    mapping (address => uint256) private _released;\r\n    mapping (address => bool) private _revoked;\r\n\r\n    /**\r\n     * @dev Creates a vesting contract that vests its balance of any ERC20 token to the\r\n     * beneficiary, gradually in a linear fashion until start + duration. By then all\r\n     * of the balance will have vested.\r\n     * @param beneficiary address of the beneficiary to whom vested tokens are transferred\r\n     * @param cliffDuration duration in seconds of the cliff in which tokens will begin to vest\r\n     * @param start the time (as Unix time) at which point vesting starts\r\n     * @param duration duration in seconds of the period in which the tokens will vest\r\n     * @param revocable whether the vesting is revocable or not\r\n     */\r\n    constructor (address beneficiary, uint256 start, uint256 cliffDuration, uint256 duration, bool revocable) public {\r\n        require(beneficiary != address(0), \"TokenVesting: beneficiary is the zero address\");\r\n        // solhint-disable-next-line max-line-length\r\n        require(cliffDuration <= duration, \"TokenVesting: cliff is longer than duration\");\r\n        require(duration > 0, \"TokenVesting: duration is 0\");\r\n        // solhint-disable-next-line max-line-length\r\n        require(start.add(duration) > block.timestamp, \"TokenVesting: final time is before current time\");\r\n\r\n        _beneficiary = beneficiary;\r\n        _revocable = revocable;\r\n        _duration = duration;\r\n        _cliff = start.add(cliffDuration);\r\n        _start = start;\r\n    }\r\n\r\n    /**\r\n     * @return the beneficiary of the tokens.\r\n     */\r\n    function beneficiary() public view returns (address) {\r\n        return _beneficiary;\r\n    }\r\n\r\n    /**\r\n     * @return the cliff time of the token vesting.\r\n     */\r\n    function cliff() public view returns (uint256) {\r\n        return _cliff;\r\n    }\r\n\r\n    /**\r\n     * @return the start time of the token vesting.\r\n     */\r\n    function start() public view returns (uint256) {\r\n        return _start;\r\n    }\r\n\r\n    /**\r\n     * @return the duration of the token vesting.\r\n     */\r\n    function duration() public view returns (uint256) {\r\n        return _duration;\r\n    }\r\n\r\n    /**\r\n     * @return true if the vesting is revocable.\r\n     */\r\n    function revocable() public view returns (bool) {\r\n        return _revocable;\r\n    }\r\n\r\n    /**\r\n     * @return the amount of the token released.\r\n     */\r\n    function released(address token) public view returns (uint256) {\r\n        return _released[token];\r\n    }\r\n\r\n    /**\r\n     * @return true if the token is revoked.\r\n     */\r\n    function revoked(address token) public view returns (bool) {\r\n        return _revoked[token];\r\n    }\r\n\r\n    /**\r\n     * @notice Transfers vested tokens to beneficiary.\r\n     * @param token ERC20 token which is being vested\r\n     */\r\n    function release(IERC20 token) public {\r\n        uint256 unreleased = _releasableAmount(token);\r\n\r\n        require(unreleased > 0, \"TokenVesting: no tokens are due\");\r\n\r\n        _released[address(token)] = _released[address(token)].add(unreleased);\r\n\r\n        token.safeTransfer(_beneficiary, unreleased);\r\n\r\n        emit TokensReleased(address(token), unreleased);\r\n    }\r\n\r\n    /**\r\n     * @notice Allows the owner to revoke the vesting. Tokens already vested\r\n     * remain in the contract, the rest are returned to the owner.\r\n     * @param token ERC20 token which is being vested\r\n     */\r\n    function revoke(IERC20 token) public onlyOwner {\r\n        require(_revocable, \"TokenVesting: cannot revoke\");\r\n        require(!_revoked[address(token)], \"TokenVesting: token already revoked\");\r\n\r\n        uint256 balance = token.balanceOf(address(this));\r\n\r\n        uint256 unreleased = _releasableAmount(token);\r\n        uint256 refund = balance.sub(unreleased);\r\n\r\n        _revoked[address(token)] = true;\r\n\r\n        token.safeTransfer(owner(), refund);\r\n\r\n        emit TokenVestingRevoked(address(token));\r\n    }\r\n\r\n    /**\r\n     * @dev Calculates the amount that has already vested but hasn't been released yet.\r\n     * @param token ERC20 token which is being vested\r\n     */\r\n    function _releasableAmount(IERC20 token) private view returns (uint256) {\r\n        return _vestedAmount(token).sub(_released[address(token)]);\r\n    }\r\n\r\n    /**\r\n     * @dev Calculates the amount that has already vested.\r\n     * @param token ERC20 token which is being vested\r\n     */\r\n    function _vestedAmount(IERC20 token) private view returns (uint256) {\r\n        uint256 currentBalance = token.balanceOf(address(this));\r\n        uint256 totalBalance = currentBalance.add(_released[address(token)]);\r\n\r\n        if (block.timestamp < _cliff) {\r\n            return 0;\r\n        } else if (block.timestamp >= _start.add(_duration) || _revoked[address(token)]) {\r\n            return totalBalance;\r\n        } else {\r\n            return totalBalance.mul(block.timestamp.sub(_start)).div(_duration);\r\n        }\r\n    }\r\n}"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../../utils/Context.sol\";\nimport \"./IERC20.sol\";\nimport \"../../math/SafeMath.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20 {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n     * a default value of 18.\n     *\n     * To select a different value for {decimals}, use {_setupDecimals}.\n     *\n     * All three of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor (string memory name_, string memory symbol_) public {\n        _name = name_;\n        _symbol = symbol_;\n        _decimals = 18;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n     * called.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return _decimals;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Sets {decimals} to a value other than the default one of 18.\n     *\n     * WARNING: This function should only be called from the constructor. Most\n     * applications that interact with token contracts will not expect\n     * {decimals} to ever change, and may work incorrectly if it does.\n     */\n    function _setupDecimals(uint8 decimals_) internal virtual {\n        _decimals = decimals_;\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"../../math/SafeMath.sol\";\nimport \"../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "contracts/tools/TimeLock.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.6.12;\r\n\r\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\r\n\r\ncontract TimeLock {\r\n    using SafeMath for uint;\r\n\r\n    event NewAdmin(address indexed newAdmin);\r\n    event NewPendingAdmin(address indexed newPendingAdmin);\r\n    event NewDelay(uint indexed newDelay);\r\n    event CancelTransaction(bytes32 indexed txHash, address indexed target, uint value, string signature, bytes data, uint eta);\r\n    event ExecuteTransaction(bytes32 indexed txHash, address indexed target, uint value, string signature, bytes data, uint eta);\r\n    event QueueTransaction(bytes32 indexed txHash, address indexed target, uint value, string signature, bytes data, uint eta);\r\n\r\n    uint public constant GRACE_PERIOD = 14 days;\r\n    uint public constant MINIMUM_DELAY = 24 hours;\r\n    uint public constant MAXIMUM_DELAY = 30 days;\r\n\r\n    address public admin;\r\n    address public pendingAdmin;\r\n    uint public delay;\r\n    bool public admin_initialized;\r\n\r\n    mapping(bytes32 => bool) public queuedTransactions;\r\n\r\n\r\n    constructor(address admin_, uint delay_) public {\r\n        require(delay_ >= MINIMUM_DELAY, \"Timelock::constructor: Delay must exceed minimum delay.\");\r\n        require(delay_ <= MAXIMUM_DELAY, \"Timelock::constructor: Delay must not exceed maximum delay.\");\r\n\r\n        admin = admin_;\r\n        delay = delay_;\r\n        admin_initialized = false;\r\n    }\r\n\r\n    // XXX: function() external payable { }\r\n    receive() external payable {}\r\n\r\n    function setDelay(uint delay_) external {\r\n        require(msg.sender == address(this), \"Timelock::setDelay: Call must come from Timelock.\");\r\n        require(delay_ >= MINIMUM_DELAY, \"Timelock::setDelay: Delay must exceed minimum delay.\");\r\n        require(delay_ <= MAXIMUM_DELAY, \"Timelock::setDelay: Delay must not exceed maximum delay.\");\r\n        delay = delay_;\r\n\r\n        emit NewDelay(delay);\r\n    }\r\n\r\n    function acceptAdmin() external {\r\n        require(msg.sender == pendingAdmin, \"Timelock::acceptAdmin: Call must come from pendingAdmin.\");\r\n        admin = msg.sender;\r\n        pendingAdmin = address(0);\r\n\r\n        emit NewAdmin(admin);\r\n    }\r\n\r\n    function setPendingAdmin(address pendingAdmin_) external {\r\n        // allows one time setting of admin for deployment purposes\r\n        if (admin_initialized) {\r\n            require(msg.sender == address(this), \"Timelock::setPendingAdmin: Call must come from Timelock.\");\r\n        } else {\r\n            require(msg.sender == admin, \"Timelock::setPendingAdmin: First call must come from admin.\");\r\n            admin_initialized = true;\r\n        }\r\n        pendingAdmin = pendingAdmin_;\r\n\r\n        emit NewPendingAdmin(pendingAdmin);\r\n    }\r\n\r\n    function queueTransaction(address target, uint value, string memory signature, bytes memory data, uint eta) external returns (bytes32) {\r\n        require(msg.sender == admin, \"Timelock::queueTransaction: Call must come from admin.\");\r\n        require(eta >= getBlockTimestamp().add(delay), \"Timelock::queueTransaction: Estimated execution block must satisfy delay.\");\r\n\r\n        bytes32 txHash = keccak256(abi.encode(target, value, signature, data, eta));\r\n        queuedTransactions[txHash] = true;\r\n\r\n        emit QueueTransaction(txHash, target, value, signature, data, eta);\r\n        return txHash;\r\n    }\r\n\r\n    function cancelTransaction(address target, uint value, string memory signature, bytes memory data, uint eta) external {\r\n        require(msg.sender == admin, \"Timelock::cancelTransaction: Call must come from admin.\");\r\n\r\n        bytes32 txHash = keccak256(abi.encode(target, value, signature, data, eta));\r\n        queuedTransactions[txHash] = false;\r\n\r\n        emit CancelTransaction(txHash, target, value, signature, data, eta);\r\n    }\r\n\r\n    function executeTransaction(address target, uint value, string memory signature, bytes memory data, uint eta) external payable returns (bytes memory) {\r\n        require(msg.sender == admin, \"Timelock::executeTransaction: Call must come from admin.\");\r\n\r\n        bytes32 txHash = keccak256(abi.encode(target, value, signature, data, eta));\r\n        require(queuedTransactions[txHash], \"Timelock::executeTransaction: Transaction hasn't been queued.\");\r\n        require(getBlockTimestamp() >= eta, \"Timelock::executeTransaction: Transaction hasn't surpassed time lock.\");\r\n        require(getBlockTimestamp() <= eta.add(GRACE_PERIOD), \"Timelock::executeTransaction: Transaction is stale.\");\r\n\r\n        queuedTransactions[txHash] = false;\r\n\r\n        bytes memory callData;\r\n\r\n        if (bytes(signature).length == 0) {\r\n            callData = data;\r\n        } else {\r\n            callData = abi.encodePacked(bytes4(keccak256(bytes(signature))), data);\r\n        }\r\n\r\n        // solium-disable-next-line security/no-call-value\r\n        (bool success, bytes memory returnData) = target.call{value : value}(callData);\r\n        require(success, \"Timelock::executeTransaction: Transaction execution reverted.\");\r\n\r\n        emit ExecuteTransaction(txHash, target, value, signature, data, eta);\r\n\r\n        return returnData;\r\n    }\r\n\r\n    function getBlockTimestamp() internal view returns (uint) {\r\n        // solium-disable-next-line security/no-block-members\r\n        return block.timestamp;\r\n    }\r\n}"
    },
    "contracts/tools/TeamTokenVesting.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.12;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\r\n\r\n/**\r\n * @title TeamTokenVesting\r\n * @dev A token holder contract that can release its token balance gradually like a\r\n * typical vesting scheme, with a cliff and vesting period. Optionally revocable by the\r\n * owner.\r\n */\r\ncontract TeamTokenVesting is Ownable {\r\n    // The vesting schedule is time-based (i.e. using block timestamps as opposed to e.g. block numbers), and is\r\n    // therefore sensitive to timestamp manipulation (which is something miners can do, to a certain degree). Therefore,\r\n    // it is recommended to avoid using short time durations (less than a minute). Typical vesting schemes, with a\r\n    // cliff period of a year and a duration of four years, are safe to use.\r\n    // solhint-disable not-rely-on-time\r\n\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    event TokensReleased(address token, uint256 amount);\r\n    event TokenVestingRevoked(address token);\r\n\r\n    // beneficiary of tokens after they are released\r\n    address private _beneficiary;\r\n\r\n    // Durations and timestamps are expressed in UNIX time, the same units as block.timestamp.\r\n    uint256 private _cliff;\r\n    uint256 private _start;\r\n    uint256 private _duration;\r\n\r\n    mapping (address => uint256) private _released;\r\n\r\n    /**\r\n     * @dev Creates a vesting contract that vests its balance of any ERC20 token to the\r\n     * beneficiary, gradually in a linear fashion until start + duration. By then all\r\n     * of the balance will have vested.\r\n     * @param beneficiary address of the beneficiary to whom vested tokens are transferred\r\n     * @param cliffDuration duration in seconds of the cliff in which tokens will begin to vest\r\n     * @param start the time (as Unix time) at which point vesting starts\r\n     * @param duration duration in seconds of the period in which the tokens will vest\r\n     */\r\n    constructor (address beneficiary, uint256 start, uint256 cliffDuration, uint256 duration) public {\r\n        require(beneficiary != address(0), \"TokenVesting: beneficiary is the zero address\");\r\n        // solhint-disable-next-line max-line-length\r\n        require(cliffDuration <= duration, \"TokenVesting: cliff is longer than duration\");\r\n        require(duration > 0, \"TokenVesting: duration is 0\");\r\n        // solhint-disable-next-line max-line-length\r\n        require(start.add(duration) > block.timestamp, \"TokenVesting: final time is before current time\");\r\n\r\n        _beneficiary = beneficiary;\r\n        _duration = duration;\r\n        _cliff = start.add(cliffDuration);\r\n        _start = start;\r\n    }\r\n\r\n    /**\r\n     * @return the beneficiary of the tokens.\r\n     */\r\n    function beneficiary() public view returns (address) {\r\n        return _beneficiary;\r\n    }\r\n\r\n    /**\r\n     * @return the cliff time of the token vesting.\r\n     */\r\n    function cliff() public view returns (uint256) {\r\n        return _cliff;\r\n    }\r\n\r\n    /**\r\n     * @return the start time of the token vesting.\r\n     */\r\n    function start() public view returns (uint256) {\r\n        return _start;\r\n    }\r\n\r\n    /**\r\n     * @return the duration of the token vesting.\r\n     */\r\n    function duration() public view returns (uint256) {\r\n        return _duration;\r\n    }\r\n\r\n    /**\r\n     * @return the amount of the token released.\r\n     */\r\n    function released(address token) public view returns (uint256) {\r\n        return _released[token];\r\n    }\r\n\r\n    /**\r\n     * @notice Transfers vested tokens to beneficiary.\r\n     * @param token ERC20 token which is being vested\r\n     */\r\n    function release(IERC20 token) public {\r\n        uint256 unreleased = _releasableAmount(token);\r\n\r\n        require(unreleased > 0, \"TokenVesting: no tokens are due\");\r\n\r\n        _released[address(token)] = _released[address(token)].add(unreleased);\r\n\r\n        token.safeTransfer(_beneficiary, unreleased);\r\n\r\n        emit TokensReleased(address(token), unreleased);\r\n    }\r\n\r\n    /**\r\n     * @dev Calculates the amount that has already vested but hasn't been released yet.\r\n     * @param token ERC20 token which is being vested\r\n     */\r\n    function _releasableAmount(IERC20 token) private view returns (uint256) {\r\n        return _vestedAmount(token).sub(_released[address(token)]);\r\n    }\r\n\r\n    /**\r\n     * @dev Calculates the amount that has already vested.\r\n     * @param token ERC20 token which is being vested\r\n     */\r\n    function _vestedAmount(IERC20 token) private view returns (uint256) {\r\n        uint256 currentBalance = token.balanceOf(address(this));\r\n        uint256 totalBalance = currentBalance.add(_released[address(token)]);\r\n\r\n        if (block.timestamp < _cliff) {\r\n            return 0;\r\n        } else if (block.timestamp >= _start.add(_duration)) {\r\n            return totalBalance;\r\n        } else {\r\n            return totalBalance.mul(block.timestamp.sub(_start)).div(_duration);\r\n        }\r\n    }\r\n}"
    },
    "contracts/tools/LPTokenTimelock.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.6.12;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\r\n\r\n/**\r\n * @dev A token holder contract that will allow a beneficiary to extract the\r\n * tokens after a given release time.\r\n *\r\n * Useful for simple vesting schedules like \"advisors get all of their tokens\r\n * after 1 year\".\r\n */\r\ncontract LPTokenTimelock {\r\n    using SafeERC20 for IERC20;\r\n\r\n    // ERC20 basic token contract being held\r\n    IERC20 immutable private _token;\r\n\r\n    // beneficiary of tokens after they are released\r\n    address immutable private _beneficiary;\r\n\r\n    // timestamp when token release is enabled\r\n    uint256 immutable private _releaseTime;\r\n\r\n    constructor (IERC20 token_, address beneficiary_, uint256 releaseTime_) public {\r\n        require(releaseTime_ > block.timestamp, \"TokenTimelock: release time is before current time\");\r\n        _token = token_;\r\n        _beneficiary = beneficiary_;\r\n        _releaseTime = releaseTime_;\r\n    }\r\n\r\n    // The token being held.\r\n    function token() public view virtual returns (IERC20) {\r\n        return _token;\r\n    }\r\n\r\n    // The beneficiary of the tokens.\r\n    function beneficiary() public view virtual returns (address) {\r\n        return _beneficiary;\r\n    }\r\n\r\n    // The time when the tokens are released.\r\n    function releaseTime() public view virtual returns (uint256) {\r\n        return _releaseTime;\r\n    }\r\n\r\n    // Transfers tokens held by timelock to beneficiary.\r\n    function release() public virtual {\r\n        require(block.timestamp >= releaseTime(), \"TokenTimelock: current time is before release time\");\r\n\r\n        uint256 amount = token().balanceOf(address(this));\r\n        require(amount > 0, \"TokenTimelock: no tokens to release\");\r\n\r\n        token().safeTransfer(beneficiary(), amount);\r\n    }\r\n}"
    },
    "contracts/tools/ERC20Mock.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.6.12;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\n\r\ncontract ERC20Mock is ERC20 {\r\n    constructor(\r\n        string memory name,\r\n        string memory symbol,\r\n        uint256 supply\r\n    ) public ERC20(name, symbol) {\r\n        // _setupDecimals(6);\r\n        _mint(msg.sender, supply);\r\n    }\r\n\r\n    function mint(address to, uint256 amount) public {\r\n        _mint(to, amount);\r\n    }\r\n}"
    },
    "contracts/tools/Dashboard.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.6.12;\r\npragma experimental ABIEncoderV2;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\nimport \"../libraries/SafeDecimal.sol\";\r\nimport \"../interfaces/IMasterChef.sol\";\r\nimport \"../interfaces/IEvmoSwapPair.sol\";\r\nimport \"../interfaces/IEvmoSwapFactory.sol\";\r\n\r\ncontract Dashboard {\r\n    using SafeMath for uint;\r\n    using SafeDecimal for uint;\r\n\r\n    uint256 private constant SEC_PER_YEAR = 86400 * 365;\r\n\r\n    address private _owner;\r\n\r\n    // WETH WFTM WBNB\r\n    IERC20 public weth;\r\n    IERC20 public usdc;\r\n    IMasterChef public master;\r\n    IEvmoSwapFactory public factory;\r\n    IERC20 public reward; \r\n\r\n    mapping(address => address) public pairAddresses;\r\n\r\n    constructor(address _weth, address _usdc, address _reward, address _master, address _factory) public {\r\n        weth = IERC20(_weth);\r\n        usdc = IERC20(_usdc);\r\n        reward = IERC20(_reward);\r\n        master = IMasterChef(_master);\r\n        factory = IEvmoSwapFactory(_factory);\r\n        _owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /* ========== Restricted Operation ========== */\r\n\r\n    function setPairAddress(address asset, address pair) external onlyOwner {\r\n        pairAddresses[asset] = pair;\r\n    }\r\n\r\n    /* ========== Value Calculation ========== */\r\n\r\n    function ethPriceInUSD() view public returns (uint) {\r\n        address usdcEthPair = factory.getPair(address(usdc), address(weth));\r\n        uint _decimals = ERC20(address(usdc)).decimals();\r\n        uint _usdcValue = usdc.balanceOf(usdcEthPair).mul(10 ** (18 - uint256(_decimals)));\r\n        return _usdcValue.mul(1e18).div(weth.balanceOf(usdcEthPair));\r\n    }\r\n\r\n    function rewardPriceInUSD() view public returns (uint) {\r\n        (, uint _rewardPriceInUSD) = valueOfAsset(address(reward), 1e18);\r\n        return _rewardPriceInUSD;\r\n    }\r\n\r\n    function rewardPerYearOfPool(uint pid) view public returns (uint) {\r\n        uint256 multiplier = master.startTime() <= block.timestamp ? 1 : 0;\r\n        (,,,uint allocPoint,,,) = master.poolInfo(pid);\r\n        return master.emoPerSecond().mul(multiplier).mul(SEC_PER_YEAR).mul(allocPoint).div(master.totalAllocPoint());\r\n    }\r\n\r\n    function valueOfAsset(address asset, uint amount) public view returns (uint valueInETH, uint valueInUSD) {\r\n        if (asset == address(0) || asset == address(weth)) {\r\n            valueInETH = amount;\r\n            valueInUSD = amount.mul(ethPriceInUSD()).div(1e18);\r\n        } else if (keccak256(abi.encodePacked(IEvmoSwapPair(asset).symbol())) == keccak256(\"EMO-LP\")) {\r\n            if (IEvmoSwapPair(asset).token0() == address(weth) || IEvmoSwapPair(asset).token1() == address(weth)) {\r\n                valueInETH = amount.mul(weth.balanceOf(address(asset))).mul(2).div(IEvmoSwapPair(asset).totalSupply());\r\n                valueInUSD = valueInETH.mul(ethPriceInUSD()).div(1e18);\r\n            } else {\r\n                uint balanceToken0 = IERC20(IEvmoSwapPair(asset).token0()).balanceOf(asset);\r\n                (uint token0PriceInETH,) = valueOfAsset(IEvmoSwapPair(asset).token0(), 1e18);\r\n\r\n                valueInETH = amount.mul(balanceToken0).mul(2).mul(token0PriceInETH).div(1e18).div(IEvmoSwapPair(asset).totalSupply());\r\n                valueInUSD = valueInETH.mul(ethPriceInUSD()).div(1e18);\r\n            }\r\n        } else {\r\n            address pairAddress = pairAddresses[asset];\r\n            if (pairAddress == address(0)) {\r\n                pairAddress = address(weth);\r\n            }\r\n\r\n            address pair = factory.getPair(asset, pairAddress);\r\n            if (pair == address(0) || IERC20(asset).balanceOf(pair) == 0) {\r\n                valueInETH = 0;\r\n            } else {\r\n                valueInETH = IERC20(pairAddress).balanceOf(pair).mul(amount).div(IERC20(asset).balanceOf(pair));\r\n                if (pairAddress != address(weth)) {\r\n                    (uint pairValueInETH,) = valueOfAsset(pairAddress, 1e18);\r\n                    valueInETH = valueInETH.mul(pairValueInETH).div(1e18);\r\n                }\r\n            }\r\n            valueInUSD = valueInETH.mul(ethPriceInUSD()).div(1e18);\r\n        }\r\n    }\r\n\r\n    /* ========== APY Calculation ========== */\r\n\r\n    function apyOfPool(uint256 pid) public view returns (uint apyPool) {\r\n        (address token,uint256 workingSupply,,,,,) = master.poolInfo(pid);\r\n        (uint valueInETH,) = valueOfAsset(token, workingSupply);\r\n\r\n        (uint rewardPriceInETH,) = valueOfAsset(address(reward), 1e18);\r\n        uint _rewardPerYearOfPool = rewardPerYearOfPool(pid);\r\n        if (_rewardPerYearOfPool == 0) {\r\n            return 0;\r\n        } else if (valueInETH == 0) {\r\n            return 10000 * (10 ** 18);\r\n        } else {\r\n            // 40%\r\n            return (master.TOKENLESS_PRODUCTION()).mul(rewardPriceInETH).mul(_rewardPerYearOfPool).div(valueInETH).div(100);\r\n        }\r\n    }\r\n\r\n    function apyOfPools(uint256[] memory pids) public view returns (uint[] memory apyPool) {\r\n        apyPool = new uint[](pids.length);\r\n        for (uint256 i = 0; i < pids.length; i++) {\r\n            apyPool[i] = apyOfPool(pids[i]);\r\n        }\r\n    }\r\n\r\n    function boostApyOfPool(uint256 pid, address user) public view returns (uint apyPool) {\r\n        (address token,uint256 workingSupply,,,,,) = master.poolInfo(pid);\r\n        (uint256 amount, uint256 workingAmount,) = master.userInfo(pid, user);\r\n        if (workingAmount == 0) {\r\n            return apyOfPool(pid);\r\n        }\r\n\r\n        (uint valueInETH,) = valueOfAsset(token, amount);\r\n        (uint rewardPriceInETH,) = valueOfAsset(address(reward), 1e18);\r\n        uint _rewardPerYearOfPool = rewardPerYearOfPool(pid).mul(workingAmount).div(workingSupply);\r\n        if (_rewardPerYearOfPool == 0) {\r\n            return 0;\r\n        } else if (valueInETH == 0) {\r\n            return 10000 * (10 ** 18);\r\n        } else {\r\n            return rewardPriceInETH.mul(_rewardPerYearOfPool).div(valueInETH);\r\n        }\r\n    }\r\n\r\n    function boostApyOfPools(uint256[] memory pids) public view returns (uint[] memory apyPool) {\r\n        apyPool = new uint[](pids.length);\r\n        for (uint256 i = 0; i < pids.length; i++) {\r\n            apyPool[i] = apyOfPool(pids[i]);\r\n        }\r\n    }\r\n\r\n    /* ========== TVL Calculation ========== */\r\n    function tvlOfPool(uint256 pid) public view returns (uint256 allocPoint, uint tvl, uint tvlInUSD) {\r\n        (address token,,,uint256 _allocPoint,,,) = master.poolInfo(pid);\r\n        allocPoint = _allocPoint;\r\n        tvl = IERC20(token).balanceOf(address(master));\r\n        (, tvlInUSD) = valueOfAsset(token, tvl);\r\n    }\r\n\r\n    function tvlOfPools(uint256[] memory pids) public view returns (uint totalTvl, uint totalTvlInUSD, uint256[] memory allocPoint, uint[] memory tvl, uint[] memory tvlInUSD) {\r\n        totalTvl = 0;\r\n        totalTvlInUSD = 0;\r\n        allocPoint = new uint256[](pids.length);\r\n        tvl = new uint[](pids.length);\r\n        tvlInUSD = new uint[](pids.length);\r\n        for (uint256 i = 0; i < pids.length; i++) {\r\n            (allocPoint[i], tvl[i], tvlInUSD[i]) = tvlOfPool(pids[i]);\r\n            totalTvl = totalTvl.add(tvl[i]);\r\n            totalTvlInUSD = totalTvlInUSD.add(tvlInUSD[i]);\r\n        }\r\n    }\r\n\r\n    function infoOfPools(uint256[] memory pids) public view returns (uint tokenPrice, uint totalTvl, uint totalTvlInUSD, uint256[] memory allocPoint, uint[] memory apy, uint[] memory tvl, uint[] memory tvlInUSD) {\r\n        totalTvl = 0;\r\n        totalTvlInUSD = 0;\r\n        allocPoint = new uint256[](pids.length);\r\n        apy = new uint[](pids.length);\r\n        tvl = new uint[](pids.length);\r\n        tvlInUSD = new uint[](pids.length);\r\n        tokenPrice = rewardPriceInUSD();\r\n        for (uint256 i = 0; i < pids.length; i++) {\r\n            apy[i] = apyOfPool(pids[i]);\r\n            (allocPoint[i], tvl[i], tvlInUSD[i]) = tvlOfPool(pids[i]);\r\n            totalTvl = totalTvl.add(tvl[i]);\r\n            totalTvlInUSD = totalTvlInUSD.add(tvlInUSD[i]);\r\n        }\r\n    }\r\n\r\n    function boostInfoOfPools(uint256[] memory pids, address user) public view returns (uint tokenPrice, uint totalTvl, uint totalTvlInUSD, uint256[] memory allocPoint, uint[] memory apy, uint[] memory boostApy, uint[] memory tvl, uint[] memory tvlInUSD) {\r\n        totalTvl = 0;\r\n        totalTvlInUSD = 0;\r\n        allocPoint = new uint256[](pids.length);\r\n        apy = new uint[](pids.length);\r\n        boostApy = new uint[](pids.length);\r\n        tvl = new uint[](pids.length);\r\n        tvlInUSD = new uint[](pids.length);\r\n        tokenPrice = rewardPriceInUSD();\r\n        for (uint256 i = 0; i < pids.length; i++) {\r\n            apy[i] = apyOfPool(pids[i]);\r\n            boostApy[i] = boostApyOfPool(pids[i], user);\r\n            (allocPoint[i], tvl[i], tvlInUSD[i]) = tvlOfPool(pids[i]);\r\n            totalTvl = totalTvl.add(tvl[i]);\r\n            totalTvlInUSD = totalTvlInUSD.add(tvlInUSD[i]);\r\n        }\r\n    }\r\n}"
    },
    "contracts/libraries/SafeDecimal.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.6.2;\r\n\r\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\r\n\r\nlibrary SafeDecimal {\r\n    using SafeMath for uint;\r\n\r\n    uint8 public constant decimals = 18;\r\n    uint public constant UNIT = 10 ** uint(decimals);\r\n\r\n    function unit() external pure returns (uint) {\r\n        return UNIT;\r\n    }\r\n\r\n    function multiply(uint x, uint y) internal pure returns (uint) {\r\n        return x.mul(y).div(UNIT);\r\n    }\r\n\r\n    // https://mpark.github.io/programming/2014/08/18/exponentiation-by-squaring/\r\n    function power(uint x, uint n) internal pure returns (uint) {\r\n        uint result = UNIT;\r\n        while (n > 0) {\r\n            if (n % 2 != 0) {\r\n                result = multiply(result, x);\r\n            }\r\n            x = multiply(x, x);\r\n            n /= 2;\r\n        }\r\n        return result;\r\n    }\r\n}\r\n"
    },
    "contracts/interfaces/IMasterChef.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.6.12;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"./IOnwardIncentivesController.sol\";\r\n\r\ninterface IMasterChef {\r\n    function owner() external view returns (address);\r\n\r\n    function emo() external view returns (address);\r\n\r\n    function startTime() external view returns (uint256);\r\n\r\n    function emoPerSecond() external view returns (uint256);\r\n\r\n    function poolLength() external view returns (uint256);\r\n\r\n    function totalAllocPoint() external view returns (uint256);\r\n\r\n    function TOKENLESS_PRODUCTION() external view returns (uint256);\r\n\r\n    function poolInfo(uint _pid) external view returns (\r\n        address lpToken,\r\n        uint256 workingSupply,\r\n        bool boost,\r\n        uint256 allocPoint,\r\n        uint256 lastRewardTime,\r\n        uint256 accEmoPerShare,\r\n        address incentivesController);\r\n\r\n    function userInfo(uint _pid, address _user) external view returns (\r\n        uint256 amount,\r\n        uint256 workingAmount,\r\n        uint256 rewardDebt);\r\n\r\n    // emo + bonus reward\r\n    function pendingTokens(uint256 _pid, address _user) external view returns (address[] memory tokens, uint[] memory amounts);\r\n\r\n    // Transfers ownership of the contract to a new account (`newOwner`)\r\n    function transferOwnership(address newOwner) external;\r\n\r\n    // Add a new lp to the pool. Can only be called by the owner.\r\n    function add(uint256 _allocPoint, uint256 _depositFeePercent, IERC20 _lpToken, IOnwardIncentivesController _incentivesController, bool _boost, bool _withUpdate) external;\r\n\r\n    // Update the given pool's EMO allocation point. Can only be called by the owner.\r\n    function set(uint256 _pid, uint256 _allocPoint, uint256 _depositFeePercent, IOnwardIncentivesController _incentivesController, bool _withUpdate) external;\r\n\r\n    // Update reward variables of the given pool to be up-to-date.\r\n    function updatePool(uint256 _pid) external;\r\n\r\n    // Stake EMO tokens to MasterChef\r\n    function enterStaking(uint256 _amount) external;\r\n\r\n    // Withdraw EMO tokens from STAKING.\r\n    function leaveStaking(uint256 _amount) external;\r\n\r\n    // Deposit LP tokens to MasterChef for EMO allocation.\r\n    function depositFor(address _user, uint256 _pid, uint256 _amount) external;\r\n\r\n    // Deposit LP tokens to MasterChef for EMO allocation.\r\n    function deposit(uint _pid, uint _amount) external;\r\n\r\n    // Withdraw LP tokens from MasterChef.\r\n    function withdraw(uint _pid, uint _amount) external;\r\n\r\n    function harvestAllRewards(address _user) external;\r\n\r\n    function emergencyWithdraw(uint256 _pid) external;\r\n\r\n    function setEmoPerSecond(uint256 _emoPerSecond) external;\r\n}"
    },
    "contracts/interfaces/IEvmoSwapPair.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.5.0;\r\n\r\ninterface IEvmoSwapPair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n    function pairFee() external view returns (uint32);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n    function setPairFee(uint32) external;\r\n}\r\n"
    },
    "contracts/interfaces/IEvmoSwapFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.5.0;\r\n\r\ninterface IEvmoSwapFactory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n    function setPairFee(address pair, uint32 pairFee) external;\r\n}"
    },
    "contracts/interfaces/IOnwardIncentivesController.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.6.12;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n\r\ninterface IOnwardIncentivesController {\r\n    function onReward(address user, uint256 newLpAmount) external;\r\n\r\n    function pendingTokens(address user) external view returns (uint256 pending);\r\n\r\n    function rewardToken() external view returns (IERC20);\r\n\r\n    function getNextIncentivesController() external view returns (address);\r\n}\r\n"
    },
    "contracts/swap/EvmoSwapRouter.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.6.12;\r\n\r\nimport '../interfaces/IWETH.sol';\r\nimport '../interfaces/IERC20.sol';\r\nimport '../libraries/SafeMath.sol';\r\nimport '../libraries/TransferHelper.sol';\r\nimport '../interfaces/IEvmoSwapFactory.sol';\r\nimport '../interfaces/IEvmoSwapRouter02.sol';\r\nimport '../libraries/EvmoSwapLibrary.sol';\r\n\r\ncontract EvmoSwapRouter is IEvmoSwapRouter02 {\r\n    using SafeMath for uint;\r\n\r\n    address public immutable override factory;\r\n    address public immutable override WETH;\r\n\r\n    modifier ensure(uint deadline) {\r\n        require(deadline >= block.timestamp, 'EvmoSwapRouter: EXPIRED');\r\n        _;\r\n    }\r\n\r\n    constructor(address _factory, address _WETH) public {\r\n        factory = _factory;\r\n        WETH = _WETH;\r\n    }\r\n\r\n    receive() external payable {\r\n        assert(msg.sender == WETH); // only accept ETH via fallback from the WETH contract\r\n    }\r\n\r\n    // **** ADD LIQUIDITY ****\r\n    function _addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin\r\n    ) internal virtual returns (uint amountA, uint amountB) {\r\n        // create the pair if it doesn't exist yet\r\n        if (IEvmoSwapFactory(factory).getPair(tokenA, tokenB) == address(0)) {\r\n            IEvmoSwapFactory(factory).createPair(tokenA, tokenB);\r\n        }\r\n        (uint reserveA, uint reserveB) = EvmoSwapLibrary.getReserves(factory, tokenA, tokenB);\r\n        if (reserveA == 0 && reserveB == 0) {\r\n            (amountA, amountB) = (amountADesired, amountBDesired);\r\n        } else {\r\n            uint amountBOptimal = EvmoSwapLibrary.quote(amountADesired, reserveA, reserveB);\r\n            if (amountBOptimal <= amountBDesired) {\r\n                require(amountBOptimal >= amountBMin, 'EvmoSwapRouter: INSUFFICIENT_B_AMOUNT');\r\n                (amountA, amountB) = (amountADesired, amountBOptimal);\r\n            } else {\r\n                uint amountAOptimal = EvmoSwapLibrary.quote(amountBDesired, reserveB, reserveA);\r\n                assert(amountAOptimal <= amountADesired);\r\n                require(amountAOptimal >= amountAMin, 'EvmoSwapRouter: INSUFFICIENT_A_AMOUNT');\r\n                (amountA, amountB) = (amountAOptimal, amountBDesired);\r\n            }\r\n        }\r\n    }\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external virtual override ensure(deadline) returns (uint amountA, uint amountB, uint liquidity) {\r\n        (amountA, amountB) = _addLiquidity(tokenA, tokenB, amountADesired, amountBDesired, amountAMin, amountBMin);\r\n        address pair = EvmoSwapLibrary.pairFor(factory, tokenA, tokenB);\r\n        TransferHelper.safeTransferFrom(tokenA, msg.sender, pair, amountA);\r\n        TransferHelper.safeTransferFrom(tokenB, msg.sender, pair, amountB);\r\n        liquidity = IEvmoSwapPair(pair).mint(to);\r\n    }\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external virtual override payable ensure(deadline) returns (uint amountToken, uint amountETH, uint liquidity) {\r\n        (amountToken, amountETH) = _addLiquidity(\r\n            token,\r\n            WETH,\r\n            amountTokenDesired,\r\n            msg.value,\r\n            amountTokenMin,\r\n            amountETHMin\r\n        );\r\n        address pair = EvmoSwapLibrary.pairFor(factory, token, WETH);\r\n        TransferHelper.safeTransferFrom(token, msg.sender, pair, amountToken);\r\n        IWETH(WETH).deposit{value: amountETH}();\r\n        assert(IWETH(WETH).transfer(pair, amountETH));\r\n        liquidity = IEvmoSwapPair(pair).mint(to);\r\n        // refund dust eth, if any\r\n        if (msg.value > amountETH) TransferHelper.safeTransferETH(msg.sender, msg.value - amountETH);\r\n    }\r\n\r\n    // **** REMOVE LIQUIDITY ****\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) public virtual override ensure(deadline) returns (uint amountA, uint amountB) {\r\n        address pair = EvmoSwapLibrary.pairFor(factory, tokenA, tokenB);\r\n        IEvmoSwapPair(pair).transferFrom(msg.sender, pair, liquidity); // send liquidity to pair\r\n        (uint amount0, uint amount1) = IEvmoSwapPair(pair).burn(to);\r\n        (address token0,) = EvmoSwapLibrary.sortTokens(tokenA, tokenB);\r\n        (amountA, amountB) = tokenA == token0 ? (amount0, amount1) : (amount1, amount0);\r\n        require(amountA >= amountAMin, 'EvmoSwapRouter: INSUFFICIENT_A_AMOUNT');\r\n        require(amountB >= amountBMin, 'EvmoSwapRouter: INSUFFICIENT_B_AMOUNT');\r\n    }\r\n\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) public virtual override ensure(deadline) returns (uint amountToken, uint amountETH) {\r\n        (amountToken, amountETH) = removeLiquidity(\r\n            token,\r\n            WETH,\r\n            liquidity,\r\n            amountTokenMin,\r\n            amountETHMin,\r\n            address(this),\r\n            deadline\r\n        );\r\n        TransferHelper.safeTransfer(token, to, amountToken);\r\n        IWETH(WETH).withdraw(amountETH);\r\n        TransferHelper.safeTransferETH(to, amountETH);\r\n    }\r\n\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external virtual override returns (uint amountA, uint amountB) {\r\n        address pair = EvmoSwapLibrary.pairFor(factory, tokenA, tokenB);\r\n        uint value = approveMax ? uint(-1) : liquidity;\r\n        IEvmoSwapPair(pair).permit(msg.sender, address(this), value, deadline, v, r, s);\r\n        (amountA, amountB) = removeLiquidity(tokenA, tokenB, liquidity, amountAMin, amountBMin, to, deadline);\r\n    }\r\n\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external virtual override returns (uint amountToken, uint amountETH) {\r\n        address pair = EvmoSwapLibrary.pairFor(factory, token, WETH);\r\n        uint value = approveMax ? uint(-1) : liquidity;\r\n        IEvmoSwapPair(pair).permit(msg.sender, address(this), value, deadline, v, r, s);\r\n        (amountToken, amountETH) = removeLiquidityETH(token, liquidity, amountTokenMin, amountETHMin, to, deadline);\r\n    }\r\n\r\n    // **** REMOVE LIQUIDITY (supporting fee-on-transfer tokens) ****\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) public virtual override ensure(deadline) returns (uint amountETH) {\r\n        (, amountETH) = removeLiquidity(\r\n            token,\r\n            WETH,\r\n            liquidity,\r\n            amountTokenMin,\r\n            amountETHMin,\r\n            address(this),\r\n            deadline\r\n        );\r\n        TransferHelper.safeTransfer(token, to, IERC20(token).balanceOf(address(this)));\r\n        IWETH(WETH).withdraw(amountETH);\r\n        TransferHelper.safeTransferETH(to, amountETH);\r\n    }\r\n\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external virtual override returns (uint amountETH) {\r\n        address pair = EvmoSwapLibrary.pairFor(factory, token, WETH);\r\n        uint value = approveMax ? uint(-1) : liquidity;\r\n        IEvmoSwapPair(pair).permit(msg.sender, address(this), value, deadline, v, r, s);\r\n        amountETH = removeLiquidityETHSupportingFeeOnTransferTokens(\r\n            token, liquidity, amountTokenMin, amountETHMin, to, deadline\r\n        );\r\n    }\r\n\r\n    // **** SWAP ****\r\n    // requires the initial amount to have already been sent to the first pair\r\n    function _swap(uint[] memory amounts, address[] memory path, address _to) internal virtual {\r\n        for (uint i; i < path.length - 1; i++) {\r\n            (address input, address output) = (path[i], path[i + 1]);\r\n            (address token0,) = EvmoSwapLibrary.sortTokens(input, output);\r\n            uint amountOut = amounts[i + 1];\r\n            (uint amount0Out, uint amount1Out) = input == token0 ? (uint(0), amountOut) : (amountOut, uint(0));\r\n            address to = i < path.length - 2 ? EvmoSwapLibrary.pairFor(factory, output, path[i + 2]) : _to;\r\n            IEvmoSwapPair(EvmoSwapLibrary.pairFor(factory, input, output)).swap(\r\n                amount0Out, amount1Out, to, new bytes(0)\r\n            );\r\n        }\r\n    }\r\n\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external virtual override ensure(deadline) returns (uint[] memory amounts) {\r\n        amounts = EvmoSwapLibrary.getAmountsOut(factory, amountIn, path);\r\n        require(amounts[amounts.length - 1] >= amountOutMin, 'EvmoSwapRouter: INSUFFICIENT_OUTPUT_AMOUNT');\r\n        TransferHelper.safeTransferFrom(\r\n            path[0], msg.sender, EvmoSwapLibrary.pairFor(factory, path[0], path[1]), amounts[0]\r\n        );\r\n        _swap(amounts, path, to);\r\n    }\r\n\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external virtual override ensure(deadline) returns (uint[] memory amounts) {\r\n        amounts = EvmoSwapLibrary.getAmountsIn(factory, amountOut, path);\r\n        require(amounts[0] <= amountInMax, 'EvmoSwapRouter: EXCESSIVE_INPUT_AMOUNT');\r\n        TransferHelper.safeTransferFrom(\r\n            path[0], msg.sender, EvmoSwapLibrary.pairFor(factory, path[0], path[1]), amounts[0]\r\n        );\r\n        _swap(amounts, path, to);\r\n    }\r\n\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        virtual\r\n        override\r\n        payable\r\n        ensure(deadline)\r\n        returns (uint[] memory amounts)\r\n    {\r\n        require(path[0] == WETH, 'EvmoSwapRouter: INVALID_PATH');\r\n        amounts = EvmoSwapLibrary.getAmountsOut(factory, msg.value, path);\r\n        require(amounts[amounts.length - 1] >= amountOutMin, 'EvmoSwapRouter: INSUFFICIENT_OUTPUT_AMOUNT');\r\n        IWETH(WETH).deposit{value: amounts[0]}();\r\n        assert(IWETH(WETH).transfer(EvmoSwapLibrary.pairFor(factory, path[0], path[1]), amounts[0]));\r\n        _swap(amounts, path, to);\r\n    }\r\n\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        virtual\r\n        override\r\n        ensure(deadline)\r\n        returns (uint[] memory amounts)\r\n    {\r\n        require(path[path.length - 1] == WETH, 'EvmoSwapRouter: INVALID_PATH');\r\n        amounts = EvmoSwapLibrary.getAmountsIn(factory, amountOut, path);\r\n        require(amounts[0] <= amountInMax, 'EvmoSwapRouter: EXCESSIVE_INPUT_AMOUNT');\r\n        TransferHelper.safeTransferFrom(\r\n            path[0], msg.sender, EvmoSwapLibrary.pairFor(factory, path[0], path[1]), amounts[0]\r\n        );\r\n        _swap(amounts, path, address(this));\r\n        IWETH(WETH).withdraw(amounts[amounts.length - 1]);\r\n        TransferHelper.safeTransferETH(to, amounts[amounts.length - 1]);\r\n    }\r\n\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        virtual\r\n        override\r\n        ensure(deadline)\r\n        returns (uint[] memory amounts)\r\n    {\r\n        require(path[path.length - 1] == WETH, 'EvmoSwapRouter: INVALID_PATH');\r\n        amounts = EvmoSwapLibrary.getAmountsOut(factory, amountIn, path);\r\n        require(amounts[amounts.length - 1] >= amountOutMin, 'EvmoSwapRouter: INSUFFICIENT_OUTPUT_AMOUNT');\r\n        TransferHelper.safeTransferFrom(\r\n            path[0], msg.sender, EvmoSwapLibrary.pairFor(factory, path[0], path[1]), amounts[0]\r\n        );\r\n        _swap(amounts, path, address(this));\r\n        IWETH(WETH).withdraw(amounts[amounts.length - 1]);\r\n        TransferHelper.safeTransferETH(to, amounts[amounts.length - 1]);\r\n    }\r\n\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        virtual\r\n        override\r\n        payable\r\n        ensure(deadline)\r\n        returns (uint[] memory amounts)\r\n    {\r\n        require(path[0] == WETH, 'EvmoSwapRouter: INVALID_PATH');\r\n        amounts = EvmoSwapLibrary.getAmountsIn(factory, amountOut, path);\r\n        require(amounts[0] <= msg.value, 'EvmoSwapRouter: EXCESSIVE_INPUT_AMOUNT');\r\n        IWETH(WETH).deposit{value: amounts[0]}();\r\n        assert(IWETH(WETH).transfer(EvmoSwapLibrary.pairFor(factory, path[0], path[1]), amounts[0]));\r\n        _swap(amounts, path, to);\r\n        // refund dust eth, if any\r\n        if (msg.value > amounts[0]) TransferHelper.safeTransferETH(msg.sender, msg.value - amounts[0]);\r\n    }\r\n\r\n    // **** SWAP (supporting fee-on-transfer tokens) ****\r\n    // requires the initial amount to have already been sent to the first pair\r\n    function _swapSupportingFeeOnTransferTokens(address[] memory path, address _to) internal virtual {\r\n        for (uint i; i < path.length - 1; i++) {\r\n            (address input, address output) = (path[i], path[i + 1]);\r\n            (address token0,) = EvmoSwapLibrary.sortTokens(input, output);\r\n            IEvmoSwapPair pair = IEvmoSwapPair(EvmoSwapLibrary.pairFor(factory, input, output));\r\n            uint amountInput;\r\n            uint amountOutput;\r\n            { // scope to avoid stack too deep errors\r\n            (uint reserve0, uint reserve1,) = pair.getReserves();\r\n            (uint reserveInput, uint reserveOutput) = input == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\r\n            amountInput = IERC20(input).balanceOf(address(pair)).sub(reserveInput);\r\n            amountOutput = EvmoSwapLibrary.getAmountOut(amountInput, reserveInput, reserveOutput, pair.pairFee());\r\n            }\r\n            (uint amount0Out, uint amount1Out) = input == token0 ? (uint(0), amountOutput) : (amountOutput, uint(0));\r\n            address to = i < path.length - 2 ? EvmoSwapLibrary.pairFor(factory, output, path[i + 2]) : _to;\r\n            pair.swap(amount0Out, amount1Out, to, new bytes(0));\r\n        }\r\n    }\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external virtual override ensure(deadline) {\r\n        TransferHelper.safeTransferFrom(\r\n            path[0], msg.sender, EvmoSwapLibrary.pairFor(factory, path[0], path[1]), amountIn\r\n        );\r\n        uint balanceBefore = IERC20(path[path.length - 1]).balanceOf(to);\r\n        _swapSupportingFeeOnTransferTokens(path, to);\r\n        require(\r\n            IERC20(path[path.length - 1]).balanceOf(to).sub(balanceBefore) >= amountOutMin,\r\n            'EvmoSwapRouter: INSUFFICIENT_OUTPUT_AMOUNT'\r\n        );\r\n    }\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    )\r\n        external\r\n        virtual\r\n        override\r\n        payable\r\n        ensure(deadline)\r\n    {\r\n        require(path[0] == WETH, 'EvmoSwapRouter: INVALID_PATH');\r\n        uint amountIn = msg.value;\r\n        IWETH(WETH).deposit{value: amountIn}();\r\n        assert(IWETH(WETH).transfer(EvmoSwapLibrary.pairFor(factory, path[0], path[1]), amountIn));\r\n        uint balanceBefore = IERC20(path[path.length - 1]).balanceOf(to);\r\n        _swapSupportingFeeOnTransferTokens(path, to);\r\n        require(\r\n            IERC20(path[path.length - 1]).balanceOf(to).sub(balanceBefore) >= amountOutMin,\r\n            'EvmoSwapRouter: INSUFFICIENT_OUTPUT_AMOUNT'\r\n        );\r\n    }\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    )\r\n        external\r\n        virtual\r\n        override\r\n        ensure(deadline)\r\n    {\r\n        require(path[path.length - 1] == WETH, 'EvmoSwapRouter: INVALID_PATH');\r\n        TransferHelper.safeTransferFrom(\r\n            path[0], msg.sender, EvmoSwapLibrary.pairFor(factory, path[0], path[1]), amountIn\r\n        );\r\n        _swapSupportingFeeOnTransferTokens(path, address(this));\r\n        uint amountOut = IERC20(WETH).balanceOf(address(this));\r\n        require(amountOut >= amountOutMin, 'EvmoSwapRouter: INSUFFICIENT_OUTPUT_AMOUNT');\r\n        IWETH(WETH).withdraw(amountOut);\r\n        TransferHelper.safeTransferETH(to, amountOut);\r\n    }\r\n\r\n    // **** LIBRARY FUNCTIONS ****\r\n    function quote(uint amountA, uint reserveA, uint reserveB) public pure virtual override returns (uint amountB) {\r\n        return EvmoSwapLibrary.quote(amountA, reserveA, reserveB);\r\n    }\r\n\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut, uint pairFee)\r\n        public\r\n        pure\r\n        virtual\r\n        override\r\n        returns (uint amountOut)\r\n    {\r\n        return EvmoSwapLibrary.getAmountOut(amountIn, reserveIn, reserveOut, pairFee);\r\n    }\r\n\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut, uint pairFee)\r\n        public\r\n        pure\r\n        virtual\r\n        override\r\n        returns (uint amountIn)\r\n    {\r\n        return EvmoSwapLibrary.getAmountIn(amountOut, reserveIn, reserveOut, pairFee);\r\n    }\r\n\r\n    function getAmountsOut(uint amountIn, address[] memory path)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint[] memory amounts)\r\n    {\r\n        return EvmoSwapLibrary.getAmountsOut(factory, amountIn, path);\r\n    }\r\n\r\n    function getAmountsIn(uint amountOut, address[] memory path)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint[] memory amounts)\r\n    {\r\n        return EvmoSwapLibrary.getAmountsIn(factory, amountOut, path);\r\n    }\r\n}\r\n"
    },
    "contracts/interfaces/IWETH.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.5.0;\r\n\r\ninterface IWETH {\r\n    function deposit() external payable;\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function withdraw(uint) external;\r\n}\r\n"
    },
    "contracts/interfaces/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.5.0;\r\n\r\ninterface IERC20 {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n}\r\n"
    },
    "contracts/libraries/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.5.16;\r\n\r\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\r\n\r\nlibrary SafeMath {\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x, 'ds-math-add-overflow');\r\n    }\r\n\r\n    function sub(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x - y) <= x, 'ds-math-sub-underflow');\r\n    }\r\n\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');\r\n    }\r\n}\r\n"
    },
    "contracts/libraries/TransferHelper.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.0;\r\n\r\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\r\nlibrary TransferHelper {\r\n    function safeApprove(\r\n        address token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\r\n        require(\r\n            success && (data.length == 0 || abi.decode(data, (bool))),\r\n            'TransferHelper::safeApprove: approve failed'\r\n        );\r\n    }\r\n\r\n    function safeTransfer(\r\n        address token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(\r\n            success && (data.length == 0 || abi.decode(data, (bool))),\r\n            'TransferHelper::safeTransfer: transfer failed'\r\n        );\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        address token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n        require(\r\n            success && (data.length == 0 || abi.decode(data, (bool))),\r\n            'TransferHelper::transferFrom: transferFrom failed'\r\n        );\r\n    }\r\n\r\n    function safeTransferETH(address to, uint256 value) internal {\r\n        (bool success, ) = to.call{value: value}(new bytes(0));\r\n        require(success, 'TransferHelper::safeTransferETH: ETH transfer failed');\r\n    }\r\n}"
    },
    "contracts/interfaces/IEvmoSwapRouter02.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.6.2;\r\n\r\nimport './IEvmoSwapRouter01.sol';\r\n\r\ninterface IEvmoSwapRouter02 is IEvmoSwapRouter01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n"
    },
    "contracts/libraries/EvmoSwapLibrary.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.5.0;\r\n\r\nimport \"./SafeMath.sol\";\r\nimport '../interfaces/IEvmoSwapPair.sol';\r\n\r\nlibrary EvmoSwapLibrary {\r\n    using SafeMath for uint;\r\n\r\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\r\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\r\n        require(tokenA != tokenB, 'EvmoSwapLibrary: IDENTICAL_ADDRESSES');\r\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\r\n        require(token0 != address(0), 'EvmoSwapLibrary: ZERO_ADDRESS');\r\n    }\r\n\r\n    // calculates the CREATE2 address for a pair without making any external calls\r\n    function pairFor(address factory, address tokenA, address tokenB) internal pure returns (address pair) {\r\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\r\n        pair = address(uint(keccak256(abi.encodePacked(\r\n                hex'ff',\r\n                factory,\r\n                keccak256(abi.encodePacked(token0, token1)),\r\n                hex'1a74734eea11bc0ee7528f77a3306d46a0e9015d2eca65dd5651259a4b2eefe1' // init code hash\r\n            ))));\r\n    }\r\n\r\n    function getPairFee(address factory, address tokenA, address tokenB) internal view returns (uint pairFee) {\r\n        pairFee = IEvmoSwapPair(pairFor(factory, tokenA, tokenB)).pairFee();\r\n    }\r\n\r\n    // fetches and sorts the reserves for a pair\r\n    function getReserves(address factory, address tokenA, address tokenB) internal view returns (uint reserveA, uint reserveB) {\r\n        (address token0,) = sortTokens(tokenA, tokenB);\r\n        pairFor(factory, tokenA, tokenB);\r\n        (uint reserve0, uint reserve1,) = IEvmoSwapPair(pairFor(factory, tokenA, tokenB)).getReserves();\r\n        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\r\n    }\r\n\r\n    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\r\n    function quote(uint amountA, uint reserveA, uint reserveB) internal pure returns (uint amountB) {\r\n        require(amountA > 0, 'EvmoSwapLibrary: INSUFFICIENT_AMOUNT');\r\n        require(reserveA > 0 && reserveB > 0, 'EvmoSwapLibrary: INSUFFICIENT_LIQUIDITY');\r\n        amountB = amountA.mul(reserveB) / reserveA;\r\n    }\r\n\r\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut, uint pairFee) internal pure returns (uint amountOut) {\r\n        require(amountIn > 0, 'EvmoSwapLibrary: INSUFFICIENT_INPUT_AMOUNT');\r\n        require(reserveIn > 0 && reserveOut > 0, 'EvmoSwapLibrary: INSUFFICIENT_LIQUIDITY');\r\n        uint amountInWithFee = amountIn.mul(uint(10000).sub(pairFee));\r\n        uint numerator = amountInWithFee.mul(reserveOut);\r\n        uint denominator = reserveIn.mul(10000).add(amountInWithFee);\r\n        amountOut = numerator / denominator;\r\n    }\r\n\r\n    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut, uint pairFee) internal pure returns (uint amountIn) {\r\n        require(amountOut > 0, 'EvmoSwapLibrary: INSUFFICIENT_OUTPUT_AMOUNT');\r\n        require(reserveIn > 0 && reserveOut > 0, 'EvmoSwapLibrary: INSUFFICIENT_LIQUIDITY');\r\n        uint numerator = reserveIn.mul(amountOut).mul(10000);\r\n        uint denominator = reserveOut.sub(amountOut).mul(uint(10000).sub(pairFee));\t\r\n        amountIn = (numerator / denominator).add(1);\r\n    }\r\n\r\n    // performs chained getAmountOut calculations on any number of pairs\r\n    function getAmountsOut(address factory, uint amountIn, address[] memory path) internal view returns (uint[] memory amounts) {\r\n        require(path.length >= 2, 'EvmoSwapLibrary: INVALID_PATH');\r\n        amounts = new uint[](path.length);\r\n        amounts[0] = amountIn;\r\n        for (uint i; i < path.length - 1; i++) {\r\n            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i], path[i + 1]);\r\n            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut, getPairFee(factory, path[i], path[i + 1]));\t\r\n        }\r\n    }\r\n\r\n    // performs chained getAmountIn calculations on any number of pairs\r\n    function getAmountsIn(address factory, uint amountOut, address[] memory path) internal view returns (uint[] memory amounts) {\r\n        require(path.length >= 2, 'EvmoSwapLibrary: INVALID_PATH');\r\n        amounts = new uint[](path.length);\r\n        amounts[amounts.length - 1] = amountOut;\r\n        for (uint i = path.length - 1; i > 0; i--) {\r\n            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i - 1], path[i]);\r\n            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut, getPairFee(factory, path[i - 1], path[i]));\t\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/interfaces/IEvmoSwapRouter01.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.6.2;\r\n\r\ninterface IEvmoSwapRouter01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut, uint pairFee) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut, uint pairFee) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n"
    },
    "contracts/interfaces/IEvmoSwapCallee.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.5.0;\r\n\r\ninterface IEvmoSwapCallee {\r\n    function evmosCall(address sender, uint amount0, uint amount1, bytes calldata data) external;\r\n}\r\n"
    },
    "contracts/swap/EvmoSwapMigrator.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.6.12;\r\n\r\nimport '../libraries/TransferHelper.sol';\r\nimport '../interfaces/IEvmoSwapMigrator.sol';\r\nimport '../interfaces/IEvmoSwapFactory.sol';\r\nimport '../interfaces/IEvmoSwapRouter01.sol';\r\nimport '../interfaces/IERC20.sol';\r\n\r\ncontract EvmoSwapMigrator is IEvmoSwapMigrator {\r\n    IEvmoSwapRouter01 immutable router;\r\n    IEvmoSwapFactory immutable factoryV1;\r\n\r\n    constructor(address _factoryV1, address _router) public {\r\n        factoryV1 = IEvmoSwapFactory(_factoryV1);\r\n        router = IEvmoSwapRouter01(_router);\r\n    }\r\n\r\n    function migrate(address token, uint amountTokenMin, uint amountETHMin, address to, uint deadline) external override {\r\n        //\r\n    }\r\n}"
    },
    "contracts/interfaces/IEvmoSwapMigrator.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.5.0;\r\n\r\ninterface IEvmoSwapMigrator {\r\n    function migrate(address token, uint amountTokenMin, uint amountETHMin, address to, uint deadline) external;\r\n}"
    },
    "contracts/libraries/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.6.12;\r\n\r\nimport \"../interfaces/IERC20.sol\";\r\n\r\nlibrary SafeERC20 {\r\n    function safeSymbol(IERC20 token) internal view returns(string memory) {\r\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(0x95d89b41));\r\n        return success && data.length > 0 ? abi.decode(data, (string)) : \"???\";\r\n    }\r\n\r\n    function safeName(IERC20 token) internal view returns(string memory) {\r\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(0x06fdde03));\r\n        return success && data.length > 0 ? abi.decode(data, (string)) : \"???\";\r\n    }\r\n\r\n    function safeDecimals(IERC20 token) public view returns (uint8) {\r\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(0x313ce567));\r\n        return success && data.length == 32 ? abi.decode(data, (uint8)) : 18;\r\n    }\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 amount) internal {\r\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(0xa9059cbb, to, amount));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"SafeERC20: Transfer failed\");\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, uint256 amount) internal {\r\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(0x23b872dd, from, address(this), amount));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"SafeERC20: TransferFrom failed\");\r\n    }\r\n}"
    },
    "contracts/tools/EvmosFaucet.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.6.12;\r\nimport \"../libraries/SafeMath.sol\";\r\nimport \"../libraries/SafeERC20.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\ncontract EvmosFaucet is Ownable {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    address public treasury;\r\n\r\n    address public immutable dai;\r\n    address public immutable usdc;\r\n    address public immutable usdt;\r\n\r\n    uint256 public constant FAUCET_AMOUNT = 50; // 50 pre address\r\n\r\n    constructor(\r\n        address _dai,\r\n        address _usdc,\r\n        address _usdt\r\n    ) public {\r\n        dai = _dai;\r\n        usdc = _usdc;\r\n        usdt = _usdt;\r\n        treasury = msg.sender;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function faucetTokenWithETH(address _token) external payable {\r\n        require(msg.value > 0, \"No ETH sent\");\r\n        uint decimals = IERC20(_token).decimals();\r\n        require(IERC20(_token).balanceOf(address(this)) >= FAUCET_AMOUNT.mul(10 ** decimals), 'Not enough faucet token');\r\n\r\n        IERC20(_token).safeTransfer(_msgSender(), FAUCET_AMOUNT.mul(10 ** decimals));\r\n    }\r\n\r\n    function adminWithdrawETH() external onlyOwner {\r\n        require(address(this).balance > 0, \"No ETH to withdraw\");\r\n\r\n        (bool success,) = treasury.call{value : address(this).balance}(\"\");\r\n        require(success, \"Transfer failed\");\r\n    }\r\n\r\n    function adminWithdrawERC20(address ERC20token) external onlyOwner {\r\n        uint256 withdrawAmount = IERC20(ERC20token).balanceOf(address(this));\r\n        require(withdrawAmount > 0, \"No ERC20 to withdraw\");\r\n\r\n        IERC20(ERC20token).safeTransfer(treasury, withdrawAmount);\r\n    }\r\n}"
    },
    "contracts/interfaces/IEvmoSwapERC20.sol": {
      "content": "\r\n// SPDX-License-Identifier: MIT\r\npragma solidity >=0.5.0;\r\n\r\ninterface IEvmoSwapERC20 {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n}\r\n"
    },
    "contracts/staking/VotingEscrow.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.6.12;\r\npragma experimental ABIEncoderV2;\r\n\r\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\r\nimport \"../interfaces/IRewardPool.sol\";\r\nimport \"../interfaces/IMasterChef.sol\";\r\n\r\ncontract VotingEscrow is Ownable, ReentrancyGuard {\r\n    using SafeMath for uint256;\r\n\r\n    enum ActionType {DEPOSIT_FOR, CREATE_LOCK, INCREASE_LOCK_AMOUNT, INCREASE_UNLOCK_TIME}\r\n\r\n    uint256 public constant WEEK = 7 * 86400;\r\n    uint256 public constant MAXTIME = 4 * 365 * 86400;  // 4 years\r\n    uint256 public constant MULTIPLIER = 1e18;\r\n\r\n    struct Point {\r\n        int128 bias;\r\n        int128 slope;   // - dweight / dt\r\n        uint256 ts;\r\n        uint256 blk;    // block\r\n    }\r\n\r\n    struct LockedBalance {\r\n        int128 amount;\r\n        uint256 end;\r\n    }\r\n\r\n    string public name;\r\n    string public symbol;\r\n    string public version;\r\n    uint8 public immutable decimals;\r\n\r\n    address public token;\r\n    IRewardPool public rewardPool;\r\n    uint256 public supply; // total amount of emo token\r\n\r\n    IMasterChef public masterchef;\r\n\r\n    mapping(address => LockedBalance) public locked;\r\n\r\n    bool public emergency;\r\n\r\n    uint256 public epoch;\r\n    Point[100000000000000000000000000000] public pointHistory; // epoch -> point\r\n    mapping(address => Point[1000000000]) public userPointHistory; // user -> Point[user_epoch]\r\n    mapping(address => uint256) public userPointEpoch;\r\n    mapping(uint256 => int128) public slopeChanges; // time -> slope change\r\n\r\n    mapping(address => bool) public whitelist; // Only EOA or contract whitelisted is allowed to deposit\r\n\r\n    event Deposit(address indexed provider, uint256 indexed locktime, uint256 value, uint actionType, uint256 ts);\r\n    event Withdraw(address indexed provider, uint256 value, uint256 ts);\r\n    event Supply(uint256 prevSupply, uint256 supply);\r\n    event Error(bytes error);\r\n\r\n    modifier onlyEoaOrWhitelist(address addr) {\r\n        require(tx.origin == msg.sender || whitelist[addr], \"Contract is not in the whitelist\");\r\n        _;\r\n    }\r\n\r\n    modifier notEmergency() {\r\n        require(!emergency, \"In an emergency\");\r\n        _;\r\n    }\r\n\r\n    constructor(address _token, string memory _name, string memory _symbol, string memory _version) public {\r\n        token = _token;\r\n        pointHistory[0].blk = block.number;\r\n        pointHistory[0].ts = block.timestamp;\r\n\r\n        decimals = ERC20(_token).decimals();\r\n        name = _name;\r\n        symbol = _symbol;\r\n        version = _version;\r\n    }\r\n\r\n    /**\r\n    * @notice Sets a list of users who are allowed/denied to deposit\r\n    * @param _users A list of address\r\n    * @param _flag True to allow or false to disallow\r\n    */\r\n    function setWhitelist(address [] memory _users, bool _flag) external onlyOwner {\r\n        for (uint i = 0; i < _users.length; i++) {\r\n            whitelist[_users[i]] = _flag;\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @notice Only set once\r\n    * @param _rewardPool Address of reward pool\r\n    */\r\n    function setRewardPool(IRewardPool _rewardPool) external onlyOwner {\r\n        require(address(rewardPool) == address(0), \"RewardPool has been set\");\r\n        rewardPool = _rewardPool;\r\n        IERC20(token).approve(address(_rewardPool), uint256(~0));\r\n    }\r\n\r\n    /**\r\n    * @notice Only set once\r\n    * @param _masterchef Address of masterchef\r\n    */\r\n    function setMasterchef(IMasterChef _masterchef) external onlyOwner {\r\n        masterchef = _masterchef;\r\n    }\r\n\r\n    /**\r\n    * @notice Only set once\r\n    */\r\n    function setEmergency() external onlyOwner {\r\n        emergency = true;\r\n    }\r\n\r\n    /**\r\n    * @notice Get the most recently recorded rate of voting power decrease for `addr`\r\n    * @param addr Address of the user wallet\r\n    * @return Value of the slope\r\n    **/\r\n    function getLastUserSlope(address addr) external view returns (int128) {\r\n        uint256 uepoch = userPointEpoch[addr];\r\n        return userPointHistory[addr][uepoch].slope;\r\n    }\r\n\r\n    /**\r\n    * @notice Get the timestamp for checkpoint `_idx` for `_addr`\r\n    * @param _addr User wallet address\r\n    * @param _idx User epoch number\r\n    * @return Epoch time of the checkpoint\r\n    **/\r\n    function userPointHistoryTs(address _addr, uint256 _idx) external view returns (uint256) {\r\n        return userPointHistory[_addr][_idx].ts;\r\n    }\r\n\r\n    /**\r\n    * @notice Get timestamp when `_addr`'s lock finishes\r\n    * @param _addr User wallet\r\n    * @return Epoch time of the lock end\r\n    **/\r\n    function lockedEnd(address _addr) external view returns (uint256) {\r\n        return locked[_addr].end;\r\n    }\r\n\r\n    /**\r\n    * @notice Record global and per-user data to checkpoint\r\n    * @param addr User's wallet address. No user checkpoint if 0x0\r\n    * @param oldLocked Pevious locked amount / end lock time for the user\r\n    * @param newLocked New locked amount / end lock time for the user\r\n    **/\r\n    function _checkpoint(address addr, LockedBalance memory oldLocked, LockedBalance memory newLocked) internal {\r\n        Point memory uOld;\r\n        Point memory uNew;\r\n        int128 oldDslope = 0;\r\n        int128 newDslope = 0;\r\n        uint256 _epoch = epoch;\r\n\r\n        if (addr != address(0)) {\r\n            if (oldLocked.end > block.timestamp && oldLocked.amount > 0) {\r\n                uOld.slope = oldLocked.amount / int128(MAXTIME);\r\n                uOld.bias = uOld.slope * (int128(oldLocked.end - block.timestamp));\r\n            }\r\n            if (newLocked.end > block.timestamp && newLocked.amount > 0) {\r\n                uNew.slope = newLocked.amount / int128(MAXTIME);\r\n                uNew.bias = uNew.slope * (int128(newLocked.end - block.timestamp));\r\n            }\r\n\r\n            oldDslope = slopeChanges[oldLocked.end];\r\n            if (newLocked.end != 0) {\r\n                if (newLocked.end == oldLocked.end) {\r\n                    newDslope = oldDslope;\r\n                } else {\r\n                    newDslope = slopeChanges[newLocked.end];\r\n                }\r\n            }\r\n        }\r\n\r\n        Point memory lastPoint = Point({bias : 0, slope : 0, ts : block.timestamp, blk : block.number});\r\n        if (_epoch > 0) {\r\n            lastPoint = pointHistory[_epoch];\r\n        }\r\n        uint256 lastCheckpoint = lastPoint.ts;\r\n\r\n        Point memory initialLastPoint = Point({bias : lastPoint.bias, slope : lastPoint.slope, ts : lastPoint.ts, blk : lastPoint.blk});\r\n        // dblock/dt\r\n        uint256 blockSlope = 0;\r\n        if (block.timestamp > lastPoint.ts) {\r\n            blockSlope = MULTIPLIER * (block.number - lastPoint.blk) / (block.timestamp - lastPoint.ts);\r\n        }\r\n\r\n        // Go over weeks to fill history and calculate what the current point is\r\n        uint256 t_i = (lastCheckpoint / WEEK) * WEEK;\r\n        for (uint i; i < 255; i++) {\r\n            t_i += WEEK;\r\n            int128 dSlope = 0;\r\n            if (t_i > block.timestamp) {\r\n                t_i = block.timestamp;\r\n            } else {\r\n                dSlope = slopeChanges[t_i];\r\n            }\r\n            lastPoint.bias -= (lastPoint.slope * (int128(t_i - lastCheckpoint)));\r\n            lastPoint.slope += dSlope;\r\n            if (lastPoint.bias < 0) {\r\n                lastPoint.bias = 0;\r\n            }\r\n            // It will never happen,just in case\r\n            if (lastPoint.slope < 0) {\r\n                lastPoint.slope = 0;\r\n            }\r\n            lastCheckpoint = t_i;\r\n            lastPoint.ts = t_i;\r\n            lastPoint.blk = initialLastPoint.blk.add(blockSlope.mul(t_i.sub(initialLastPoint.ts)).div(MULTIPLIER));\r\n            _epoch += 1;\r\n            if (t_i == block.timestamp) {\r\n                lastPoint.blk = block.number;\r\n                break;\r\n            } else {\r\n                pointHistory[_epoch] = lastPoint;\r\n            }\r\n        }\r\n\r\n        epoch = _epoch;\r\n\r\n        if (addr != address(0)) {\r\n            // If last point was in this block, the slope change has been applied already\r\n            lastPoint.slope += (uNew.slope - uOld.slope);\r\n            lastPoint.bias += (uNew.bias - uOld.bias);\r\n            if (lastPoint.slope < 0) {\r\n                lastPoint.slope = 0;\r\n            }\r\n            if (lastPoint.bias < 0) {\r\n                lastPoint.bias = 0;\r\n            }\r\n        }\r\n\r\n        // Record the changed point into history\r\n        pointHistory[_epoch] = lastPoint;\r\n\r\n        // avoid stack too deep\r\n        address _addr = addr;\r\n        if (_addr != address(0)) {\r\n            // Schedule the slope changes (slope is going down)\r\n            // We subtract new_user_slope from [newLocked.end]\r\n            // and add old_user_slope to [oldLocked.end]\r\n            if (oldLocked.end > block.timestamp) {\r\n                oldDslope += uOld.slope;\r\n                if (newLocked.end == oldLocked.end) {\r\n                    oldDslope -= uNew.slope;\r\n                }\r\n                slopeChanges[oldLocked.end] = oldDslope;\r\n            }\r\n\r\n            if (newLocked.end > block.timestamp) {\r\n                if (newLocked.end > oldLocked.end) {\r\n                    // old slope disappeared at this point\r\n                    newDslope -= uNew.slope;\r\n                    slopeChanges[newLocked.end] = newDslope;\r\n                }\r\n            }\r\n\r\n            // Now handle user history\r\n            uint256 userEpoch = userPointEpoch[_addr] + 1;\r\n\r\n            userPointEpoch[_addr] = userEpoch;\r\n            uNew.ts = block.timestamp;\r\n            uNew.blk = block.number;\r\n            userPointHistory[_addr][userEpoch] = uNew;\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @notice Deposit and lock tokens for a user\r\n    * @param _addr User's wallet address\r\n    * @param _value Amount to deposit\r\n    * @param unlockTime New time when to unlock the tokens, or 0 if unchanged\r\n    * @param lockedBalance Previous locked amount / timestamp\r\n    **/\r\n    function _depositFor(address _addr, uint256 _value, uint256 unlockTime, LockedBalance memory lockedBalance, ActionType actionType) internal {\r\n        LockedBalance memory _locked = lockedBalance;\r\n        uint256 supplyBefore = supply;\r\n\r\n        supply = supplyBefore.add(_value);\r\n        LockedBalance memory oldLocked = LockedBalance({amount : _locked.amount, end : _locked.end});\r\n        _locked.amount += int128(_value);\r\n        if (unlockTime != 0) {\r\n            _locked.end = unlockTime;\r\n        }\r\n        locked[_addr] = _locked;\r\n\r\n        // Possibilities:\r\n        // Both old_locked.end could be current or expired (>/< block.timestamp)\r\n        // value == 0 (extend lock) or value > 0 (add to lock or extend lock)\r\n        // _locked.end > block.timestamp (always)\r\n        _checkpoint(_addr, oldLocked, _locked);\r\n\r\n        if (_value != 0) {\r\n            require(ERC20(token).transferFrom(_addr, address(this), _value), \"Transfer failed!\");\r\n            require(rewardPool.depositFor(_addr, _value), \"Deposit into reward pool failed.\");\r\n        }\r\n\r\n        emit Deposit(_addr, _locked.end, _value, uint(actionType), block.timestamp);\r\n        emit Supply(supplyBefore, supplyBefore + _value);\r\n    }\r\n\r\n    /**\r\n    * @notice Record global data to checkpoint\r\n    **/\r\n    function checkpoint() external notEmergency {\r\n        _checkpoint(address(0), LockedBalance({amount : 0, end : 0}), LockedBalance({amount : 0, end : 0}));\r\n    }\r\n\r\n    /**\r\n    * @notice Deposit `_value` tokens for `_addr` and add to the lock\r\n    * @dev Anyone (even a smart contract) can deposit for someone else, but\r\n    * cannot extend their locktime and deposit for a brand new user\r\n    * @param _addr User's wallet address\r\n    * @param _value Amount to add to user's lock\r\n    **/\r\n    function depositFor(address _addr, uint256 _value) public nonReentrant notEmergency {\r\n        require(_value > 0, \"Need non-zero value\");\r\n        LockedBalance memory _locked = locked[_addr];\r\n        require(_locked.amount > 0, \"No existing lock found\");\r\n        require(_locked.end > block.timestamp, \"Cannot add to expired lock. Withdraw\");\r\n\r\n        _depositFor(_addr, _value, 0, _locked, ActionType.DEPOSIT_FOR);\r\n    }\r\n\r\n    function depositForWithMc(address _addr, uint256 _value) external {\r\n        depositFor(_addr, _value);\r\n        masterchef.harvestAllRewards(_addr);\r\n    }\r\n\r\n    /**\r\n    * @notice Deposit `_value` tokens for `msg.sender` and lock until `_unlock_time`\r\n    * @param _value Amount to deposit\r\n    * @param _unlockTime Epoch time when tokens unlock, rounded down to whole weeks\r\n    **/\r\n    function createLock(uint256 _value, uint256 _unlockTime) public nonReentrant notEmergency onlyEoaOrWhitelist(msg.sender) {\r\n        require(_value > 0, \"Need non-zero value\");\r\n\r\n        // Locktime is rounded down to weeks\r\n        uint256 unlockTime = (_unlockTime / WEEK) * WEEK;\r\n        LockedBalance memory _locked = locked[msg.sender];\r\n        require(_locked.amount == 0, \"Withdraw old tokens first\");\r\n        require(unlockTime > block.timestamp, \"Can only lock until time in the future\");\r\n        require(unlockTime <= block.timestamp + MAXTIME, \"Voting lock can be 4 years max\");\r\n\r\n        _depositFor(msg.sender, _value, unlockTime, _locked, ActionType.CREATE_LOCK);\r\n    }\r\n\r\n    function createLockWithMc(uint256 _value, uint256 _unlockTime) external {\r\n        createLock(_value, _unlockTime);\r\n        masterchef.harvestAllRewards(msg.sender);\r\n    }\r\n\r\n    /**\r\n    * @notice Deposit `_value` additional tokens for `msg.sender`\r\n    * without modifying the unlock time\r\n    * @param _value Amount of tokens to deposit and add to the lock\r\n    **/\r\n    function increaseAmount(uint256 _value) public nonReentrant notEmergency onlyEoaOrWhitelist(msg.sender) {\r\n        require(_value > 0, \"Need non-zero value\");\r\n        LockedBalance memory _locked = locked[msg.sender];\r\n        require(_locked.amount > 0, \"No existing lock found\");\r\n        require(_locked.end > block.timestamp, \"Cannot add to expired lock. Withdraw\");\r\n\r\n        _depositFor(msg.sender, _value, 0, _locked, ActionType.INCREASE_LOCK_AMOUNT);\r\n    }\r\n\r\n    function increaseAmountWithMc(uint256 _value) external {\r\n        increaseAmount(_value);\r\n        masterchef.harvestAllRewards(msg.sender);\r\n    }\r\n\r\n    /**\r\n    * @notice Extend the unlock time for `msg.sender` to `_unlock_time`\r\n    * @param _unlockTime New epoch time for unlocking\r\n    **/\r\n    function increaseUnlockTime(uint256 _unlockTime) public nonReentrant notEmergency onlyEoaOrWhitelist(msg.sender) {\r\n        LockedBalance memory _locked = locked[msg.sender];\r\n        uint256 unlockTime = (_unlockTime / WEEK) * WEEK;\r\n\r\n        require(_locked.end > block.timestamp, \"Lock expired\");\r\n        require(_locked.amount > 0, \"Nothing is locked\");\r\n        require(unlockTime > _locked.end, \"Can only increase lock duration\");\r\n        require(unlockTime <= block.timestamp + MAXTIME, \"Voting lock can be 4 years max\");\r\n\r\n        _depositFor(msg.sender, 0, unlockTime, _locked, ActionType.INCREASE_UNLOCK_TIME);\r\n    }\r\n\r\n    function increaseUnlockTimeWithMc(uint256 _unlockTime) external {\r\n        increaseUnlockTime(_unlockTime);\r\n        masterchef.harvestAllRewards(msg.sender);\r\n    }\r\n\r\n    /**\r\n    * @notice Withdraw all tokens for `msg.sender`\r\n    * @dev Only possible if the lock has expired\r\n    **/\r\n    function withdraw() public nonReentrant notEmergency {\r\n        LockedBalance memory _locked = locked[msg.sender];\r\n        require(block.timestamp >= _locked.end, \"The lock didn't expire\");\r\n\r\n        uint256 value = uint256(_locked.amount);\r\n        LockedBalance memory oldLocked = locked[msg.sender];\r\n        _locked.end = 0;\r\n        _locked.amount = 0;\r\n        locked[msg.sender] = _locked;\r\n\r\n        uint256 supplyBefore = supply;\r\n        supply = supplyBefore.sub(value);\r\n\r\n        // oldLocked can have either expired <= timestamp or zero end\r\n        // _locked has only 0 end\r\n        // Both can have >= 0 amount\r\n        _checkpoint(msg.sender, oldLocked, _locked);\r\n        require(rewardPool.withdrawFor(msg.sender, value), \"Withdraw from reward pool failed.\");\r\n        require(ERC20(token).transfer(msg.sender, value), \"Transfer failed!\");\r\n\r\n        emit Withdraw(msg.sender, value, block.timestamp);\r\n        emit Supply(supplyBefore, supplyBefore - value);\r\n    }\r\n\r\n    /**\r\n    * @notice Withdraw during emergency\r\n    **/\r\n    function emergencyWithdraw() external {\r\n        require(emergency, \"Only can be called in an emergency\");\r\n\r\n        LockedBalance storage _locked = locked[msg.sender];\r\n        uint256 value = uint256(_locked.amount);\r\n        try rewardPool.emergencyWithdraw(msg.sender) {\r\n        } catch (bytes memory error) {\r\n            emit Error(error);\r\n        }\r\n\r\n        _locked.end = 0;\r\n        _locked.amount = 0;\r\n        if (supply >= value) {\r\n            supply = supply - value;\r\n        } else {\r\n            supply = 0;\r\n        }\r\n        ERC20(token).transfer(msg.sender, value);\r\n    }\r\n\r\n    function withdrawWithMc() external {\r\n        withdraw();\r\n        masterchef.harvestAllRewards(msg.sender);\r\n    }\r\n\r\n    /**\r\n    * The following ERC20/minime-compatible methods are not real balanceOf and supply!\r\n    * They measure the weights for the purpose of voting, so they don't represent\r\n    * real coins.\r\n    **/\r\n\r\n    /**\r\n    * @notice Binary search to estimate timestamp for block number\r\n    * @param _block Block to find\r\n    * @param maxEpoch Don't go beyond this epoch\r\n    * @return Approximate timestamp for block\r\n    **/\r\n    function findBlockEpoch(uint256 _block, uint256 maxEpoch) internal view returns (uint256){\r\n        // binary search\r\n        uint256 _min = 0;\r\n        uint256 _max = maxEpoch;\r\n        for (uint i; i < 128; i++) {\r\n            if (_min >= _max) {\r\n                break;\r\n            }\r\n            uint256 _mid = (_min + _max + 1) / 2;\r\n            if (pointHistory[_mid].blk <= _block) {\r\n                _min = _mid;\r\n            } else {\r\n                _max = _mid - 1;\r\n            }\r\n        }\r\n        return _min;\r\n    }\r\n\r\n    /**\r\n    * @notice Get the voting power for `msg.sender`\r\n    * @param addr User wallet address\r\n    * @param _t Epoch time to return voting power at\r\n    * @return User voting power\r\n    **/\r\n    function balanceOfT(address addr, uint256 _t) public view returns (uint256) {\r\n        uint256 _epoch = userPointEpoch[addr];\r\n        if (_epoch == 0) {\r\n            return 0;\r\n        } else {\r\n            Point memory lastPoint = userPointHistory[addr][_epoch];\r\n            lastPoint.bias -= lastPoint.slope * (int128(_t - lastPoint.ts));\r\n            if (lastPoint.bias < 0) {\r\n                lastPoint.bias = 0;\r\n            }\r\n            return uint256(lastPoint.bias);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @notice Get the current voting power for `msg.sender`\r\n    * @param addr User wallet address\r\n    * @return User voting power\r\n    **/\r\n    function balanceOf(address addr) external view returns (uint256) {\r\n        return balanceOfT(addr, block.timestamp);\r\n    }\r\n\r\n    /**\r\n    * @notice Measure voting power of `addr` at block height `_block`\r\n    * @param addr User's wallet address\r\n    * @param _block Block to calculate the voting power at\r\n    * @return Voting power\r\n    **/\r\n    function balanceOfB(address addr, uint256 _block) external view returns (uint256) {\r\n        require(_block <= block.number, \"Block should not be greater than current block!\");\r\n\r\n        uint256 _min = 0;\r\n        uint256 _max = userPointEpoch[addr];\r\n        for (uint i; i < 128; i++) {\r\n            if (_min >= _max) {\r\n                break;\r\n            }\r\n            uint256 _mid = (_min + _max + 1) / 2;\r\n            if (userPointHistory[addr][_mid].blk <= _block) {\r\n                _min = _mid;\r\n            } else {\r\n                _max = _mid - 1;\r\n            }\r\n        }\r\n\r\n        Point memory upoint = userPointHistory[addr][_min];\r\n\r\n        uint256 maxEpoch = epoch;\r\n        uint256 _epoch = findBlockEpoch(_block, maxEpoch);\r\n        Point memory point0 = pointHistory[_epoch];\r\n        uint256 dBlock = 0;\r\n        uint256 dT = 0;\r\n        if (_epoch < maxEpoch) {\r\n            Point memory point1 = pointHistory[_epoch + 1];\r\n            dBlock = point1.blk.sub(point0.blk);\r\n            dT = point1.ts.sub(point0.ts);\r\n        } else {\r\n            dBlock = block.number.sub(point0.blk);\r\n            dT = block.timestamp.sub(point0.ts);\r\n        }\r\n        uint256 blockTime = point0.ts;\r\n        if (dBlock != 0) {\r\n            blockTime += dT * (_block.sub(point0.blk)) / dBlock;\r\n        }\r\n\r\n        upoint.bias -= upoint.slope * int128(blockTime - upoint.ts);\r\n        if (upoint.bias >= 0) {\r\n            return uint256(upoint.bias);\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @notice Calculate total voting power at some point in the past\r\n    * @param point The point (bias/slope) to start search from\r\n    * @param t Time to calculate the total voting power at\r\n    * @return Total voting power at that time\r\n    **/\r\n    function supplyAt(Point memory point, uint256 t) internal view returns (uint256) {\r\n        Point memory lastPoint = point;\r\n        uint256 t_i = (lastPoint.ts / WEEK) * WEEK;\r\n        for (uint i; i < 255; i++) {\r\n            t_i += WEEK;\r\n            int128 dSlope = 0;\r\n            if (t_i > t) {\r\n                t_i = t;\r\n            } else {\r\n                dSlope = slopeChanges[t_i];\r\n            }\r\n            lastPoint.bias -= lastPoint.slope * int128(t_i - lastPoint.ts);\r\n            if (t_i == t) {\r\n                break;\r\n            }\r\n            lastPoint.slope += dSlope;\r\n            lastPoint.ts = t_i;\r\n        }\r\n\r\n        if (lastPoint.bias < 0) {\r\n            lastPoint.bias = 0;\r\n        }\r\n        return uint256(lastPoint.bias);\r\n    }\r\n\r\n    /**\r\n    * @notice Calculate total voting power\r\n    * @param t Time to calculate the total voting power at\r\n    * @return Total voting power\r\n    **/\r\n    function totalSupplyT(uint256 t) public view returns (uint256) {\r\n        Point memory lastPoint = pointHistory[epoch];\r\n        return supplyAt(lastPoint, t);\r\n    }\r\n\r\n    /**\r\n    * @notice Calculate current total voting power\r\n    * @return Total voting power\r\n    **/\r\n    function totalSupply() external view returns (uint256) {\r\n        return totalSupplyT(block.timestamp);\r\n    }\r\n\r\n    /**\r\n    * @notice Calculate total voting power at some point in the past\r\n    * @param _block Block to calculate the total voting power at\r\n    * @return Total voting power at `_block`\r\n    **/\r\n    function totalSupplyB(uint256 _block) external view returns (uint256) {\r\n        require(_block <= block.number, \"Block should not be greater than current block!\");\r\n        uint256 _epoch = epoch;\r\n        uint256 targetEpoch = findBlockEpoch(_block, _epoch);\r\n\r\n        Point memory point = pointHistory[targetEpoch];\r\n        uint256 dt = 0;\r\n        if (targetEpoch < _epoch) {\r\n            Point memory nextPoint = pointHistory[targetEpoch + 1];\r\n            if (point.blk != nextPoint.blk) {\r\n                dt = (_block - point.blk) * (nextPoint.ts - point.ts) / (nextPoint.blk - point.blk);\r\n            }\r\n        } else {\r\n            if (point.blk != block.number) {\r\n                dt = (_block - point.blk) * (block.timestamp - point.ts) / (block.number - point.blk);\r\n            }\r\n        }\r\n\r\n        // Now dt contains info on how far are we beyond point\r\n        return supplyAt(point, point.ts + dt);\r\n    }\r\n}"
    },
    "@openzeppelin/contracts/utils/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor () internal {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "contracts/interfaces/IRewardPool.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.6.12;\r\n\r\ninterface IRewardPool {\r\n    function depositFor(address _user, uint256 _amount) external returns(bool);\r\n\r\n    function withdrawFor(address _user, uint256 _principals) external returns(bool);\r\n\r\n    function emergencyWithdraw(address _user) external;\r\n}\r\n"
    },
    "contracts/staking/StakingPoolInitializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.6.12;\r\n\r\nimport '@openzeppelin/contracts/token/ERC20/ERC20.sol';\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\r\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\r\n\r\ncontract StakingPoolInitializable is Ownable, ReentrancyGuard {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    // The address of the smart chef factory\r\n    address public SMART_CHEF_FACTORY;\r\n\r\n    // Whether a limit is set for users\r\n    bool public hasUserLimit;\r\n\r\n    // Whether it is initialized\r\n    bool public isInitialized;\r\n\r\n    // Accrued token per share\r\n    uint256 public accTokenPerShare;\r\n\r\n    // The block number when EMO mining ends.\r\n    uint256 public bonusEndBlock;\r\n\r\n    // The block number when EMO mining starts.\r\n    uint256 public startBlock;\r\n\r\n    // The block number of the last pool update\r\n    uint256 public lastRewardBlock;\r\n\r\n    // The pool limit (0 if none)\r\n    uint256 public poolLimitPerUser;\r\n\r\n    // EMO tokens created per block.\r\n    uint256 public rewardPerBlock;\r\n\r\n    // The precision factor\r\n    uint256 public PRECISION_FACTOR;\r\n\r\n    // The reward token\r\n    IERC20 public rewardToken;\r\n\r\n    // The staked token\r\n    IERC20 public stakedToken;\r\n\r\n    // Info of each user that stakes tokens (stakedToken)\r\n    mapping(address => UserInfo) public userInfo;\r\n\r\n    struct UserInfo {\r\n        uint256 amount; // How many staked tokens the user has provided\r\n        uint256 rewardDebt; // Reward debt\r\n    }\r\n\r\n    event AdminTokenRecovery(address tokenRecovered, uint256 amount);\r\n    event Deposit(address indexed user, uint256 amount);\r\n    event EmergencyWithdraw(address indexed user, uint256 amount);\r\n    event NewStartAndEndBlocks(uint256 startBlock, uint256 endBlock);\r\n    event NewRewardPerBlock(uint256 rewardPerBlock);\r\n    event NewPoolLimit(uint256 poolLimitPerUser);\r\n    event RewardsStop(uint256 blockNumber);\r\n    event Withdraw(address indexed user, uint256 amount);\r\n\r\n    constructor() public {\r\n        SMART_CHEF_FACTORY = msg.sender;\r\n    }\r\n\r\n    /*\r\n     * @notice Initialize the contract\r\n     * @param _stakedToken: staked token address\r\n     * @param _rewardToken: reward token address\r\n     * @param _rewardPerBlock: reward per block (in rewardToken)\r\n     * @param _startBlock: start block\r\n     * @param _bonusEndBlock: end block\r\n     * @param _poolLimitPerUser: pool limit per user in stakedToken (if any, else 0)\r\n     * @param _admin: admin address with ownership\r\n     */\r\n    function initialize(\r\n        IERC20 _stakedToken,\r\n        IERC20 _rewardToken,\r\n        uint256 _rewardPerBlock,\r\n        uint256 _startBlock,\r\n        uint256 _bonusEndBlock,\r\n        uint256 _poolLimitPerUser,\r\n        address _admin\r\n    ) external {\r\n        require(!isInitialized, \"Already initialized\");\r\n        require(msg.sender == SMART_CHEF_FACTORY, \"Not factory\");\r\n\r\n        // Make this contract initialized\r\n        isInitialized = true;\r\n\r\n        stakedToken = _stakedToken;\r\n        rewardToken = _rewardToken;\r\n        rewardPerBlock = _rewardPerBlock;\r\n        startBlock = _startBlock;\r\n        bonusEndBlock = _bonusEndBlock;\r\n\r\n        if (_poolLimitPerUser > 0) {\r\n            hasUserLimit = true;\r\n            poolLimitPerUser = _poolLimitPerUser;\r\n        }\r\n\r\n        uint256 decimalsRewardToken = uint256(ERC20(address(rewardToken)).decimals());\r\n        require(decimalsRewardToken < 30, \"Must be inferior to 30\");\r\n\r\n        PRECISION_FACTOR = uint256(10**(uint256(30).sub(decimalsRewardToken)));\r\n\r\n        // Set the lastRewardBlock as the startBlock\r\n        lastRewardBlock = startBlock;\r\n\r\n        // Transfer ownership to the admin address who becomes owner of the contract\r\n        transferOwnership(_admin);\r\n    }\r\n\r\n    /*\r\n     * @notice Deposit staked tokens and collect reward tokens (if any)\r\n     * @param _amount: amount to withdraw (in rewardToken)\r\n     */\r\n    function deposit(uint256 _amount) external nonReentrant {\r\n        UserInfo storage user = userInfo[msg.sender];\r\n\r\n        if (hasUserLimit) {\r\n            require(_amount.add(user.amount) <= poolLimitPerUser, \"User amount above limit\");\r\n        }\r\n\r\n        _updatePool();\r\n\r\n        if (user.amount > 0) {\r\n            uint256 pending = user.amount.mul(accTokenPerShare).div(PRECISION_FACTOR).sub(user.rewardDebt);\r\n            if (pending > 0) {\r\n                rewardToken.safeTransfer(address(msg.sender), pending);\r\n            }\r\n        }\r\n\r\n        if (_amount > 0) {\r\n            user.amount = user.amount.add(_amount);\r\n            stakedToken.safeTransferFrom(address(msg.sender), address(this), _amount);\r\n        }\r\n\r\n        user.rewardDebt = user.amount.mul(accTokenPerShare).div(PRECISION_FACTOR);\r\n\r\n        emit Deposit(msg.sender, _amount);\r\n    }\r\n\r\n    /*\r\n     * @notice Withdraw staked tokens and collect reward tokens\r\n     * @param _amount: amount to withdraw (in rewardToken)\r\n     */\r\n    function withdraw(uint256 _amount) external nonReentrant {\r\n        UserInfo storage user = userInfo[msg.sender];\r\n        require(user.amount >= _amount, \"Amount to withdraw too high\");\r\n\r\n        _updatePool();\r\n\r\n        uint256 pending = user.amount.mul(accTokenPerShare).div(PRECISION_FACTOR).sub(user.rewardDebt);\r\n\r\n        if (_amount > 0) {\r\n            user.amount = user.amount.sub(_amount);\r\n            stakedToken.safeTransfer(address(msg.sender), _amount);\r\n        }\r\n\r\n        if (pending > 0) {\r\n            rewardToken.safeTransfer(address(msg.sender), pending);\r\n        }\r\n\r\n        user.rewardDebt = user.amount.mul(accTokenPerShare).div(PRECISION_FACTOR);\r\n\r\n        emit Withdraw(msg.sender, _amount);\r\n    }\r\n\r\n    /*\r\n     * @notice Withdraw staked tokens without caring about rewards rewards\r\n     * @dev Needs to be for emergency.\r\n     */\r\n    function emergencyWithdraw() external nonReentrant {\r\n        UserInfo storage user = userInfo[msg.sender];\r\n        uint256 amountToTransfer = user.amount;\r\n        user.amount = 0;\r\n        user.rewardDebt = 0;\r\n\r\n        if (amountToTransfer > 0) {\r\n            stakedToken.safeTransfer(address(msg.sender), amountToTransfer);\r\n        }\r\n\r\n        emit EmergencyWithdraw(msg.sender, user.amount);\r\n    }\r\n\r\n    /*\r\n     * @notice Stop rewards\r\n     * @dev Only callable by owner. Needs to be for emergency.\r\n     */\r\n    function emergencyRewardWithdraw(uint256 _amount) external onlyOwner {\r\n        rewardToken.safeTransfer(address(msg.sender), _amount);\r\n    }\r\n\r\n    /**\r\n     * @notice It allows the admin to recover wrong tokens sent to the contract\r\n     * @param _tokenAddress: the address of the token to withdraw\r\n     * @param _tokenAmount: the number of tokens to withdraw\r\n     * @dev This function is only callable by admin.\r\n     */\r\n    function recoverWrongTokens(address _tokenAddress, uint256 _tokenAmount) external onlyOwner {\r\n        require(_tokenAddress != address(stakedToken), \"Cannot be staked token\");\r\n        require(_tokenAddress != address(rewardToken), \"Cannot be reward token\");\r\n\r\n        IERC20(_tokenAddress).safeTransfer(address(msg.sender), _tokenAmount);\r\n\r\n        emit AdminTokenRecovery(_tokenAddress, _tokenAmount);\r\n    }\r\n\r\n    /*\r\n     * @notice Stop rewards\r\n     * @dev Only callable by owner\r\n     */\r\n    function stopReward() external onlyOwner {\r\n        bonusEndBlock = block.number;\r\n    }\r\n\r\n    /*\r\n     * @notice Update pool limit per user\r\n     * @dev Only callable by owner.\r\n     * @param _hasUserLimit: whether the limit remains forced\r\n     * @param _poolLimitPerUser: new pool limit per user\r\n     */\r\n    function updatePoolLimitPerUser(bool _hasUserLimit, uint256 _poolLimitPerUser) external onlyOwner {\r\n        require(hasUserLimit, \"Must be set\");\r\n        if (_hasUserLimit) {\r\n            require(_poolLimitPerUser > poolLimitPerUser, \"New limit must be higher\");\r\n            poolLimitPerUser = _poolLimitPerUser;\r\n        } else {\r\n            hasUserLimit = _hasUserLimit;\r\n            poolLimitPerUser = 0;\r\n        }\r\n        emit NewPoolLimit(poolLimitPerUser);\r\n    }\r\n\r\n    /*\r\n     * @notice Update reward per block\r\n     * @dev Only callable by owner.\r\n     * @param _rewardPerBlock: the reward per block\r\n     */\r\n    function updateRewardPerBlock(uint256 _rewardPerBlock) external onlyOwner {\r\n        require(block.number < startBlock, \"Pool has started\");\r\n        rewardPerBlock = _rewardPerBlock;\r\n        emit NewRewardPerBlock(_rewardPerBlock);\r\n    }\r\n\r\n    /**\r\n     * @notice It allows the admin to update start and end blocks\r\n     * @dev This function is only callable by owner.\r\n     * @param _startBlock: the new start block\r\n     * @param _bonusEndBlock: the new end block\r\n     */\r\n    function updateStartAndEndBlocks(uint256 _startBlock, uint256 _bonusEndBlock) external onlyOwner {\r\n        require(block.number < startBlock, \"Pool has started\");\r\n        require(_startBlock < _bonusEndBlock, \"New startBlock must be lower than new endBlock\");\r\n        require(block.number < _startBlock, \"New startBlock must be higher than current block\");\r\n\r\n        startBlock = _startBlock;\r\n        bonusEndBlock = _bonusEndBlock;\r\n\r\n        // Set the lastRewardBlock as the startBlock\r\n        lastRewardBlock = startBlock;\r\n\r\n        emit NewStartAndEndBlocks(_startBlock, _bonusEndBlock);\r\n    }\r\n\r\n    /*\r\n     * @notice View function to see pending reward on frontend.\r\n     * @param _user: user address\r\n     * @return Pending reward for a given user\r\n     */\r\n    function pendingReward(address _user) external view returns (uint256) {\r\n        UserInfo storage user = userInfo[_user];\r\n        uint256 stakedTokenSupply = stakedToken.balanceOf(address(this));\r\n        if (block.number > lastRewardBlock && stakedTokenSupply != 0) {\r\n            uint256 multiplier = _getMultiplier(lastRewardBlock, block.number);\r\n            uint256 emoReward = multiplier.mul(rewardPerBlock);\r\n            uint256 adjustedTokenPerShare =\r\n            accTokenPerShare.add(emoReward.mul(PRECISION_FACTOR).div(stakedTokenSupply));\r\n            return user.amount.mul(adjustedTokenPerShare).div(PRECISION_FACTOR).sub(user.rewardDebt);\r\n        } else {\r\n            return user.amount.mul(accTokenPerShare).div(PRECISION_FACTOR).sub(user.rewardDebt);\r\n        }\r\n    }\r\n\r\n    /*\r\n     * @notice Update reward variables of the given pool to be up-to-date.\r\n     */\r\n    function _updatePool() internal {\r\n        if (block.number <= lastRewardBlock) {\r\n            return;\r\n        }\r\n\r\n        uint256 stakedTokenSupply = stakedToken.balanceOf(address(this));\r\n\r\n        if (stakedTokenSupply == 0) {\r\n            lastRewardBlock = block.number;\r\n            return;\r\n        }\r\n\r\n        uint256 multiplier = _getMultiplier(lastRewardBlock, block.number);\r\n        uint256 emoReward = multiplier.mul(rewardPerBlock);\r\n        accTokenPerShare = accTokenPerShare.add(emoReward.mul(PRECISION_FACTOR).div(stakedTokenSupply));\r\n        lastRewardBlock = block.number;\r\n    }\r\n\r\n    /*\r\n     * @notice Return reward multiplier over the given _from to _to block.\r\n     * @param _from: block to start\r\n     * @param _to: block to finish\r\n     */\r\n    function _getMultiplier(uint256 _from, uint256 _to) internal view returns (uint256) {\r\n        if (_to <= bonusEndBlock) {\r\n            return _to.sub(_from);\r\n        } else if (_from >= bonusEndBlock) {\r\n            return 0;\r\n        } else {\r\n            return bonusEndBlock.sub(_from);\r\n        }\r\n    }\r\n}"
    },
    "contracts/tools/MerkleDistributor.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.6.12;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/cryptography/MerkleProof.sol\";\r\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\r\n\r\ncontract MerkleDistributor {\r\n    using SafeMath for uint256;\r\n\r\n    address public immutable token;\r\n    bytes32 public immutable merkleRoot;\r\n\r\n    // time to start claiming\r\n    uint256 public immutable startTime;\r\n    // duration in seconds for 50% penalty after start\r\n    uint256 public immutable penaltyDuration;\r\n    // This is a packed array of booleans.\r\n    mapping(uint256 => uint256) private collectedBitMap;\r\n    // amount of token collected by user\r\n    mapping(address => uint256) public collectedAmount;\r\n    mapping(address => uint256) public collectedTime;\r\n    // amount of token claimed by user\r\n    mapping(address => uint256) public claimedAmount;\r\n    // total unclaimed amount at beginning\r\n    uint256 public totalUnclaimed;\r\n    // total penalty\r\n    uint256 public totalPenalty;\r\n\r\n    // This event is triggered whenever a call to #collect succeeds.\r\n    event Collected(uint256 index, address account, uint256 amount, uint256 adjustAmount);\r\n\r\n    constructor(address token_, bytes32 merkleRoot_, uint256 _startTime, uint256 _penaltyDuration) public {\r\n        token = token_;\r\n        merkleRoot = merkleRoot_;\r\n        startTime = _startTime;\r\n        penaltyDuration = _penaltyDuration;\r\n    }\r\n\r\n    function isCollected(uint256 index) public view returns (bool) {\r\n        uint256 collectedWordIndex = index / 256;\r\n        uint256 collectedBitIndex = index % 256;\r\n        uint256 collectedWord = collectedBitMap[collectedWordIndex];\r\n        uint256 mask = (1 << collectedBitIndex);\r\n        return collectedWord & mask == mask;\r\n    }\r\n\r\n    function _setCollected(uint256 index) private {\r\n        uint256 collectedWordIndex = index / 256;\r\n        uint256 collectedBitIndex = index % 256;\r\n        collectedBitMap[collectedWordIndex] = collectedBitMap[collectedWordIndex] | (1 << collectedBitIndex);\r\n    }\r\n\r\n    function claim(uint256 index, address account, uint256 amount, bytes32[] calldata merkleProof) external {\r\n        require(block.timestamp >= startTime, \"MerkleDistributor: Not start.\");\r\n        require(!isCollected(index), 'MerkleDistributor: Drop already collected.');\r\n\r\n        // Verify the merkle proof.\r\n        bytes32 node = keccak256(abi.encodePacked(index, account, amount));\r\n        require(MerkleProof.verify(merkleProof, merkleRoot, node), 'MerkleDistributor: Invalid proof.');\r\n\r\n        // Mark it collected and send the token.\r\n        _setCollected(index);\r\n\r\n        // calculate penalty\r\n        uint256 adjustAmount;\r\n        if (block.timestamp < startTime.add(penaltyDuration)) {\r\n            adjustAmount = amount / 2;\r\n            totalUnclaimed = totalUnclaimed.sub(amount);\r\n            totalPenalty = totalPenalty.add(amount - adjustAmount);\r\n        } else {\r\n            adjustAmount = adjustAmount.add(totalPenalty.mul(amount).div(totalUnclaimed));\r\n        }\r\n\r\n        if (adjustAmount > 0) {\r\n            require(IERC20(token).transfer(msg.sender, adjustAmount), 'MerkleDistributor: Transfer failed.');\r\n        }\r\n        emit Collected(index, account, amount, adjustAmount);\r\n    }\r\n}\r\n"
    },
    "@openzeppelin/contracts/cryptography/MerkleProof.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev These functions deal with verification of Merkle trees (hash trees),\n */\nlibrary MerkleProof {\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     */\n    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\n        bytes32 computedHash = leaf;\n\n        for (uint256 i = 0; i < proof.length; i++) {\n            bytes32 proofElement = proof[i];\n\n            if (computedHash <= proofElement) {\n                // Hash(current computed hash + current element of the proof)\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\n            } else {\n                // Hash(current element of the proof + current computed hash)\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\n            }\n        }\n\n        // Check if the computed hash (root) is equal to the provided root\n        return computedHash == root;\n    }\n}\n"
    },
    "contracts/staking/StakingPoolFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.6.12;\r\n\r\nimport \"./StakingPoolInitializable.sol\";\r\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\r\n\r\ncontract StakingPoolFactory is Ownable {\r\n    event NewStakingPoolContract(address indexed stakingPool);\r\n\r\n    constructor() public {\r\n        //\r\n    }\r\n\r\n    /*\r\n     * @notice Deploy the pool\r\n     * @param _stakedToken: staked token address\r\n     * @param _rewardToken: reward token address\r\n     * @param _rewardPerBlock: reward per block (in rewardToken)\r\n     * @param _startBlock: start block\r\n     * @param _endBlock: end block\r\n     * @param _poolLimitPerUser: pool limit per user in stakedToken (if any, else 0)\r\n     * @param _admin: admin address with ownership\r\n     * @return address of new smart chef contract\r\n     */\r\n    function deployPool(\r\n        IERC20 _stakedToken,\r\n        IERC20 _rewardToken,\r\n        uint256 _rewardPerBlock,\r\n        uint256 _startBlock,\r\n        uint256 _bonusEndBlock,\r\n        uint256 _poolLimitPerUser,\r\n        address _admin\r\n    ) external onlyOwner {\r\n        require(_stakedToken.totalSupply() >= 0);\r\n        require(_rewardToken.totalSupply() >= 0);\r\n        require(_stakedToken != _rewardToken, \"Tokens must be be different\");\r\n\r\n        bytes memory bytecode = type(StakingPoolInitializable).creationCode;\r\n        bytes32 salt = keccak256(abi.encodePacked(_stakedToken, _rewardToken, _startBlock));\r\n        address stakingPoolAddress;\r\n\r\n        assembly {\r\n            stakingPoolAddress := create2(0, add(bytecode, 32), mload(bytecode), salt)\r\n        }\r\n\r\n        StakingPoolInitializable(stakingPoolAddress).initialize(\r\n            _stakedToken,\r\n            _rewardToken,\r\n            _rewardPerBlock,\r\n            _startBlock,\r\n            _bonusEndBlock,\r\n            _poolLimitPerUser,\r\n            _admin\r\n        );\r\n\r\n        emit NewStakingPoolContract(stakingPoolAddress);\r\n    }\r\n}"
    },
    "contracts/staking/RewardPool.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.6.12;\r\n\r\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/utils/Pausable.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\r\nimport \"../interfaces/IMasterChef.sol\";\r\nimport \"../interfaces/IOnwardIncentivesController.sol\";\r\n\r\ncontract RewardPool is Ownable {\r\n    using SafeERC20 for IERC20;\r\n    using SafeMath for uint256;\r\n\r\n    struct UserInfo {\r\n        uint256 amount;\r\n        uint256 rewardDebt;\r\n    }\r\n\r\n    IMasterChef public immutable masterchef;\r\n\r\n    // Staking token\r\n    IERC20 public immutable stakingToken;\r\n    // Reward token\r\n    IERC20 public immutable rewardToken;\r\n    uint256 public rewardPerTokenStored;\r\n    // Info of each user that stakes LP tokens.\r\n    mapping(address => UserInfo) public userInfo;\r\n    // address of votingEscrow\r\n    address public immutable operator;\r\n    // bonus reward\r\n    IOnwardIncentivesController incentivesController;\r\n\r\n    event Deposit(address indexed user, uint256 amount);\r\n    event Withdraw(address indexed user, uint256 amount);\r\n    event EmergencyWithdraw(address indexed user, uint256 amount);\r\n    event Harvest(address indexed from, address indexed to, uint256 t);\r\n\r\n    /**\r\n     * @notice Constructor\r\n     * @param _stakingToken: Staking token contract\r\n     * @param _rewardToken: Rewarding token contract\r\n     * @param _masterchef: MasterChef contract\r\n     * @param _operator: address of the operator\r\n     */\r\n    constructor(\r\n        IERC20 _stakingToken,\r\n        IERC20 _rewardToken,\r\n        IMasterChef _masterchef,\r\n        address _operator\r\n    ) public {\r\n        stakingToken = _stakingToken;\r\n        rewardToken = _rewardToken;\r\n        masterchef = _masterchef;\r\n        operator = _operator;\r\n\r\n        // Infinite approve\r\n        IERC20(_stakingToken).safeApprove(address(_masterchef), uint256(~0));\r\n    }\r\n\r\n    // only votingEscrow\r\n    modifier onlyOperator() {\r\n        require(msg.sender == operator, \"!operator\");\r\n        _;\r\n    }\r\n\r\n    function setIncentivesController(IOnwardIncentivesController _incentivesController) external onlyOwner {\r\n        incentivesController = _incentivesController;\r\n    }\r\n\r\n    function depositFor(address _user, uint256 _amount) external onlyOperator returns (bool) {\r\n        UserInfo storage user = userInfo[_user];\r\n\r\n        // reward balance before deposit\r\n        uint256 rewardBalanceBefore = rewardToken.balanceOf(address(this));\r\n\r\n        // deposit\r\n        (uint256 poolAmountBeforeDeposit,,) = masterchef.userInfo(0, address(this));\r\n        uint _userAmountBeforeDeposit = user.amount;\r\n        if (_amount > 0) {\r\n            stakingToken.safeTransferFrom(msg.sender, address(this), _amount);\r\n            user.amount = _userAmountBeforeDeposit.add(_amount);\r\n        }\r\n        masterchef.enterStaking(_amount);\r\n\r\n        // reward token received\r\n        uint256 rewardTokenReceived = rewardToken.balanceOf(address(this)).sub(rewardBalanceBefore);\r\n\r\n        // update reward info\r\n        uint _rewardPerTokenStored = rewardPerTokenStored;\r\n        if (rewardTokenReceived != 0 && poolAmountBeforeDeposit != 0) {\r\n            _rewardPerTokenStored = _rewardPerTokenStored.add(rewardTokenReceived.mul(1e12).div(poolAmountBeforeDeposit));\r\n        }\r\n\r\n        // send reward\r\n        uint _rewardAmount = _rewardPerTokenStored * _userAmountBeforeDeposit / 1e12 - user.rewardDebt;\r\n        if (_rewardAmount > 0) {\r\n            rewardToken.safeTransfer(_user, _rewardAmount);\r\n        }\r\n        user.rewardDebt = _rewardPerTokenStored * (_userAmountBeforeDeposit + _amount) / 1e12;\r\n        rewardPerTokenStored = _rewardPerTokenStored;\r\n\r\n        // bonus\r\n        if (address(incentivesController) != address(0)) {\r\n            incentivesController.onReward(_user, user.amount);\r\n        }\r\n\r\n        emit Deposit(_user, _amount);\r\n        return true;\r\n    }\r\n\r\n    function withdrawFor(address _user, uint256 _amount) external onlyOperator returns (bool) {\r\n        return _withdraw(_user, msg.sender, _amount);\r\n    }\r\n\r\n    function harvest(address _user) external {\r\n        _withdraw(_user, operator, 0);\r\n        emit Harvest(msg.sender, _user, block.timestamp);\r\n    }\r\n\r\n    function emergencyWithdraw(address _user) external onlyOperator {\r\n        masterchef.emergencyWithdraw(0);\r\n        UserInfo storage user = userInfo[_user];\r\n        stakingToken.safeTransfer(address(msg.sender), user.amount);\r\n        emit EmergencyWithdraw(_user, user.amount);\r\n        user.amount = 0;\r\n        user.rewardDebt = 0;\r\n    }\r\n\r\n    function _withdraw(address from, address to, uint256 _amount) internal returns (bool) {\r\n        require(to != address(this), \"!To\");\r\n        UserInfo storage user = userInfo[from];\r\n\r\n        // reward balance before deposit\r\n        uint256 rewardBalanceBefore = rewardToken.balanceOf(address(this));\r\n\r\n        // withdraw\r\n        (uint256 poolAmountBeforeWithdraw,,) = masterchef.userInfo(0, address(this));\r\n        uint _userAmountBeforeWithdraw = user.amount;\r\n        // adjust amount\r\n        _amount = _amount > _userAmountBeforeWithdraw ? _userAmountBeforeWithdraw : _amount;\r\n        masterchef.enterStaking(_amount);\r\n        if (_amount > 0) {\r\n            stakingToken.safeTransfer(to, _amount);\r\n            user.amount = _userAmountBeforeWithdraw - _amount;\r\n        }\r\n\r\n        // reward token received\r\n        uint256 rewardTokenReceived = rewardToken.balanceOf(address(this)).sub(rewardBalanceBefore);\r\n\r\n        // update reward info\r\n        uint _rewardPerTokenStored = rewardPerTokenStored;\r\n        if (rewardTokenReceived != 0 && poolAmountBeforeWithdraw != 0) {\r\n            _rewardPerTokenStored = _rewardPerTokenStored.add(rewardTokenReceived.mul(1e12).div(poolAmountBeforeWithdraw));\r\n        }\r\n\r\n        // send reward\r\n        uint _rewardAmount = _rewardPerTokenStored * _userAmountBeforeWithdraw / 1e12 - user.rewardDebt;\r\n        if (_rewardAmount > 0) {\r\n            rewardToken.safeTransfer(from, _rewardAmount);\r\n        }\r\n        user.rewardDebt = _rewardPerTokenStored * (_userAmountBeforeWithdraw - _amount) / 1e12;\r\n        rewardPerTokenStored = _rewardPerTokenStored;\r\n\r\n        // bonus\r\n        if (address(incentivesController) != address(0)) {\r\n            incentivesController.onReward(from, user.amount);\r\n        }\r\n\r\n        emit Withdraw(from, _amount);\r\n        return true;\r\n    }\r\n\r\n    function pendingTokens(address _user) external view returns (address[] memory tokens, uint[] memory amounts) {\r\n        uint incentives = 0;\r\n        address _incentivesControllerAddr = address(incentivesController);\r\n        while (_incentivesControllerAddr != address(0)) {\r\n            incentives++;\r\n            _incentivesControllerAddr = IOnwardIncentivesController(_incentivesControllerAddr).getNextIncentivesController();\r\n        }\r\n\r\n        tokens = new address[](incentives + 1);\r\n        amounts = new uint[](incentives + 1);\r\n\r\n        // 0 -> rewardToken\r\n        (uint256 poolAmount,,) = masterchef.userInfo(0, address(this));\r\n        (, uint[] memory _amounts) = masterchef.pendingTokens(0, address(this));\r\n        uint _rewardPerTokenStored = rewardPerTokenStored;\r\n        if (_amounts[0] != 0 && poolAmount != 0) {\r\n            _rewardPerTokenStored = _rewardPerTokenStored.add(_amounts[0].mul(1e12).div(poolAmount));\r\n        }\r\n        tokens[0] = address(rewardToken);\r\n        amounts[0] = _rewardPerTokenStored * userInfo[_user].amount / 1e12 - userInfo[_user].rewardDebt;\r\n\r\n        // bonus\r\n        uint i = 1;\r\n        IOnwardIncentivesController _incentivesController = incentivesController;\r\n        while (address(_incentivesController) != address(0)) {\r\n            tokens[i] = address(_incentivesController.rewardToken());\r\n            amounts[i] = _incentivesController.pendingTokens(_user);\r\n            _incentivesController = IOnwardIncentivesController(_incentivesController.getNextIncentivesController());\r\n            i++;\r\n        }\r\n    }\r\n}"
    },
    "@openzeppelin/contracts/utils/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"./Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor () internal {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "contracts/staking/MasterChef.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.6.12;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\r\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\r\nimport \"./EMOToken.sol\";\r\nimport \"../interfaces/IOnwardIncentivesController.sol\";\r\nimport \"../interfaces/IMultiFeeDistribution.sol\";\r\n\r\ncontract MasterChef is Ownable, ReentrancyGuard {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    // Info of each user.\r\n    struct UserInfo {\r\n        uint256 amount;     // How many LP tokens the user has provided.\r\n        uint256 workingAmount; // Take voting power into consideration\r\n        uint256 rewardDebt; // Reward debt. See explanation below.\r\n    }\r\n\r\n    // Info of each pool.\r\n    struct PoolInfo {\r\n        IERC20 lpToken;           // Address of LP token contract.\r\n        uint256 workingSupply;      // Take voting power into consideration\r\n        bool boost;\r\n        uint256 allocPoint;       // How many allocation points assigned to this pool. EMOs to distribute per second.\r\n        uint256 lastRewardTime;  // Last second number that EMOs distribution occurs.\r\n        uint256 accEmoPerShare; // Accumulated EMOs per share, times 1e12. See below.\r\n        uint256 depositFeePercent;      // Deposit fee in basis points\r\n        IOnwardIncentivesController incentivesController; // bonus reward\r\n    }\r\n\r\n    // 40/100=2.5X\r\n    uint256 public constant TOKENLESS_PRODUCTION = 40;\r\n\r\n    // The EMO TOKEN!\r\n    EMOToken public emo;\r\n    //Pools, Farms, DAO, Refs percent decimals\r\n    uint256 public percentDec = 1000000;\r\n    //Pools and Farms percent from token per block\r\n    uint256 public stakingPercent;\r\n    //DAO percent from token per block\r\n    uint256 public daoPercent;\r\n    //Safu fund percent from token per block\r\n    uint256 public safuPercent;\r\n    //Referrals percent from token per block\r\n    uint256 public refPercent;\r\n    // DAO address.\r\n    address public daoAddr;\r\n    // Safu fund.\r\n    address public safuAddr;\r\n    // Refferals commision address.\r\n    address public refAddr;\r\n    // Deposit Fee address\r\n    address public feeAddr;\r\n    // Last block then deployer withdraw dao and ref fee\r\n    uint256 public lastTimeDaoWithdraw;\r\n    // The Reward Minter!\r\n    IMultiFeeDistribution public rewardMinter;\r\n    // Voting power\r\n    address public votingEscrow;\r\n    // EMO tokens created per second.\r\n    uint256 public emoPerSecond;\r\n    // Bonus muliplier for early emo makers.\r\n    uint256 public BONUS_MULTIPLIER = 1;\r\n\r\n    // Info of each pool.\r\n    PoolInfo[] public poolInfo;\r\n    // Info of each user that stakes LP tokens.\r\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\r\n    mapping(IERC20 => bool) public poolExistence;\r\n    // Total allocation points. Must be the sum of all allocation points in all pools.\r\n    uint256 public totalAllocPoint = 0;\r\n    // The second number when EMO mining starts.\r\n    uint256 public startTime;\r\n    // Only EOA or contract whitelisted is allowed to deposit\r\n    bool public whitelistable;\r\n    mapping(address => bool) public whitelist;\r\n    // Only user whitelisted is allowed to deposit pool 0\r\n    mapping(address => bool) pool0Staker;\r\n\r\n    event Add(uint256 indexed pid, uint256 allocPoint, IERC20 indexed lpToken, IOnwardIncentivesController indexed incentivesController, bool boost);\r\n    event Set(uint256 indexed pid, uint256 allocPoint, IOnwardIncentivesController indexed incentivesController);\r\n    event Deposit(address indexed from, address indexed to, uint256 indexed pid, uint256 amount);\r\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\r\n    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\r\n\r\n    modifier nonDuplicated(IERC20 _lpToken) {\r\n        require(poolExistence[_lpToken] == false, \"nonDuplicated: duplicated\");\r\n        _;\r\n    }\r\n\r\n    constructor(\r\n        EMOToken _emo,\r\n        uint256 _stakingPercent,\r\n        uint256 _daoPercent,\r\n        uint256 _safuPercent,\r\n        uint256 _refPercent,\r\n        address _daoAddr,\r\n        address _safuAddr,\r\n        address _refAddr,\r\n        address _feeAddr,\r\n        IMultiFeeDistribution _rewardMinter,\r\n        uint256 _emoPerSecond,\r\n        address _votingEscrow\r\n    ) public {\r\n        emo = _emo;\r\n        stakingPercent = _stakingPercent;\r\n        daoPercent = _daoPercent;\r\n        safuPercent = _safuPercent;\r\n        refPercent = _refPercent;\r\n        daoAddr = _daoAddr;\r\n        safuAddr = _safuAddr;\r\n        refAddr = _refAddr;\r\n        feeAddr = _feeAddr;\r\n        rewardMinter = _rewardMinter;\r\n        emoPerSecond = _emoPerSecond;\r\n        votingEscrow = _votingEscrow;\r\n        whitelistable = true;\r\n    }\r\n\r\n    function setStartTime(uint256 _startTime) public onlyOwner {\r\n        require(startTime == 0, \"startTime has been set\");\r\n        startTime = _startTime;\r\n\r\n        // staking pool\r\n        poolInfo.push(PoolInfo({\r\n            lpToken : emo,\r\n            workingSupply : 0,\r\n            boost : false,\r\n            allocPoint : 100,\r\n            lastRewardTime : startTime,\r\n            accEmoPerShare : 0,\r\n            depositFeePercent : 0,\r\n            incentivesController : IOnwardIncentivesController(address(0))\r\n        }));\r\n\r\n        poolExistence[emo] = true;\r\n        totalAllocPoint = 100;\r\n\r\n    }\r\n\r\n    function updateMultiplier(uint256 multiplierNumber) public onlyOwner {\r\n        BONUS_MULTIPLIER = multiplierNumber;\r\n    }\r\n\r\n    function poolLength() external view returns (uint256) {\r\n        return poolInfo.length;\r\n    }\r\n\r\n    function toggleWhitelistable() external onlyOwner {\r\n        whitelistable = !whitelistable;\r\n    }\r\n\r\n    function setWhitelist(address [] memory _users, bool _flag) external onlyOwner {\r\n        for (uint i = 0; i < _users.length; i++) {\r\n            whitelist[_users[i]] = _flag;\r\n        }\r\n    }\r\n\r\n    function setPool0Staker(address [] memory _users, bool _flag) external onlyOwner {\r\n        for (uint i = 0; i < _users.length; i++) {\r\n            pool0Staker[_users[i]] = _flag;\r\n        }\r\n    }\r\n\r\n    function withdrawDevAndRefFee() public {\r\n        require(lastTimeDaoWithdraw < block.timestamp, 'wait for new block');\r\n        uint256 multiplier = getMultiplier(lastTimeDaoWithdraw, block.timestamp);\r\n        uint256 emoReward = multiplier.mul(emoPerSecond);\r\n        emo.mint(daoAddr, emoReward.mul(daoPercent).div(percentDec));\r\n        emo.mint(safuAddr, emoReward.mul(safuPercent).div(percentDec));\r\n        emo.mint(refAddr, emoReward.mul(refPercent).div(percentDec));\r\n        lastTimeDaoWithdraw = block.timestamp;\r\n    }\r\n\r\n    // Add a new lp to the pool. Can only be called by the owner.\r\n    // XXX DO NOT add the same LP token more than once. Rewards will be messed up if you do.\r\n    function add(uint256 _allocPoint, uint256 _depositFeePercent, IERC20 _lpToken, IOnwardIncentivesController _incentivesController, bool _boost, bool _withUpdate) public onlyOwner nonDuplicated(_lpToken) {\r\n        require(_depositFeePercent <= percentDec, \"set: invalid deposit fee basis points\");\r\n        require(startTime != 0, \"!startTime\");\r\n        if (_withUpdate) {\r\n            massUpdatePools();\r\n        }\r\n\r\n        uint256 lastRewardTime = block.timestamp > startTime ? block.timestamp : startTime;\r\n        totalAllocPoint = totalAllocPoint.add(_allocPoint);\r\n        poolExistence[_lpToken] = true;\r\n        poolInfo.push(PoolInfo({\r\n            lpToken : _lpToken,\r\n            workingSupply : 0,\r\n            boost : _boost,\r\n            allocPoint : _allocPoint,\r\n            lastRewardTime : lastRewardTime,\r\n            accEmoPerShare : 0,\r\n            depositFeePercent : _depositFeePercent,\r\n            incentivesController : _incentivesController\r\n        }));\r\n        emit Add(poolInfo.length.sub(1), _allocPoint, _lpToken, _incentivesController, _boost);\r\n    }\r\n\r\n    // Update the given pool's EMO allocation point. Can only be called by the owner.\r\n    function set(uint256 _pid, uint256 _allocPoint, uint256 _depositFeePercent, IOnwardIncentivesController _incentivesController, bool _withUpdate) public onlyOwner {\r\n        require(_depositFeePercent <= percentDec, \"set: invalid deposit fee basis points\");\r\n        require(startTime != 0, \"!startTime\");\r\n        require(_pid != 0 || address(_incentivesController) == address(0), \"!incentive\");\r\n        if (_withUpdate) {\r\n            massUpdatePools();\r\n        }\r\n        uint256 prevAllocPoint = poolInfo[_pid].allocPoint;\r\n        poolInfo[_pid].allocPoint = _allocPoint;\r\n        poolInfo[_pid].depositFeePercent = _depositFeePercent;\r\n        poolInfo[_pid].incentivesController = _incentivesController;\r\n        if (prevAllocPoint != _allocPoint) {\r\n            totalAllocPoint = totalAllocPoint.sub(prevAllocPoint).add(_allocPoint);\r\n        }\r\n        emit Set(_pid, _allocPoint, _incentivesController);\r\n    }\r\n\r\n    // Return reward multiplier over the given _from to _to second.\r\n    function getMultiplier(uint256 _from, uint256 _to) public view returns (uint256) {\r\n        return _to.sub(_from).mul(BONUS_MULTIPLIER);\r\n    }\r\n\r\n\r\n    function pendingTokens(uint256 _pid, address _user) external view returns (address[] memory tokens, uint[] memory amounts) {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][_user];\r\n\r\n        uint incentives = 0;\r\n        address _incentivesControllerAddr = address(pool.incentivesController);\r\n        while (_incentivesControllerAddr != address(0)) {\r\n            incentives++;\r\n            _incentivesControllerAddr = IOnwardIncentivesController(_incentivesControllerAddr).getNextIncentivesController();\r\n        }\r\n\r\n        tokens = new address[](incentives + 1);\r\n        amounts = new uint[](incentives + 1);\r\n\r\n        uint256 accEmoPerShare = pool.accEmoPerShare;\r\n        uint256 lpSupply = pool.workingSupply;\r\n        if (block.timestamp > pool.lastRewardTime && lpSupply != 0) {\r\n            uint256 multiplier = getMultiplier(pool.lastRewardTime, block.timestamp);\r\n            uint256 emoReward = multiplier.mul(emoPerSecond).mul(pool.allocPoint).div(totalAllocPoint).mul(stakingPercent).div(percentDec);\r\n            accEmoPerShare = accEmoPerShare.add(emoReward.mul(1e12).div(lpSupply));\r\n        }\r\n        tokens[0] = address(emo);\r\n        amounts[0] = user.workingAmount.mul(accEmoPerShare).div(1e12).sub(user.rewardDebt);\r\n\r\n        // bonus\r\n        uint i = 1;\r\n        IOnwardIncentivesController _incentivesController = pool.incentivesController;\r\n        while (address(_incentivesController) != address(0)) {\r\n            tokens[i] = address(_incentivesController.rewardToken());\r\n            amounts[i] = _incentivesController.pendingTokens(_user);\r\n            _incentivesController = IOnwardIncentivesController(_incentivesController.getNextIncentivesController());\r\n            i++;\r\n        }\r\n    }\r\n\r\n    // Update reward variables for all pools. Be careful of gas spending!\r\n    function massUpdatePools() public {\r\n        uint256 length = poolInfo.length;\r\n        for (uint256 pid = 0; pid < length; ++pid) {\r\n            updatePool(pid);\r\n        }\r\n    }\r\n\r\n    // Update reward variables of the given pool to be up-to-date.\r\n    function updatePool(uint256 _pid) public {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        if (block.timestamp <= pool.lastRewardTime) {\r\n            return;\r\n        }\r\n        uint256 lpSupply = pool.workingSupply;\r\n        if (lpSupply == 0) {\r\n            pool.lastRewardTime = block.timestamp;\r\n            return;\r\n        }\r\n        uint256 multiplier = getMultiplier(pool.lastRewardTime, block.timestamp);\r\n        uint256 emoReward = multiplier.mul(emoPerSecond).mul(pool.allocPoint).div(totalAllocPoint).mul(stakingPercent).div(percentDec);\r\n        pool.accEmoPerShare = pool.accEmoPerShare.add(emoReward.mul(1e12).div(lpSupply));\r\n        pool.lastRewardTime = block.timestamp;\r\n    }\r\n\r\n    // Deposit LP tokens to MasterChef for EMO allocation for _user\r\n    function depositFor(address _user, uint256 _pid, uint256 _amount) public nonReentrant {\r\n        require(!whitelistable || !_isContract(_user) || whitelist[_user], \"Contract is not in the whitelist\");\r\n        require(_pid != 0, 'deposit EMO by staking');\r\n\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][_user];\r\n        updatePool(_pid);\r\n        if (user.workingAmount > 0) {\r\n            uint256 pending = user.workingAmount.mul(pool.accEmoPerShare).div(1e12).sub(user.rewardDebt);\r\n            if (pending > 0) {\r\n                rewardMinter.mint(_user, pending, true);\r\n            }\r\n        }\r\n        if (_amount > 0) {\r\n            uint256 balanceBefore = pool.lpToken.balanceOf(address(this));\r\n            pool.lpToken.safeTransferFrom(address(msg.sender), address(this), _amount);\r\n            _amount = pool.lpToken.balanceOf(address(this)).sub(balanceBefore);\r\n            if (pool.depositFeePercent > 0) {\r\n                uint256 depositFee = _amount.mul(pool.depositFeePercent).div(percentDec);\r\n                pool.lpToken.safeTransfer(feeAddr, depositFee);\r\n                _amount = _amount.sub(depositFee);\r\n            }\r\n            user.amount = user.amount.add(_amount);\r\n        }\r\n\r\n        if (pool.boost) {\r\n            uint256 votingBalance = IERC20(votingEscrow).balanceOf(_user);\r\n            uint256 votingTotal = IERC20(votingEscrow).totalSupply();\r\n            uint256 lim = user.amount * TOKENLESS_PRODUCTION / 100;\r\n            if (votingTotal > 0) {\r\n                lim += pool.lpToken.balanceOf(address(this)) * votingBalance / votingTotal * (100 - TOKENLESS_PRODUCTION) / 100;\r\n            }\r\n            lim = user.amount < lim ? user.amount : lim;\r\n            pool.workingSupply = pool.workingSupply + lim - user.workingAmount;\r\n            user.workingAmount = lim;\r\n        } else {\r\n            pool.workingSupply = pool.workingSupply + user.amount - user.workingAmount;\r\n            user.workingAmount = user.amount;\r\n        }\r\n\r\n        user.rewardDebt = user.workingAmount.mul(pool.accEmoPerShare).div(1e12);\r\n\r\n        // Interactions\r\n        IOnwardIncentivesController _incentivesController = pool.incentivesController;\r\n        if (address(_incentivesController) != address(0)) {\r\n            _incentivesController.onReward(_user, user.amount);\r\n        }\r\n\r\n        emit Deposit(msg.sender, _user, _pid, _amount);\r\n    }\r\n\r\n    // Deposit LP tokens to MasterChef for EMO allocation.\r\n    function deposit(uint256 _pid, uint256 _amount) public {\r\n        depositFor(msg.sender, _pid, _amount);\r\n    }\r\n\r\n    function harvestAllRewards(address _user) public {\r\n        uint256 length = poolInfo.length;\r\n        for (uint256 pid = 0; pid < length; ++pid) {\r\n            if (userInfo[pid][_user].amount > 0) {\r\n                _withdraw(pid, _user, 0);\r\n            }\r\n        }\r\n    }\r\n\r\n    // Withdraw LP tokens from MasterChef.\r\n    function withdraw(uint256 _pid, uint256 _amount) public {\r\n        _withdraw(_pid, msg.sender, _amount);\r\n    }\r\n\r\n    // Withdraw LP tokens from MasterChef.\r\n    function _withdraw(uint256 _pid, address _user, uint256 _amount) internal nonReentrant {\r\n        require(_pid != 0, 'withdraw EMO by unstaking');\r\n\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][_user];\r\n        require(user.amount >= _amount, \"withdraw: not good\");\r\n\r\n        updatePool(_pid);\r\n        if (user.workingAmount > 0) {\r\n            uint256 pending = user.workingAmount.mul(pool.accEmoPerShare).div(1e12).sub(user.rewardDebt);\r\n            if (pending > 0) {\r\n                rewardMinter.mint(_user, pending, true);\r\n            }\r\n        }\r\n        if (_amount > 0) {\r\n            user.amount = user.amount.sub(_amount);\r\n            pool.lpToken.safeTransfer(address(_user), _amount);\r\n        }\r\n\r\n        if (pool.boost) {\r\n            uint256 votingBalance = IERC20(votingEscrow).balanceOf(_user);\r\n            uint256 votingTotal = IERC20(votingEscrow).totalSupply();\r\n            uint256 lim = user.amount * TOKENLESS_PRODUCTION / 100;\r\n            if (votingTotal > 0) {\r\n                lim += pool.lpToken.balanceOf(address(this)) * votingBalance / votingTotal * (100 - TOKENLESS_PRODUCTION) / 100;\r\n            }\r\n            lim = user.amount < lim ? user.amount : lim;\r\n            pool.workingSupply = pool.workingSupply + lim - user.workingAmount;\r\n            user.workingAmount = lim;\r\n        } else {\r\n            pool.workingSupply = pool.workingSupply + user.amount - user.workingAmount;\r\n            user.workingAmount = user.amount;\r\n        }\r\n\r\n        user.rewardDebt = user.workingAmount.mul(pool.accEmoPerShare).div(1e12);\r\n\r\n        // Interactions\r\n        IOnwardIncentivesController _incentivesController = pool.incentivesController;\r\n        if (address(_incentivesController) != address(0)) {\r\n            _incentivesController.onReward(_user, user.amount);\r\n        }\r\n\r\n        emit Withdraw(_user, _pid, _amount);\r\n    }\r\n\r\n    // Stake EMO tokens to MasterChef\r\n    function enterStaking(uint256 _amount) public nonReentrant {\r\n        require(pool0Staker[msg.sender], \"Not allow to enterStaking\");\r\n\r\n        PoolInfo storage pool = poolInfo[0];\r\n        UserInfo storage user = userInfo[0][msg.sender];\r\n        updatePool(0);\r\n        if (user.workingAmount > 0) {\r\n            uint256 pending = user.workingAmount.mul(pool.accEmoPerShare).div(1e12).sub(user.rewardDebt);\r\n            if (pending > 0) {\r\n                emo.mint(msg.sender, pending);\r\n            }\r\n        }\r\n        if (_amount > 0) {\r\n            pool.lpToken.safeTransferFrom(address(msg.sender), address(this), _amount);\r\n            user.amount = user.amount.add(_amount);\r\n        }\r\n        pool.workingSupply = pool.workingSupply + user.amount - user.workingAmount;\r\n        user.workingAmount = user.amount;\r\n        user.rewardDebt = user.workingAmount.mul(pool.accEmoPerShare).div(1e12);\r\n\r\n        emit Deposit(msg.sender, msg.sender, 0, _amount);\r\n    }\r\n\r\n    // Withdraw EMO tokens from STAKING.\r\n    function leaveStaking(uint256 _amount) public nonReentrant {\r\n        PoolInfo storage pool = poolInfo[0];\r\n        UserInfo storage user = userInfo[0][msg.sender];\r\n        require(user.amount >= _amount, \"withdraw: not good\");\r\n        updatePool(0);\r\n        if (user.workingAmount > 0) {\r\n            uint256 pending = user.workingAmount.mul(pool.accEmoPerShare).div(1e12).sub(user.rewardDebt);\r\n            if (pending > 0) {\r\n                emo.mint(msg.sender, pending);\r\n            }\r\n        }\r\n        if (_amount > 0) {\r\n            user.amount = user.amount.sub(_amount);\r\n            pool.lpToken.safeTransfer(address(msg.sender), _amount);\r\n        }\r\n        pool.workingSupply = pool.workingSupply + user.amount - user.workingAmount;\r\n        user.workingAmount = user.amount;\r\n        user.rewardDebt = user.workingAmount.mul(pool.accEmoPerShare).div(1e12);\r\n\r\n        emit Withdraw(msg.sender, 0, _amount);\r\n    }\r\n\r\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\r\n    function emergencyWithdraw(uint256 _pid) public nonReentrant {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][msg.sender];\r\n        pool.lpToken.safeTransfer(address(msg.sender), user.amount);\r\n        emit EmergencyWithdraw(msg.sender, _pid, user.amount);\r\n        user.amount = 0;\r\n        user.rewardDebt = 0;\r\n\r\n        // working amount\r\n        if (pool.workingSupply >= user.workingAmount) {\r\n            pool.workingSupply = pool.workingSupply - user.workingAmount;\r\n        } else {\r\n            pool.workingSupply = 0;\r\n        }\r\n        user.workingAmount = 0;\r\n\r\n        // Interactions\r\n        IOnwardIncentivesController _incentivesController = pool.incentivesController;\r\n        if (address(_incentivesController) != address(0)) {\r\n            _incentivesController.onReward(msg.sender, 0);\r\n        }\r\n    }\r\n\r\n    function setEmoPerSecond(uint256 _emoPerSecond) public onlyOwner {\r\n        require(_emoPerSecond <= 6 * 1e18, \"Max per second 5 EMO\");\r\n        massUpdatePools();\r\n        emoPerSecond = _emoPerSecond;\r\n    }\r\n\r\n    function setDaoAddress(address _daoAddr) public onlyOwner {\r\n        daoAddr = _daoAddr;\r\n    }\r\n\r\n    function setRefAddress(address _refAddr) public onlyOwner {\r\n        refAddr = _refAddr;\r\n    }\r\n\r\n    function setSafuAddress(address _safuAddr) public onlyOwner {\r\n        safuAddr = _safuAddr;\r\n    }\r\n\r\n    function setFeeAddress(address _feeAddr) public onlyOwner {\r\n        require(_feeAddr != address(0), \"setFeeAddress: ZERO\");\r\n        feeAddr = _feeAddr;\r\n    }\r\n\r\n    function _isContract(address addr) internal view returns (bool) {\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(addr)\r\n        }\r\n        return size > 0;\r\n    }\r\n}"
    },
    "contracts/staking/EMOToken.sol": {
      "content": "\r\n// SPDX-License-Identifier: MIT\r\npragma solidity 0.6.12;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/utils/EnumerableSet.sol\";\r\n\r\n// EMOToken with Governance.\r\ncontract EMOToken is ERC20('EvmoSwap Token', 'EMO'), Ownable {\r\n    using EnumerableSet for EnumerableSet.AddressSet;\r\n    EnumerableSet.AddressSet private _minters;\r\n    \r\n    uint256 constant public MAX_TOTAL_SUPPLY = 500000000 * 1e18;\r\n\r\n    /// @notice Creates `_amount` token to `_to`. Must only be called by the owner (MasterChef).\r\n    function mint(address _to, uint256 _amount) public onlyMinter {\r\n        require(_amount.add(totalSupply()) <= MAX_TOTAL_SUPPLY, \"ERC20: over limit\");\r\n\r\n        _mint(_to, _amount);\r\n        _moveDelegates(address(0), _delegates[_to], _amount);\r\n    }\r\n\r\n    // Copied and modified from YAM code:\r\n    // https://github.com/yam-finance/yam-protocol/blob/master/contracts/token/YAMGovernanceStorage.sol\r\n    // https://github.com/yam-finance/yam-protocol/blob/master/contracts/token/YAMGovernance.sol\r\n    // Which is copied and modified from COMPOUND:\r\n    // https://github.com/compound-finance/compound-protocol/blob/master/contracts/Governance/Comp.sol\r\n\r\n    /// @dev A record of each accounts delegate\r\n    mapping (address => address) internal _delegates;\r\n\r\n    /// @notice A checkpoint for marking number of votes from a given block\r\n    struct Checkpoint {\r\n        uint32 fromBlock;\r\n        uint256 votes;\r\n    }\r\n\r\n    /// @notice A record of votes checkpoints for each account, by index\r\n    mapping (address => mapping (uint32 => Checkpoint)) public checkpoints;\r\n\r\n    /// @notice The number of checkpoints for each account\r\n    mapping (address => uint32) public numCheckpoints;\r\n\r\n    /// @notice The EIP-712 typehash for the contract's domain\r\n    bytes32 public constant DOMAIN_TYPEHASH = keccak256(\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\");\r\n\r\n    /// @notice The EIP-712 typehash for the delegation struct used by the contract\r\n    bytes32 public constant DELEGATION_TYPEHASH = keccak256(\"Delegation(address delegatee,uint256 nonce,uint256 expiry)\");\r\n\r\n    /// @notice A record of states for signing / validating signatures\r\n    mapping (address => uint) public nonces;\r\n\r\n    /// @notice An event thats emitted when an account changes its delegate\r\n    event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\r\n\r\n    /// @notice An event thats emitted when a delegate account's vote balance changes\r\n    event DelegateVotesChanged(address indexed delegate, uint previousBalance, uint newBalance);\r\n\r\n    /**\r\n     * @notice Delegate votes from `msg.sender` to `delegatee`\r\n     * @param delegator The address to get delegatee for\r\n     */\r\n    function delegates(address delegator)\r\n    external\r\n    view\r\n    returns (address)\r\n    {\r\n        return _delegates[delegator];\r\n    }\r\n\r\n    /**\r\n     * @notice Delegate votes from `msg.sender` to `delegatee`\r\n    * @param delegatee The address to delegate votes to\r\n    */\r\n    function delegate(address delegatee) external {\r\n        return _delegate(msg.sender, delegatee);\r\n    }\r\n\r\n    /**\r\n     * @notice Delegates votes from signatory to `delegatee`\r\n     * @param delegatee The address to delegate votes to\r\n     * @param nonce The contract state required to match the signature\r\n     * @param expiry The time at which to expire the signature\r\n     * @param v The recovery byte of the signature\r\n     * @param r Half of the ECDSA signature pair\r\n     * @param s Half of the ECDSA signature pair\r\n     */\r\n    function delegateBySig(\r\n        address delegatee,\r\n        uint nonce,\r\n        uint expiry,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    )\r\n    external\r\n    {\r\n        bytes32 domainSeparator = keccak256(\r\n            abi.encode(\r\n                DOMAIN_TYPEHASH,\r\n                keccak256(bytes(name())),\r\n                getChainId(),\r\n                address(this)\r\n            )\r\n        );\r\n\r\n        bytes32 structHash = keccak256(\r\n            abi.encode(\r\n                DELEGATION_TYPEHASH,\r\n                delegatee,\r\n                nonce,\r\n                expiry\r\n            )\r\n        );\r\n\r\n        bytes32 digest = keccak256(\r\n            abi.encodePacked(\r\n                \"\\x19\\x01\",\r\n                domainSeparator,\r\n                structHash\r\n            )\r\n        );\r\n\r\n        address signatory = ecrecover(digest, v, r, s);\r\n        require(signatory != address(0), \"EMO::delegateBySig: invalid signature\");\r\n        require(nonce == nonces[signatory]++, \"EMO::delegateBySig: invalid nonce\");\r\n        require(now <= expiry, \"EMO::delegateBySig: signature expired\");\r\n        return _delegate(signatory, delegatee);\r\n    }\r\n\r\n    /**\r\n     * @notice Gets the current votes balance for `account`\r\n     * @param account The address to get votes balance\r\n     * @return The number of current votes for `account`\r\n     */\r\n    function getCurrentVotes(address account)\r\n    external\r\n    view\r\n    returns (uint256)\r\n    {\r\n        uint32 nCheckpoints = numCheckpoints[account];\r\n        return nCheckpoints > 0 ? checkpoints[account][nCheckpoints - 1].votes : 0;\r\n    }\r\n\r\n    /**\r\n     * @notice Determine the prior number of votes for an account as of a block number\r\n     * @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\r\n     * @param account The address of the account to check\r\n     * @param blockNumber The block number to get the vote balance at\r\n     * @return The number of votes the account had as of the given block\r\n     */\r\n    function getPriorVotes(address account, uint blockNumber)\r\n    external\r\n    view\r\n    returns (uint256)\r\n    {\r\n        require(blockNumber < block.number, \"EMO::getPriorVotes: not yet determined\");\r\n\r\n        uint32 nCheckpoints = numCheckpoints[account];\r\n        if (nCheckpoints == 0) {\r\n            return 0;\r\n        }\r\n\r\n        // First check most recent balance\r\n        if (checkpoints[account][nCheckpoints - 1].fromBlock <= blockNumber) {\r\n            return checkpoints[account][nCheckpoints - 1].votes;\r\n        }\r\n\r\n        // Next check implicit zero balance\r\n        if (checkpoints[account][0].fromBlock > blockNumber) {\r\n            return 0;\r\n        }\r\n\r\n        uint32 lower = 0;\r\n        uint32 upper = nCheckpoints - 1;\r\n        while (upper > lower) {\r\n            uint32 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\r\n            Checkpoint memory cp = checkpoints[account][center];\r\n            if (cp.fromBlock == blockNumber) {\r\n                return cp.votes;\r\n            } else if (cp.fromBlock < blockNumber) {\r\n                lower = center;\r\n            } else {\r\n                upper = center - 1;\r\n            }\r\n        }\r\n        return checkpoints[account][lower].votes;\r\n    }\r\n\r\n    function _delegate(address delegator, address delegatee)\r\n    internal\r\n    {\r\n        address currentDelegate = _delegates[delegator];\r\n        uint256 delegatorBalance = balanceOf(delegator); // balance of underlying EMOs (not scaled);\r\n        _delegates[delegator] = delegatee;\r\n\r\n        emit DelegateChanged(delegator, currentDelegate, delegatee);\r\n\r\n        _moveDelegates(currentDelegate, delegatee, delegatorBalance);\r\n    }\r\n\r\n    function _moveDelegates(address srcRep, address dstRep, uint256 amount) internal {\r\n        if (srcRep != dstRep && amount > 0) {\r\n            if (srcRep != address(0)) {\r\n                // decrease old representative\r\n                uint32 srcRepNum = numCheckpoints[srcRep];\r\n                uint256 srcRepOld = srcRepNum > 0 ? checkpoints[srcRep][srcRepNum - 1].votes : 0;\r\n                uint256 srcRepNew = srcRepOld.sub(amount);\r\n                _writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew);\r\n            }\r\n\r\n            if (dstRep != address(0)) {\r\n                // increase new representative\r\n                uint32 dstRepNum = numCheckpoints[dstRep];\r\n                uint256 dstRepOld = dstRepNum > 0 ? checkpoints[dstRep][dstRepNum - 1].votes : 0;\r\n                uint256 dstRepNew = dstRepOld.add(amount);\r\n                _writeCheckpoint(dstRep, dstRepNum, dstRepOld, dstRepNew);\r\n            }\r\n        }\r\n    }\r\n\r\n    function _writeCheckpoint(\r\n        address delegatee,\r\n        uint32 nCheckpoints,\r\n        uint256 oldVotes,\r\n        uint256 newVotes\r\n    )\r\n    internal\r\n    {\r\n        uint32 blockNumber = safe32(block.number, \"EMO::_writeCheckpoint: block number exceeds 32 bits\");\r\n\r\n        if (nCheckpoints > 0 && checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber) {\r\n            checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;\r\n        } else {\r\n            checkpoints[delegatee][nCheckpoints] = Checkpoint(blockNumber, newVotes);\r\n            numCheckpoints[delegatee] = nCheckpoints + 1;\r\n        }\r\n\r\n        emit DelegateVotesChanged(delegatee, oldVotes, newVotes);\r\n    }\r\n\r\n    function safe32(uint n, string memory errorMessage) internal pure returns (uint32) {\r\n        require(n < 2**32, errorMessage);\r\n        return uint32(n);\r\n    }\r\n\r\n    function getChainId() internal pure returns (uint) {\r\n        uint256 chainId;\r\n        assembly { chainId := chainid() }\r\n        return chainId;\r\n    }\r\n\r\n    function addMinter(address _addMinter) public onlyOwner returns (bool) {\r\n        require(_addMinter != address(0), \"EMO: _addMinter is the zero address\");\r\n        return EnumerableSet.add(_minters, _addMinter);\r\n    }\r\n\r\n    function delMinter(address _delMinter) public onlyOwner returns (bool) {\r\n        require(_delMinter != address(0), \"EMO: _delMinter is the zero address\");\r\n        return EnumerableSet.remove(_minters, _delMinter);\r\n    }\r\n\r\n    function getMinterLength() public view returns (uint256) {\r\n        return EnumerableSet.length(_minters);\r\n    }\r\n\r\n    function isMinter(address account) public view returns (bool) {\r\n        return EnumerableSet.contains(_minters, account);\r\n    }\r\n\r\n    function getMinter(uint256 _index) public view onlyOwner returns (address){\r\n        require(_index <= getMinterLength() - 1, \"EMO: index out of bounds\");\r\n        return EnumerableSet.at(_minters, _index);\r\n    }\r\n\r\n    // modifier for mint function\r\n    modifier onlyMinter() {\r\n        require(isMinter(msg.sender), \"caller is not the minter\");\r\n        _;\r\n    }\r\n}"
    },
    "contracts/interfaces/IMultiFeeDistribution.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.6.12;\r\n\r\ninterface IMultiFeeDistribution {\r\n    function mint(address user, uint256 amount, bool withPenalty) external;\r\n}\r\n"
    },
    "@openzeppelin/contracts/utils/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping (bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\n\n            bytes32 lastvalue = set._values[lastIndex];\n\n            // Move the last value to the index where the value to delete is\n            set._values[toDeleteIndex] = lastvalue;\n            // Update the index for the moved value\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        require(set._values.length > index, \"EnumerableSet: index out of bounds\");\n        return set._values[index];\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n}\n"
    },
    "contracts/staking/MultiFeeDistribution.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.6.12;\r\npragma experimental ABIEncoderV2;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\r\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"../interfaces/IMultiFeeDistribution.sol\";\r\n\r\ninterface IMintableToken is IERC20 {\r\n    function mint(address _receiver, uint256 _amount) external;\r\n\r\n    function addMinter(address _minter) external returns (bool);\r\n}\r\n\r\ncontract MultiFeeDistribution is IMultiFeeDistribution, Ownable {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n    using SafeERC20 for IMintableToken;\r\n\r\n    /* ========== STATE VARIABLES ========== */\r\n    struct Balances {\r\n        uint256 total;\r\n        uint256 unlocked;\r\n        uint256 earned;\r\n    }\r\n\r\n    struct LockedBalance {\r\n        uint256 amount;\r\n        uint256 unlockTime;\r\n    }\r\n\r\n    IMintableToken public immutable stakingToken;\r\n    // Address receive penalty\r\n    address public penaltyReceiver;\r\n\r\n    // Duration that rewards are streamed over\r\n    uint256 public constant WEEK = 86400 * 7;\r\n\r\n    // Duration of lock/earned penalty period\r\n    uint256 public constant lockDuration = WEEK * 4;\r\n\r\n    // Addresses approved to call mint\r\n    mapping(address => bool) public minters;\r\n    bool public mintersAreSet;\r\n\r\n    uint256 public totalSupply;\r\n\r\n    // Private mappings for balance data\r\n    mapping(address => Balances) private balances;\r\n    mapping(address => LockedBalance[]) private userEarnings;\r\n\r\n    /* ========== CONSTRUCTOR ========== */\r\n\r\n    constructor(address _stakingToken, address _penaltyReceiver) public {\r\n        stakingToken = IMintableToken(_stakingToken);\r\n        penaltyReceiver = _penaltyReceiver;\r\n    }\r\n\r\n    /* ========== ADMIN CONFIGURATION ========== */\r\n\r\n    function setMinters(address[] memory _minters) external onlyOwner {\r\n        require(!mintersAreSet);\r\n        for (uint i; i < _minters.length; i++) {\r\n            minters[_minters[i]] = true;\r\n        }\r\n        mintersAreSet = true;\r\n    }\r\n\r\n    /* ========== VIEWS ========== */\r\n\r\n    // Total balance of an account, including unlocked, locked and earned tokens\r\n    function totalBalance(address user) view external returns (uint256 amount) {\r\n        return balances[user].total;\r\n    }\r\n\r\n    // Information on the \"earned\" balances of a user\r\n    // Earned balances may be withdrawn immediately for a 50% penalty\r\n    function earnedBalances(\r\n        address user\r\n    ) view external returns (\r\n        uint256 total,\r\n        LockedBalance[] memory earningsData,\r\n        uint256[] memory index\r\n    ) {\r\n        LockedBalance[] storage earnings = userEarnings[user];\r\n\r\n        uint256 len;\r\n        for (uint i = 0; i < earnings.length; i++) {\r\n            if (earnings[i].unlockTime > block.timestamp) {\r\n                len++;\r\n            }\r\n        }\r\n\r\n        earningsData = new LockedBalance[](len);\r\n        index = new uint256[](len);\r\n\r\n        uint256 idx;\r\n        for (uint i = 0; i < earnings.length; i++) {\r\n            if (earnings[i].unlockTime > block.timestamp) {\r\n                earningsData[idx] = earnings[i];\r\n                index[idx] = i;\r\n                idx++;\r\n                total = total.add(earnings[i].amount);\r\n            }\r\n        }\r\n\r\n        return (total, earningsData, index);\r\n    }\r\n\r\n    // Final balance received and penalty balance paid by user upon calling exit\r\n    function withdrawableBalance(\r\n        address user\r\n    ) view public returns (\r\n        uint256 amount,\r\n        uint256 amountWithoutPenalty,\r\n        uint256 penaltyAmount\r\n    ) {\r\n        Balances storage bal = balances[user];\r\n        uint256 earned = bal.earned;\r\n        if (earned > 0) {\r\n            uint256 length = userEarnings[user].length;\r\n            for (uint i = 0; i < length; i++) {\r\n                uint256 earnedAmount = userEarnings[user][i].amount;\r\n                if (earnedAmount == 0) continue;\r\n                if (userEarnings[user][i].unlockTime > block.timestamp) {\r\n                    break;\r\n                }\r\n                amountWithoutPenalty = amountWithoutPenalty.add(earnedAmount);\r\n            }\r\n\r\n            penaltyAmount = earned.sub(amountWithoutPenalty).div(2);\r\n        }\r\n        amount = bal.unlocked.add(earned).sub(penaltyAmount);\r\n        return (amount, amountWithoutPenalty, penaltyAmount);\r\n    }\r\n\r\n    /* ========== MUTATIVE FUNCTIONS ========== */\r\n\r\n    // Mint new tokens\r\n    // Minted tokens receive rewards normally but incur a 50% penalty when\r\n    // withdrawn before lockDuration has passed.\r\n    function mint(address user, uint256 amount, bool withPenalty) external override {\r\n        require(minters[msg.sender], \"!minter\");\r\n        require(user != address(this), \"self\");\r\n\r\n        if (amount == 0) {\r\n            return;\r\n        }\r\n\r\n        stakingToken.mint(address(this), amount);\r\n        totalSupply = totalSupply.add(amount);\r\n        Balances storage bal = balances[user];\r\n        bal.total = bal.total.add(amount);\r\n        if (withPenalty) {\r\n            bal.earned = bal.earned.add(amount);\r\n            uint256 unlockTime = block.timestamp.div(WEEK).mul(WEEK).add(lockDuration);\r\n            LockedBalance[] storage earnings = userEarnings[user];\r\n            uint256 idx = earnings.length;\r\n            if (idx == 0 || (earnings[idx - 1].unlockTime > 0 && earnings[idx - 1].unlockTime < unlockTime)) {\r\n                earnings.push(LockedBalance({amount : amount, unlockTime : unlockTime}));\r\n            } else {\r\n                earnings[idx - 1].amount = earnings[idx - 1].amount.add(amount);\r\n                earnings[idx - 1].unlockTime = unlockTime;\r\n            }\r\n        } else {\r\n            bal.unlocked = bal.unlocked.add(amount);\r\n        }\r\n        emit Mint(user, amount, withPenalty);\r\n    }\r\n\r\n    // Withdraw earned tokens\r\n    // First withdraws unlocked tokens, then earned tokens\r\n    // incurs a 50% penalty which is distributed based on locked balances.\r\n    function withdraw(uint256 amount) public {\r\n        require(amount > 0, \"Cannot withdraw 0\");\r\n        Balances storage bal = balances[msg.sender];\r\n        uint256 penaltyAmount;\r\n\r\n        if (amount <= bal.unlocked) {\r\n            bal.unlocked = bal.unlocked.sub(amount);\r\n        } else {\r\n            uint256 remaining = amount.sub(bal.unlocked);\r\n            require(bal.earned >= remaining, \"Insufficient unlocked balance\");\r\n            bal.unlocked = 0;\r\n            bal.earned = bal.earned.sub(remaining);\r\n            for (uint i = 0;; i++) {\r\n                uint256 earnedAmount = userEarnings[msg.sender][i].amount;\r\n                if (earnedAmount == 0) continue;\r\n                if (penaltyAmount == 0 && userEarnings[msg.sender][i].unlockTime > block.timestamp) {\r\n                    penaltyAmount = remaining;\r\n                    require(bal.earned >= remaining, \"Insufficient balance after penalty\");\r\n                    bal.earned = bal.earned.sub(remaining);\r\n                    if (bal.earned == 0) {\r\n                        delete userEarnings[msg.sender];\r\n                        break;\r\n                    }\r\n                    remaining = remaining.mul(2);\r\n                }\r\n                if (remaining <= earnedAmount) {\r\n                    userEarnings[msg.sender][i].amount = earnedAmount.sub(remaining);\r\n                    break;\r\n                } else {\r\n                    delete userEarnings[msg.sender][i];\r\n                    remaining = remaining.sub(earnedAmount);\r\n                }\r\n            }\r\n        }\r\n\r\n        uint256 adjustedAmount = amount.add(penaltyAmount);\r\n        bal.total = bal.total.sub(adjustedAmount);\r\n        totalSupply = totalSupply.sub(adjustedAmount);\r\n        stakingToken.safeTransfer(msg.sender, amount);\r\n        if (penaltyAmount > 0) {\r\n            stakingToken.safeTransfer(penaltyReceiver, penaltyAmount);\r\n        }\r\n        emit Withdrawn(msg.sender, amount, penaltyAmount);\r\n    }\r\n\r\n    // Withdraw earned tokens\r\n    // Withdraws unexpired tokens by index\r\n    // incurs a 50% penalty which is distributed based on locked balances.\r\n    function withdrawByIndex(uint256 index) public {\r\n        LockedBalance memory earnings = userEarnings[msg.sender][index];\r\n        require(earnings.amount > 0, \"Cannot withdraw 0\");\r\n        require(earnings.unlockTime > block.timestamp, \"Token should be unexpired\");\r\n\r\n        uint amount = earnings.amount;\r\n        uint256 penaltyAmount = amount / 2;\r\n        delete userEarnings[msg.sender][index];\r\n\r\n        Balances storage bal = balances[msg.sender];\r\n        bal.earned = bal.earned.sub(amount);\r\n        bal.total = bal.total.sub(amount);\r\n        totalSupply = totalSupply.sub(amount);\r\n        stakingToken.safeTransfer(msg.sender, amount.sub(penaltyAmount));\r\n        if (penaltyAmount > 0) {\r\n            stakingToken.safeTransfer(penaltyReceiver, penaltyAmount);\r\n        }\r\n        emit Withdrawn(msg.sender, amount.sub(penaltyAmount), penaltyAmount);\r\n    }\r\n\r\n    /* ========== RESTRICTED FUNCTIONS ========== */\r\n\r\n    // Added to support recovering LP Rewards from other systems such as BAL to be distributed to holders\r\n    function recoverERC20(address tokenAddress, uint256 tokenAmount) external onlyOwner {\r\n        require(tokenAddress != address(stakingToken), \"Cannot withdraw staking token\");\r\n        IERC20(tokenAddress).safeTransfer(owner(), tokenAmount);\r\n        emit Recovered(tokenAddress, tokenAmount);\r\n    }\r\n\r\n    /* ========== EVENTS ========== */\r\n\r\n    event Mint(address indexed user, uint256 amount, bool withPenalty);\r\n    event Withdrawn(address indexed user, uint256 receivedAmount, uint256 penaltyPaid);\r\n    event Recovered(address token, uint256 amount);\r\n}\r\n"
    },
    "contracts/staking/EvmoSwapBar.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.6.12;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\nimport \"./EMOToken.sol\";\r\n\r\n// EvmoSwapBar with Governance.\r\ncontract EvmoSwapBar is ERC20('EvmoSwapBar Token', 'xEMO'), Ownable {\r\n    /// @notice Creates `_amount` token to `_to`. Must only be called by the owner (MasterChef).\r\n    function mint(address _to, uint256 _amount) public onlyOwner {\r\n        _mint(_to, _amount);\r\n        _moveDelegates(address(0), _delegates[_to], _amount);\r\n    }\r\n\r\n    function burn(address _from ,uint256 _amount) public onlyOwner {\r\n        _burn(_from, _amount);\r\n        _moveDelegates(_delegates[_from], address(0), _amount);\r\n    }\r\n\r\n    // The EMO TOKEN!\r\n    EMOToken public emo;\r\n\r\n\r\n    constructor(\r\n        EMOToken _emo\r\n    ) public {\r\n        emo = _emo;\r\n    }\r\n\r\n    // Safe emo transfer function, just in case if rounding error causes pool to not have enough EMOs.\r\n    function safeEmoTransfer(address _to, uint256 _amount) public onlyOwner {\r\n        uint256 emoBal = emo.balanceOf(address(this));\r\n        if (_amount > emoBal) {\r\n            emo.transfer(_to, emoBal);\r\n        } else {\r\n            emo.transfer(_to, _amount);\r\n        }\r\n    }\r\n\r\n    // Copied and modified from YAM code:\r\n    // https://github.com/yam-finance/yam-protocol/blob/master/contracts/token/YAMGovernanceStorage.sol\r\n    // https://github.com/yam-finance/yam-protocol/blob/master/contracts/token/YAMGovernance.sol\r\n    // Which is copied and modified from COMPOUND:\r\n    // https://github.com/compound-finance/compound-protocol/blob/master/contracts/Governance/Comp.sol\r\n\r\n    /// @dev A record of each accounts delegate\r\n    mapping (address => address) internal _delegates;\r\n\r\n    /// @notice A checkpoint for marking number of votes from a given block\r\n    struct Checkpoint {\r\n        uint32 fromBlock;\r\n        uint256 votes;\r\n    }\r\n\r\n    /// @notice A record of votes checkpoints for each account, by index\r\n    mapping (address => mapping (uint32 => Checkpoint)) public checkpoints;\r\n\r\n    /// @notice The number of checkpoints for each account\r\n    mapping (address => uint32) public numCheckpoints;\r\n\r\n    /// @notice The EIP-712 typehash for the contract's domain\r\n    bytes32 public constant DOMAIN_TYPEHASH = keccak256(\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\");\r\n\r\n    /// @notice The EIP-712 typehash for the delegation struct used by the contract\r\n    bytes32 public constant DELEGATION_TYPEHASH = keccak256(\"Delegation(address delegatee,uint256 nonce,uint256 expiry)\");\r\n\r\n    /// @notice A record of states for signing / validating signatures\r\n    mapping (address => uint) public nonces;\r\n\r\n    /// @notice An event thats emitted when an account changes its delegate\r\n    event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\r\n\r\n    /// @notice An event thats emitted when a delegate account's vote balance changes\r\n    event DelegateVotesChanged(address indexed delegate, uint previousBalance, uint newBalance);\r\n\r\n    /**\r\n     * @notice Delegate votes from `msg.sender` to `delegatee`\r\n     * @param delegator The address to get delegatee for\r\n     */\r\n    function delegates(address delegator)\r\n    external\r\n    view\r\n    returns (address)\r\n    {\r\n        return _delegates[delegator];\r\n    }\r\n\r\n    /**\r\n     * @notice Delegate votes from `msg.sender` to `delegatee`\r\n    * @param delegatee The address to delegate votes to\r\n    */\r\n    function delegate(address delegatee) external {\r\n        return _delegate(msg.sender, delegatee);\r\n    }\r\n\r\n    /**\r\n     * @notice Delegates votes from signatory to `delegatee`\r\n     * @param delegatee The address to delegate votes to\r\n     * @param nonce The contract state required to match the signature\r\n     * @param expiry The time at which to expire the signature\r\n     * @param v The recovery byte of the signature\r\n     * @param r Half of the ECDSA signature pair\r\n     * @param s Half of the ECDSA signature pair\r\n     */\r\n    function delegateBySig(\r\n        address delegatee,\r\n        uint nonce,\r\n        uint expiry,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    )\r\n    external\r\n    {\r\n        bytes32 domainSeparator = keccak256(\r\n            abi.encode(\r\n                DOMAIN_TYPEHASH,\r\n                keccak256(bytes(name())),\r\n                getChainId(),\r\n                address(this)\r\n            )\r\n        );\r\n\r\n        bytes32 structHash = keccak256(\r\n            abi.encode(\r\n                DELEGATION_TYPEHASH,\r\n                delegatee,\r\n                nonce,\r\n                expiry\r\n            )\r\n        );\r\n\r\n        bytes32 digest = keccak256(\r\n            abi.encodePacked(\r\n                \"\\x19\\x01\",\r\n                domainSeparator,\r\n                structHash\r\n            )\r\n        );\r\n\r\n        address signatory = ecrecover(digest, v, r, s);\r\n        require(signatory != address(0), \"xEMO::delegateBySig: invalid signature\");\r\n        require(nonce == nonces[signatory]++, \"xEMO::delegateBySig: invalid nonce\");\r\n        require(now <= expiry, \"xEMO::delegateBySig: signature expired\");\r\n        return _delegate(signatory, delegatee);\r\n    }\r\n\r\n    /**\r\n     * @notice Gets the current votes balance for `account`\r\n     * @param account The address to get votes balance\r\n     * @return The number of current votes for `account`\r\n     */\r\n    function getCurrentVotes(address account)\r\n    external\r\n    view\r\n    returns (uint256)\r\n    {\r\n        uint32 nCheckpoints = numCheckpoints[account];\r\n        return nCheckpoints > 0 ? checkpoints[account][nCheckpoints - 1].votes : 0;\r\n    }\r\n\r\n    /**\r\n     * @notice Determine the prior number of votes for an account as of a block number\r\n     * @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\r\n     * @param account The address of the account to check\r\n     * @param blockNumber The block number to get the vote balance at\r\n     * @return The number of votes the account had as of the given block\r\n     */\r\n    function getPriorVotes(address account, uint blockNumber)\r\n    external\r\n    view\r\n    returns (uint256)\r\n    {\r\n        require(blockNumber < block.number, \"xEMO::getPriorVotes: not yet determined\");\r\n\r\n        uint32 nCheckpoints = numCheckpoints[account];\r\n        if (nCheckpoints == 0) {\r\n            return 0;\r\n        }\r\n\r\n        // First check most recent balance\r\n        if (checkpoints[account][nCheckpoints - 1].fromBlock <= blockNumber) {\r\n            return checkpoints[account][nCheckpoints - 1].votes;\r\n        }\r\n\r\n        // Next check implicit zero balance\r\n        if (checkpoints[account][0].fromBlock > blockNumber) {\r\n            return 0;\r\n        }\r\n\r\n        uint32 lower = 0;\r\n        uint32 upper = nCheckpoints - 1;\r\n        while (upper > lower) {\r\n            uint32 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\r\n            Checkpoint memory cp = checkpoints[account][center];\r\n            if (cp.fromBlock == blockNumber) {\r\n                return cp.votes;\r\n            } else if (cp.fromBlock < blockNumber) {\r\n                lower = center;\r\n            } else {\r\n                upper = center - 1;\r\n            }\r\n        }\r\n        return checkpoints[account][lower].votes;\r\n    }\r\n\r\n    function _delegate(address delegator, address delegatee)\r\n    internal\r\n    {\r\n        address currentDelegate = _delegates[delegator];\r\n        uint256 delegatorBalance = balanceOf(delegator); // balance of underlying EMOs (not scaled);\r\n        _delegates[delegator] = delegatee;\r\n\r\n        emit DelegateChanged(delegator, currentDelegate, delegatee);\r\n\r\n        _moveDelegates(currentDelegate, delegatee, delegatorBalance);\r\n    }\r\n\r\n    function _moveDelegates(address srcRep, address dstRep, uint256 amount) internal {\r\n        if (srcRep != dstRep && amount > 0) {\r\n            if (srcRep != address(0)) {\r\n                // decrease old representative\r\n                uint32 srcRepNum = numCheckpoints[srcRep];\r\n                uint256 srcRepOld = srcRepNum > 0 ? checkpoints[srcRep][srcRepNum - 1].votes : 0;\r\n                uint256 srcRepNew = srcRepOld.sub(amount);\r\n                _writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew);\r\n            }\r\n\r\n            if (dstRep != address(0)) {\r\n                // increase new representative\r\n                uint32 dstRepNum = numCheckpoints[dstRep];\r\n                uint256 dstRepOld = dstRepNum > 0 ? checkpoints[dstRep][dstRepNum - 1].votes : 0;\r\n                uint256 dstRepNew = dstRepOld.add(amount);\r\n                _writeCheckpoint(dstRep, dstRepNum, dstRepOld, dstRepNew);\r\n            }\r\n        }\r\n    }\r\n\r\n    function _writeCheckpoint(\r\n        address delegatee,\r\n        uint32 nCheckpoints,\r\n        uint256 oldVotes,\r\n        uint256 newVotes\r\n    )\r\n    internal\r\n    {\r\n        uint32 blockNumber = safe32(block.number, \"xEMO::_writeCheckpoint: block number exceeds 32 bits\");\r\n\r\n        if (nCheckpoints > 0 && checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber) {\r\n            checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;\r\n        } else {\r\n            checkpoints[delegatee][nCheckpoints] = Checkpoint(blockNumber, newVotes);\r\n            numCheckpoints[delegatee] = nCheckpoints + 1;\r\n        }\r\n\r\n        emit DelegateVotesChanged(delegatee, oldVotes, newVotes);\r\n    }\r\n\r\n    function safe32(uint n, string memory errorMessage) internal pure returns (uint32) {\r\n        require(n < 2**32, errorMessage);\r\n        return uint32(n);\r\n    }\r\n\r\n    function getChainId() internal pure returns (uint) {\r\n        uint256 chainId;\r\n        assembly { chainId := chainid() }\r\n        return chainId;\r\n    }\r\n}\r\n"
    },
    "contracts/incentives/SimpleIncentivesController.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\npragma solidity ^0.6.12;\r\npragma experimental ABIEncoderV2;\r\n\r\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\r\nimport \"@openzeppelin/contracts/utils/Address.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\r\nimport \"../interfaces/IOnwardIncentivesController.sol\";\r\n\r\ncontract SimpleIncentivesController is IOnwardIncentivesController, Ownable, ReentrancyGuard {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    IERC20 public immutable override rewardToken;\r\n    IERC20 public immutable lpToken;\r\n    bool public immutable isNative;\r\n    // It is who call onReward method\r\n    address public immutable operator;\r\n    // always be masterchef\r\n    address public immutable originUser;\r\n\r\n    address private _nextIncentivesController;\r\n\r\n    struct UserInfo {\r\n        uint256 amount;\r\n        uint256 rewardDebt;\r\n        uint256 unpaidRewards;\r\n    }\r\n\r\n    struct PoolInfo {\r\n        uint256 accTokenPerShare;\r\n        uint256 lastRewardTimestamp;\r\n    }\r\n\r\n    PoolInfo public poolInfo;\r\n    /// @notice Info of each user that stakes LP tokens.\r\n    mapping(address => UserInfo) public userInfo;\r\n\r\n    uint256 public tokenPerSec;\r\n\r\n    uint256 private ACC_TOKEN_PRECISION;\r\n\r\n    event OnReward(address indexed user, uint256 amount);\r\n    event RewardRateUpdated(uint256 oldRate, uint256 newRate);\r\n\r\n    modifier onlyOperator() {\r\n        require(msg.sender == operator, \"onlyOperator: only operator can call this function\");\r\n        _;\r\n    }\r\n\r\n    constructor(\r\n        IERC20 _rewardToken,\r\n        IERC20 _lpToken,\r\n        uint256 _tokenPerSec,\r\n        address _operator,\r\n        address _originUser,\r\n        bool _isNative\r\n    ) public {\r\n        require(Address.isContract(address(_rewardToken)), \"constructor: reward token must be a valid contract\");\r\n        require(Address.isContract(address(_lpToken)), \"constructor: LP token must be a valid contract\");\r\n        require(Address.isContract(_operator), \"constructor: operator must be a valid contract\");\r\n        require(Address.isContract(_originUser), \"constructor: originUser must be a valid contract\");\r\n        require(_tokenPerSec <= 1e30, \"constructor: token per seconds can't be greater than 1e30\");\r\n\r\n        rewardToken = _rewardToken;\r\n        lpToken = _lpToken;\r\n        tokenPerSec = _tokenPerSec;\r\n        operator = _operator;\r\n        originUser = _originUser;\r\n        isNative = _isNative;\r\n        poolInfo = PoolInfo({lastRewardTimestamp: block.timestamp, accTokenPerShare: 0});\r\n\r\n        // Given the fraction, tokenReward * ACC_TOKEN_PRECISION / lpSupply\r\n        ACC_TOKEN_PRECISION = 1e36;\r\n    }\r\n\r\n    /// @notice Update reward variables of the given poolInfo.\r\n    /// @return pool Returns the pool that was updated.\r\n    function updatePool() public returns (PoolInfo memory pool) {\r\n        pool = poolInfo;\r\n\r\n        if (block.timestamp > pool.lastRewardTimestamp) {\r\n            uint256 lpSupply = lpToken.balanceOf(originUser);\r\n\r\n            if (lpSupply > 0) {\r\n                uint256 timeElapsed = block.timestamp.sub(pool.lastRewardTimestamp);\r\n                uint256 tokenReward = timeElapsed.mul(tokenPerSec);\r\n                pool.accTokenPerShare = pool.accTokenPerShare.add((tokenReward.mul(ACC_TOKEN_PRECISION) / lpSupply));\r\n            }\r\n\r\n            pool.lastRewardTimestamp = block.timestamp;\r\n            poolInfo = pool;\r\n        }\r\n    }\r\n\r\n    function setNextIncentivesController(address nextIncentivesController) external onlyOwner {\r\n        _nextIncentivesController = nextIncentivesController;\r\n    }\r\n\r\n    /// @notice Sets the distribution reward rate. This will also update the poolInfo.\r\n    /// @param _tokenPerSec The number of tokens to distribute per second\r\n    function setRewardRate(uint256 _tokenPerSec) external onlyOwner {\r\n        updatePool();\r\n\r\n        uint256 oldRate = tokenPerSec;\r\n        tokenPerSec = _tokenPerSec;\r\n\r\n        emit RewardRateUpdated(oldRate, _tokenPerSec);\r\n    }\r\n\r\n    /// @notice Function called by operator whenever staker claims harvest. Allows staker to also receive a 2nd reward token.\r\n    /// @param _user Address of user\r\n    /// @param _lpAmount Number of LP tokens the user has\r\n    function onReward(address _user, uint256 _lpAmount) external override onlyOperator nonReentrant {\r\n        updatePool();\r\n        PoolInfo memory pool = poolInfo;\r\n        UserInfo storage user = userInfo[_user];\r\n        uint256 pending;\r\n        if (user.amount > 0) {\r\n            pending = (user.amount.mul(pool.accTokenPerShare) / ACC_TOKEN_PRECISION).sub(user.rewardDebt).add(\r\n                user.unpaidRewards\r\n            );\r\n\r\n            if (isNative) {\r\n                uint256 balance = address(this).balance;\r\n                if (pending > balance) {\r\n                    (bool success,) = _user.call{value : balance}(\"\");\r\n                    require(success, \"Transfer failed\");\r\n                    user.unpaidRewards = pending - balance;\r\n                } else {\r\n                    (bool success,) = _user.call{value : pending}(\"\");\r\n                    require(success, \"Transfer failed\");\r\n                    user.unpaidRewards = 0;\r\n                }\r\n            } else {\r\n                uint256 balance = rewardToken.balanceOf(address(this));\r\n                if (pending > balance) {\r\n                    rewardToken.safeTransfer(_user, balance);\r\n                    user.unpaidRewards = pending - balance;\r\n                } else {\r\n                    rewardToken.safeTransfer(_user, pending);\r\n                    user.unpaidRewards = 0;\r\n                }\r\n            }\r\n        }\r\n\r\n        user.amount = _lpAmount;\r\n        user.rewardDebt = user.amount.mul(pool.accTokenPerShare) / ACC_TOKEN_PRECISION;\r\n\r\n        // Interactions\r\n        if (_nextIncentivesController != address(0)) {\r\n            IOnwardIncentivesController(_nextIncentivesController).onReward(_user, _lpAmount);\r\n        }\r\n\r\n        emit OnReward(_user, pending - user.unpaidRewards);\r\n    }\r\n\r\n    /// @notice View function to see pending tokens\r\n    /// @param _user Address of user.\r\n    /// @return pending reward for a given user.\r\n    function pendingTokens(address _user) external view override returns (uint256 pending) {\r\n        PoolInfo memory pool = poolInfo;\r\n        UserInfo storage user = userInfo[_user];\r\n\r\n        uint256 accTokenPerShare = pool.accTokenPerShare;\r\n        uint256 lpSupply = lpToken.balanceOf(originUser);\r\n\r\n        if (block.timestamp > pool.lastRewardTimestamp && lpSupply != 0) {\r\n            uint256 timeElapsed = block.timestamp.sub(pool.lastRewardTimestamp);\r\n            uint256 tokenReward = timeElapsed.mul(tokenPerSec);\r\n            accTokenPerShare = accTokenPerShare.add(tokenReward.mul(ACC_TOKEN_PRECISION).div(lpSupply));\r\n        }\r\n\r\n        pending = (user.amount.mul(accTokenPerShare) / ACC_TOKEN_PRECISION).sub(user.rewardDebt).add(\r\n            user.unpaidRewards\r\n        );\r\n    }\r\n\r\n    /// @notice In case rewarder is stopped before emissions finished, this function allows\r\n    /// withdrawal of remaining tokens.\r\n    function emergencyWithdraw() public onlyOwner {\r\n        if (isNative) {\r\n            (bool success,) = msg.sender.call{value : address(this).balance}(\"\");\r\n            require(success, \"Transfer failed\");\r\n        } else {\r\n            rewardToken.safeTransfer(address(msg.sender), rewardToken.balanceOf(address(this)));\r\n        }\r\n    }\r\n\r\n    /// @notice View function to see balance of reward token.\r\n    function balance() external view returns (uint256) {\r\n        if (isNative) {\r\n            return address(this).balance;\r\n        } else {\r\n            return rewardToken.balanceOf(address(this));\r\n        }\r\n    }\r\n\r\n    function getNextIncentivesController() external view override returns (address) {\r\n        return _nextIncentivesController;\r\n    }\r\n\r\n    /// @notice payable function needed to receive AVAX\r\n    receive() external payable {}\r\n}"
    },
    "contracts/stable/OwnerPausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.6.12;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/utils/Pausable.sol\";\r\n\r\n/**\r\n * @title OwnerPausable\r\n * @notice An ownable contract allows the owner to pause and unpause the\r\n * contract without a delay.\r\n * @dev Only methods using the provided modifiers will be paused.\r\n */\r\ncontract OwnerPausable is Ownable, Pausable {\r\n    /**\r\n     * @notice Pause the contract. Revert if already paused.\r\n     */\r\n    function pause() external onlyOwner {\r\n        Pausable._pause();\r\n    }\r\n\r\n    /**\r\n     * @notice Unpause the contract. Revert if already unpaused.\r\n     */\r\n    function unpause() external onlyOwner {\r\n        Pausable._unpause();\r\n    }\r\n}\r\n"
    },
    "contracts/stable/EvmoSwap.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.6.12;\r\n\r\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\r\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\r\nimport \"./OwnerPausable.sol\";\r\nimport \"./EvmoSwapUtils.sol\";\r\nimport \"./MathUtils.sol\";\r\n\r\n/**\r\n * @title Swap - A StableSwap implementation in solidity.\r\n * @notice This contract is responsible for custody of closely pegged assets (eg. group of stablecoins)\r\n * and automatic market making system. Users become an LP (Liquidity Provider) by depositing their tokens\r\n * in desired ratios for an exchange of the pool token that represents their share of the pool.\r\n * Users can burn pool tokens and withdraw their share of token(s).\r\n *\r\n * Each time a swap between the pooled tokens happens, a set fee incurs which effectively gets\r\n * distributed to the LPs.\r\n *\r\n * In case of emergencies, admin can pause additional deposits, swaps, or single-asset withdraws - which\r\n * stops the ratio of the tokens in the pool from changing.\r\n * Users can always withdraw their tokens via multi-asset withdraws.\r\n *\r\n * @dev Most of the logic is stored as a library `SwapUtils` for the sake of reducing contract's\r\n * deployment size.\r\n */\r\ncontract EvmoSwap is OwnerPausable, ReentrancyGuard {\r\n    using SafeERC20 for IERC20;\r\n    using SafeMath for uint256;\r\n    using MathUtils for uint256;\r\n    using EvmoSwapUtils for EvmoSwapUtils.Swap;\r\n\r\n    // Struct storing data responsible for automatic market maker functionalities. In order to\r\n    // access this data, this contract uses EvmoSwapUtils library. For more details, see EvmoSwapUtils.sol\r\n    EvmoSwapUtils.Swap public swapStorage;\r\n\r\n    // Maps token address to an index in the pool. Used to prevent duplicate tokens in the pool.\r\n    // getTokenIndex function also relies on this mapping to retrieve token index.\r\n    mapping(address => uint8) private tokenIndexes;\r\n\r\n    /*** EVENTS ***/\r\n\r\n    // events replicated from EvmoSwapUtils to make the ABI easier for dumb\r\n    // clients\r\n    event TokenSwap(\r\n        address indexed buyer,\r\n        uint256 tokensSold,\r\n        uint256 tokensBought,\r\n        uint128 soldId,\r\n        uint128 boughtId\r\n    );\r\n    event AddLiquidity(\r\n        address indexed provider,\r\n        uint256[] tokenAmounts,\r\n        uint256[] fees,\r\n        uint256 invariant,\r\n        uint256 lpTokenSupply\r\n    );\r\n    event RemoveLiquidity(\r\n        address indexed provider,\r\n        uint256[] tokenAmounts,\r\n        uint256 lpTokenSupply\r\n    );\r\n    event RemoveLiquidityOne(\r\n        address indexed provider,\r\n        uint256 lpTokenAmount,\r\n        uint256 lpTokenSupply,\r\n        uint256 boughtId,\r\n        uint256 tokensBought\r\n    );\r\n    event RemoveLiquidityImbalance(\r\n        address indexed provider,\r\n        uint256[] tokenAmounts,\r\n        uint256[] fees,\r\n        uint256 invariant,\r\n        uint256 lpTokenSupply\r\n    );\r\n    event NewAdminFee(uint256 newAdminFee);\r\n    event NewSwapFee(uint256 newSwapFee);\r\n    event NewDepositFee(uint256 newDepositFee);\r\n    event NewWithdrawFee(uint256 newWithdrawFee);\r\n    event RampA(\r\n        uint256 oldA,\r\n        uint256 newA,\r\n        uint256 initialTime,\r\n        uint256 futureTime\r\n    );\r\n    event StopRampA(uint256 currentA, uint256 time);\r\n\r\n    /**\r\n     * @notice Deploys this Swap contract with given parameters as default\r\n     * values. This will also deploy a LPToken that represents users\r\n     * LP position. The owner of LPToken will be this contract - which means\r\n     * only this contract is allowed to mint new tokens.\r\n     *\r\n     * @param _pooledTokens an array of ERC20s this pool will accept\r\n     * @param decimals the decimals to use for each pooled token,\r\n     * eg 8 for WBTC. Cannot be larger than POOL_PRECISION_DECIMALS\r\n     * @param lpTokenName the long-form name of the token to be deployed\r\n     * @param lpTokenSymbol the short symbol for the token to be deployed\r\n     * @param _a the amplification coefficient * n * (n - 1). See the\r\n     * StableSwap paper for details\r\n     * @param _fee default swap fee to be initialized with\r\n     * @param _adminFee default adminFee to be initialized with\r\n     * @param _depositFee default depositFee to be initialized with\r\n     * @param _withdrawFee default withdrawFee to be initialized with\r\n     * @param _devaddr default _devaddr to be initialized with\r\n     */\r\n    constructor(\r\n        IERC20[] memory _pooledTokens,\r\n        uint8[] memory decimals,\r\n        string memory lpTokenName,\r\n        string memory lpTokenSymbol,\r\n        uint256 _a,\r\n        uint256 _fee,\r\n        uint256 _adminFee,\r\n        uint256 _depositFee,\r\n        uint256 _withdrawFee,\r\n        address _devaddr\r\n    ) public OwnerPausable() ReentrancyGuard() {\r\n        // Check _pooledTokens and precisions parameter\r\n        require(_pooledTokens.length > 1, \"_pooledTokens.length <= 1\");\r\n        require(_pooledTokens.length <= 32, \"_pooledTokens.length > 32\");\r\n        require(\r\n            _pooledTokens.length == decimals.length,\r\n            \"_pooledTokens decimals mismatch\"\r\n        );\r\n\r\n        uint256[] memory precisionMultipliers = new uint256[](decimals.length);\r\n\r\n        for (uint8 i = 0; i < _pooledTokens.length; i++) {\r\n            if (i > 0) {\r\n                // Check if index is already used. Check if 0th element is a duplicate.\r\n                require(\r\n                    tokenIndexes[address(_pooledTokens[i])] == 0 &&\r\n                        _pooledTokens[0] != _pooledTokens[i],\r\n                    \"Duplicate tokens\"\r\n                );\r\n            }\r\n            require(\r\n                address(_pooledTokens[i]) != address(0),\r\n                \"The 0 address isn't an ERC-20\"\r\n            );\r\n            require(\r\n                decimals[i] <= EvmoSwapUtils.POOL_PRECISION_DECIMALS,\r\n                \"Token decimals exceeds max\"\r\n            );\r\n            precisionMultipliers[i] =\r\n                10 **\r\n                    uint256(EvmoSwapUtils.POOL_PRECISION_DECIMALS).sub(\r\n                        uint256(decimals[i])\r\n                    );\r\n            tokenIndexes[address(_pooledTokens[i])] = i;\r\n        }\r\n\r\n        // Check _a, _fee, _adminFee, _depositFee, _withdrawFee\r\n        require(_a < EvmoSwapUtils.MAX_A, \"_a exceeds maximum\");\r\n        require(_fee < EvmoSwapUtils.MAX_SWAP_FEE, \"_fee exceeds maximum\");\r\n        require(\r\n            _adminFee < EvmoSwapUtils.MAX_ADMIN_FEE,\r\n            \"_adminFee exceeds maximum\"\r\n        );\r\n        require(\r\n            _withdrawFee < EvmoSwapUtils.MAX_WITHDRAW_FEE,\r\n            \"_withdrawFee exceeds maximum\"\r\n        );\r\n        require(\r\n            _depositFee < EvmoSwapUtils.MAX_DEPOSIT_FEE,\r\n            \"_depositFee exceeds maximum\"\r\n        );\r\n\r\n        // Initialize swapStorage struct\r\n        swapStorage.lpToken = new LPToken(\r\n            lpTokenName,\r\n            lpTokenSymbol,\r\n            EvmoSwapUtils.POOL_PRECISION_DECIMALS\r\n        );\r\n        swapStorage.pooledTokens = _pooledTokens;\r\n        swapStorage.tokenPrecisionMultipliers = precisionMultipliers;\r\n        swapStorage.balances = new uint256[](_pooledTokens.length);\r\n        swapStorage.initialA = _a.mul(EvmoSwapUtils.A_PRECISION);\r\n        swapStorage.futureA = _a.mul(EvmoSwapUtils.A_PRECISION);\r\n        swapStorage.initialATime = 0;\r\n        swapStorage.futureATime = 0;\r\n        swapStorage.swapFee = _fee;\r\n        swapStorage.adminFee = _adminFee;\r\n        swapStorage.defaultDepositFee = _depositFee;\r\n        swapStorage.defaultWithdrawFee = _withdrawFee;\r\n        swapStorage.devaddr = _devaddr;\r\n\r\n    }\r\n\r\n    /*** MODIFIERS ***/\r\n\r\n    /**\r\n     * @notice Modifier to check deadline against current timestamp\r\n     * @param deadline latest timestamp to accept this transaction\r\n     */\r\n    modifier deadlineCheck(uint256 deadline) {\r\n        require(block.timestamp <= deadline, \"Deadline not met\");\r\n        _;\r\n    }\r\n\r\n    /*** VIEW FUNCTIONS ***/\r\n\r\n    /**\r\n     * @notice Return A, the amplification coefficient * n * (n - 1)\r\n     * @dev See the StableSwap paper for details\r\n     * @return A parameter\r\n     */\r\n    function getA() external view returns (uint256) {\r\n        return swapStorage.getA();\r\n    }\r\n\r\n    /**\r\n     * @notice Return A in its raw precision form\r\n     * @dev See the StableSwap paper for details\r\n     * @return A parameter in its raw precision form\r\n     */\r\n    function getAPrecise() external view returns (uint256) {\r\n        return swapStorage.getAPrecise();\r\n    }\r\n\r\n    /**\r\n     * @notice Return address of the pooled token at given index. Reverts if tokenIndex is out of range.\r\n     * @param index the index of the token\r\n     * @return address of the token at given index\r\n     */\r\n    function getToken(uint8 index) public view returns (IERC20) {\r\n        require(index < swapStorage.pooledTokens.length, \"Out of range\");\r\n        return swapStorage.pooledTokens[index];\r\n    }\r\n\r\n    /**\r\n     * @notice Return the index of the given token address. Reverts if no matching\r\n     * token is found.\r\n     * @param tokenAddress address of the token\r\n     * @return the index of the given token address\r\n     */\r\n    function getTokenIndex(address tokenAddress) external view returns (uint8) {\r\n        uint8 index = tokenIndexes[tokenAddress];\r\n        require(\r\n            address(getToken(index)) == tokenAddress,\r\n            \"Token does not exist\"\r\n        );\r\n        return index;\r\n    }\r\n\r\n    /**\r\n     * @notice Return timestamp of last deposit of given address\r\n     * @return timestamp of the last deposit made by the given address\r\n     */\r\n    function getDepositTimestamp(address user) external view returns (uint256) {\r\n        return swapStorage.getDepositTimestamp(user);\r\n    }\r\n\r\n    /**\r\n     * @notice Return current balance of the pooled token at given index\r\n     * @param index the index of the token\r\n     * @return current balance of the pooled token at given index with token's native precision\r\n     */\r\n    function getTokenBalance(uint8 index) external view returns (uint256) {\r\n        require(index < swapStorage.pooledTokens.length, \"Index out of range\");\r\n        return swapStorage.balances[index];\r\n    }\r\n\r\n    /**\r\n     * @notice Get the virtual price, to help calculate profit\r\n     * @return the virtual price, scaled to the POOL_PRECISION_DECIMALS\r\n     */\r\n    function getVirtualPrice() external virtual view returns (uint256) {\r\n        return swapStorage.getVirtualPrice();\r\n    }\r\n\r\n    /**\r\n     * @notice Calculate amount of tokens you receive on swap\r\n     * @param tokenIndexFrom the token the user wants to sell\r\n     * @param tokenIndexTo the token the user wants to buy\r\n     * @param dx the amount of tokens the user wants to sell. If the token charges\r\n     * a fee on transfers, use the amount that gets transferred after the fee.\r\n     * @return amount of tokens the user will receive\r\n     */\r\n    function calculateSwap(\r\n        uint8 tokenIndexFrom,\r\n        uint8 tokenIndexTo,\r\n        uint256 dx\r\n    ) external virtual view returns (uint256) {\r\n        return swapStorage.calculateSwap(tokenIndexFrom, tokenIndexTo, dx);\r\n    }\r\n\r\n    /**\r\n     * @notice A simple method to calculate prices from deposits or\r\n     * withdrawals, excluding fees but including slippage. This is\r\n     * helpful as an input into the various \"min\" parameters on calls\r\n     * to fight front-running\r\n     *\r\n     * @dev This shouldn't be used outside frontends for user estimates.\r\n     *\r\n     * @param account address that is depositing or withdrawing tokens\r\n     * @param amounts an array of token amounts to deposit or withdrawal,\r\n     * corresponding to pooledTokens. The amount should be in each\r\n     * pooled token's native precision. If a token charges a fee on transfers,\r\n     * use the amount that gets transferred after the fee.\r\n     * @param deposit whether this is a deposit or a withdrawal\r\n     * @return token amount the user will receive\r\n     */\r\n    function calculateTokenAmount(\r\n        address account,\r\n        uint256[] calldata amounts,\r\n        bool deposit\r\n    ) external virtual view returns (uint256) {\r\n        return swapStorage.calculateTokenAmount(account, amounts, deposit);\r\n    }\r\n\r\n    /**\r\n     * @notice A simple method to calculate amount of each underlying\r\n     * tokens that is returned upon burning given amount of LP tokens\r\n     * @param account the address that is withdrawing tokens\r\n     * @param amount the amount of LP tokens that would be burned on withdrawal\r\n     * @return array of token balances that the user will receive\r\n     */\r\n    function calculateRemoveLiquidity(address account, uint256 amount)\r\n        external\r\n        view\r\n        returns (uint256[] memory)\r\n    {\r\n        return swapStorage.calculateRemoveLiquidity(account, amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Calculate the amount of underlying token available to withdraw\r\n     * when withdrawing via only single token\r\n     * @param account the address that is withdrawing tokens\r\n     * @param tokenAmount the amount of LP token to burn\r\n     * @param tokenIndex index of which token will be withdrawn\r\n     * @return availableTokenAmount calculated amount of underlying token\r\n     * available to withdraw\r\n     */\r\n    function calculateRemoveLiquidityOneToken(\r\n        address account,\r\n        uint256 tokenAmount,\r\n        uint8 tokenIndex\r\n    ) external virtual view returns (uint256 availableTokenAmount) {\r\n        (availableTokenAmount, ) = swapStorage.calculateWithdrawOneToken(\r\n            account,\r\n            tokenAmount,\r\n            tokenIndex\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Calculate the fee that is applied when the given user withdraws. The withdraw fee\r\n     * decays linearly over period of 4 weeks. For example, depositing and withdrawing right away\r\n     * will charge you the full amount of withdraw fee. But withdrawing after 4 weeks will charge you\r\n     * no additional fees.\r\n     * @dev returned value should be divided by FEE_DENOMINATOR to convert to correct decimals\r\n     * @param user address you want to calculate withdraw fee of\r\n     * @return current withdraw fee of the user\r\n     */\r\n    function calculateCurrentWithdrawFee(address user)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return swapStorage.calculateCurrentWithdrawFee(user);\r\n    }\r\n\r\n    /**\r\n     * @notice This function reads the accumulated amount of admin fees of the token with given index\r\n     * @param index Index of the pooled token\r\n     * @return admin's token balance in the token's precision\r\n     */\r\n    function getAdminBalance(uint256 index) external view returns (uint256) {\r\n        return swapStorage.getAdminBalance(index);\r\n    }\r\n\r\n    /*** STATE MODIFYING FUNCTIONS ***/\r\n\r\n    /**\r\n     * @notice Swap two tokens using this pool\r\n     * @param tokenIndexFrom the token the user wants to swap from\r\n     * @param tokenIndexTo the token the user wants to swap to\r\n     * @param dx the amount of tokens the user wants to swap from\r\n     * @param minDy the min amount the user would like to receive, or revert.\r\n     * @param deadline latest timestamp to accept this transaction\r\n     */\r\n    function swap(\r\n        uint8 tokenIndexFrom,\r\n        uint8 tokenIndexTo,\r\n        uint256 dx,\r\n        uint256 minDy,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        virtual\r\n        nonReentrant\r\n        whenNotPaused\r\n        deadlineCheck(deadline)\r\n        returns (uint256)\r\n    {\r\n        return swapStorage.swap(tokenIndexFrom, tokenIndexTo, dx, minDy);\r\n    }\r\n\r\n    /**\r\n     * @notice Add liquidity to the pool with given amounts\r\n     * @param amounts the amounts of each token to add, in their native precision\r\n     * @param minToMint the minimum LP tokens adding this amount of liquidity\r\n     * should mint, otherwise revert. Handy for front-running mitigation\r\n     * @param deadline latest timestamp to accept this transaction\r\n     * @return amount of LP token user minted and received\r\n     */\r\n    function addLiquidity(\r\n        uint256[] calldata amounts,\r\n        uint256 minToMint,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        virtual\r\n        nonReentrant\r\n        whenNotPaused\r\n        deadlineCheck(deadline)\r\n        returns (uint256)\r\n    {\r\n        return swapStorage.addLiquidity(amounts, minToMint);\r\n    }\r\n\r\n    /**\r\n     * @notice Burn LP tokens to remove liquidity from the pool. Withdraw fee that decays linearly\r\n     * over period of 4 weeks since last deposit will apply.\r\n     * @dev Liquidity can always be removed, even when the pool is paused.\r\n     * @param amount the amount of LP tokens to burn\r\n     * @param minAmounts the minimum amounts of each token in the pool\r\n     *        acceptable for this burn. Useful as a front-running mitigation\r\n     * @param deadline latest timestamp to accept this transaction\r\n     * @return amounts of tokens user received\r\n     */\r\n    function removeLiquidity(\r\n        uint256 amount,\r\n        uint256[] calldata minAmounts,\r\n        uint256 deadline\r\n    ) external nonReentrant deadlineCheck(deadline) returns (uint256[] memory) {\r\n        return swapStorage.removeLiquidity(amount, minAmounts);\r\n    }\r\n\r\n    /**\r\n     * @notice Remove liquidity from the pool all in one token. Withdraw fee that decays linearly\r\n     * over period of 4 weeks since last deposit will apply.\r\n     * @param tokenAmount the amount of the token you want to receive\r\n     * @param tokenIndex the index of the token you want to receive\r\n     * @param minAmount the minimum amount to withdraw, otherwise revert\r\n     * @param deadline latest timestamp to accept this transaction\r\n     * @return amount of chosen token user received\r\n     */\r\n    function removeLiquidityOneToken(\r\n        uint256 tokenAmount,\r\n        uint8 tokenIndex,\r\n        uint256 minAmount,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        virtual\r\n        nonReentrant\r\n        whenNotPaused\r\n        deadlineCheck(deadline)\r\n        returns (uint256)\r\n    {\r\n        return\r\n            swapStorage.removeLiquidityOneToken(\r\n                tokenAmount,\r\n                tokenIndex,\r\n                minAmount\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @notice Remove liquidity from the pool, weighted differently than the\r\n     * pool's current balances. Withdraw fee that decays linearly\r\n     * over period of 4 weeks since last deposit will apply.\r\n     * @param amounts how much of each token to withdraw\r\n     * @param maxBurnAmount the max LP token provider is willing to pay to\r\n     * remove liquidity. Useful as a front-running mitigation.\r\n     * @param deadline latest timestamp to accept this transaction\r\n     * @return amount of LP tokens burned\r\n     */\r\n    function removeLiquidityImbalance(\r\n        uint256[] calldata amounts,\r\n        uint256 maxBurnAmount,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        virtual\r\n        nonReentrant\r\n        whenNotPaused\r\n        deadlineCheck(deadline)\r\n        returns (uint256)\r\n    {\r\n        return swapStorage.removeLiquidityImbalance(amounts, maxBurnAmount);\r\n    }\r\n\r\n    /*** ADMIN FUNCTIONS ***/\r\n\r\n    /**\r\n     * @notice Updates the user withdraw fee. This function can only be called by\r\n     * the pool token. Should be used to update the withdraw fee on transfer of pool tokens.\r\n     * Transferring your pool token will reset the 4 weeks period. If the recipient is already\r\n     * holding some pool tokens, the withdraw fee will be discounted in respective amounts.\r\n     * @param recipient address of the recipient of pool token\r\n     * @param transferAmount amount of pool token to transfer\r\n     */\r\n    function updateUserWithdrawFee(address recipient, uint256 transferAmount)\r\n        external\r\n    {\r\n        require(\r\n            msg.sender == address(swapStorage.lpToken),\r\n            \"Only callable by pool token\"\r\n        );\r\n        swapStorage.updateUserWithdrawFee(recipient, transferAmount);\r\n    }\r\n\r\n    /**\r\n     * @notice Withdraw all admin fees to the contract owner\r\n     */\r\n    function withdrawAdminFees() external onlyOwner {\r\n        swapStorage.withdrawAdminFees(owner());\r\n    }\r\n\r\n    /**\r\n     * @notice Update the admin fee. Admin fee takes portion of the swap fee.\r\n     * @param newAdminFee new admin fee to be applied on future transactions\r\n     */\r\n    function setAdminFee(uint256 newAdminFee) external onlyOwner {\r\n        swapStorage.setAdminFee(newAdminFee);\r\n    }\r\n\r\n    /**\r\n     * @notice Update the swap fee to be applied on swaps\r\n     * @param newSwapFee new swap fee to be applied on future transactions\r\n     */\r\n    function setSwapFee(uint256 newSwapFee) external onlyOwner {\r\n        swapStorage.setSwapFee(newSwapFee);\r\n    }\r\n\r\n        /**\r\n     * @notice Update the deposit fee. \r\n     * @param newDepositFee new deposit fee to be applied on future deposits\r\n     */\r\n    function setDefaultDepositFee(uint256 newDepositFee) external onlyOwner {\r\n        swapStorage.setDefaultDepositFee(newDepositFee);\r\n    }\r\n\r\n    /**\r\n     * @notice Update the withdraw fee. This fee decays linearly over 4 weeks since\r\n     * user's last deposit.\r\n     * @param newWithdrawFee new withdraw fee to be applied on future deposits\r\n     */\r\n    function setDefaultWithdrawFee(uint256 newWithdrawFee) external onlyOwner {\r\n        swapStorage.setDefaultWithdrawFee(newWithdrawFee);\r\n    }\r\n\r\n    /**\r\n     * @notice Start ramping up or down A parameter towards given futureA and futureTime\r\n     * Checks if the change is too rapid, and commits the new A value only when it falls under\r\n     * the limit range.\r\n     * @param futureA the new A to ramp towards\r\n     * @param futureTime timestamp when the new A should be reached\r\n     */\r\n    function rampA(uint256 futureA, uint256 futureTime) external onlyOwner {\r\n        swapStorage.rampA(futureA, futureTime);\r\n    }\r\n\r\n    /**\r\n     * @notice Stop ramping A immediately. Reverts if ramp A is already stopped.\r\n     */\r\n    function stopRampA() external onlyOwner {\r\n        swapStorage.stopRampA();\r\n    }\r\n\r\n        // Update dev address by the previous dev.\r\n    function setDevAddress(address _devaddr) external onlyOwner {\r\n        swapStorage.setDevAddress(_devaddr);\r\n    }\r\n}"
    },
    "contracts/stable/EvmoSwapUtils.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.6.12;\r\n\r\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\r\nimport \"./LPToken.sol\";\r\nimport \"./MathUtils.sol\";\r\n\r\n/**\r\n * @title SwapUtils library\r\n * @notice A library to be used within Swap.sol. Contains functions responsible for custody and AMM functionalities.\r\n * @dev Contracts relying on this library must initialize SwapUtils.Swap struct then use this library\r\n * for SwapUtils.Swap struct. Note that this library contains both functions called by users and admins.\r\n * Admin functions should be protected within contracts using this library.\r\n */\r\nlibrary EvmoSwapUtils {\r\n    using SafeERC20 for IERC20;\r\n    using SafeMath for uint256;\r\n    using MathUtils for uint256;\r\n\r\n    /*** EVENTS ***/\r\n\r\n    event TokenSwap(\r\n        address indexed buyer,\r\n        uint256 tokensSold,\r\n        uint256 tokensBought,\r\n        uint128 soldId,\r\n        uint128 boughtId\r\n    );\r\n    event AddLiquidity(\r\n        address indexed provider,\r\n        uint256[] tokenAmounts,\r\n        uint256[] fees,\r\n        uint256 invariant,\r\n        uint256 lpTokenSupply\r\n    );\r\n    event RemoveLiquidity(\r\n        address indexed provider,\r\n        uint256[] tokenAmounts,\r\n        uint256 lpTokenSupply\r\n    );\r\n    event RemoveLiquidityOne(\r\n        address indexed provider,\r\n        uint256 lpTokenAmount,\r\n        uint256 lpTokenSupply,\r\n        uint256 boughtId,\r\n        uint256 tokensBought\r\n    );\r\n    event RemoveLiquidityImbalance(\r\n        address indexed provider,\r\n        uint256[] tokenAmounts,\r\n        uint256[] fees,\r\n        uint256 invariant,\r\n        uint256 lpTokenSupply\r\n    );\r\n    event NewAdminFee(uint256 newAdminFee);\r\n    event NewSwapFee(uint256 newSwapFee);\r\n    event NewWithdrawFee(uint256 newWithdrawFee);\r\n    event NewDepositFee(uint256 newDepositFee);\r\n    event RampA(\r\n        uint256 oldA,\r\n        uint256 newA,\r\n        uint256 initialTime,\r\n        uint256 futureTime\r\n    );\r\n    event StopRampA(uint256 currentA, uint256 time);\r\n\r\n    struct Swap {\r\n        // variables around the ramp management of A,\r\n        // the amplification coefficient * n * (n - 1)\r\n        // see https://www.curve.fi/stableswap-paper.pdf for details\r\n        uint256 initialA;\r\n        uint256 futureA;\r\n        uint256 initialATime;\r\n        uint256 futureATime;\r\n        // fee calculation\r\n        uint256 swapFee;\r\n        uint256 adminFee;\r\n        uint256 defaultDepositFee;\r\n        uint256 defaultWithdrawFee;\r\n        address devaddr;\r\n        LPToken lpToken;\r\n        // contract references for all tokens being pooled\r\n        IERC20[] pooledTokens;\r\n        // multipliers for each pooled token's precision to get to POOL_PRECISION_DECIMALS\r\n        // for example, TBTC has 18 decimals, so the multiplier should be 1. WBTC\r\n        // has 8, so the multiplier should be 10 ** 18 / 10 ** 8 => 10 ** 10\r\n        uint256[] tokenPrecisionMultipliers;\r\n        // the pool balance of each token, in the token's precision\r\n        // the contract's actual token balance might differ\r\n        uint256[] balances;\r\n        mapping(address => uint256) depositTimestamp;\r\n        mapping(address => uint256) withdrawFeeMultiplier;\r\n    }\r\n\r\n    // Struct storing variables used in calculations in the\r\n    // calculateWithdrawOneTokenDY function to avoid stack too deep errors\r\n    struct CalculateWithdrawOneTokenDYInfo {\r\n        uint256 d0;\r\n        uint256 d1;\r\n        uint256 newY;\r\n        uint256 feePerToken;\r\n        uint256 preciseA;\r\n    }\r\n\r\n    // Struct storing variables used in calculation in addLiquidity function\r\n    // to avoid stack too deep error\r\n    struct AddLiquidityInfo {\r\n        uint256 d0;\r\n        uint256 d1;\r\n        uint256 d2;\r\n        uint256 preciseA;\r\n    }\r\n\r\n    // Struct storing variables used in calculation in removeLiquidityImbalance function\r\n    // to avoid stack too deep error\r\n    struct RemoveLiquidityImbalanceInfo {\r\n        uint256 d0;\r\n        uint256 d1;\r\n        uint256 d2;\r\n        uint256 preciseA;\r\n    }\r\n\r\n    // the precision all pools tokens will be converted to\r\n    uint8 public constant POOL_PRECISION_DECIMALS = 18;\r\n\r\n    // the denominator used to calculate admin and LP fees. For example, an\r\n    // LP fee might be something like tradeAmount.mul(fee).div(FEE_DENOMINATOR)\r\n    uint256 private constant FEE_DENOMINATOR = 10**10;\r\n\r\n    // Max swap fee is 1% or 100bps of each swap\r\n    uint256 public constant MAX_SWAP_FEE = 10**8;\r\n\r\n    // Max adminFee is 100% of the swapFee\r\n    // adminFee does not add additional fee on top of swapFee\r\n    // Instead it takes a certain % of the swapFee. Therefore it has no impact on the\r\n    // users but only on the earnings of LPs\r\n    uint256 public constant MAX_ADMIN_FEE = 10**10;\r\n\r\n    // Max withdrawFee is 1% of the value withdrawn\r\n    // Fee will be redistributed to the LPs in the pool, rewarding\r\n    // long term providers.\r\n    uint256 public constant MAX_WITHDRAW_FEE = 10**8;\r\n\r\n    // Max depositFee is 1% of the value deposited\r\n    uint256 public constant MAX_DEPOSIT_FEE = 10**8;\r\n    \r\n    // Constant value used as max loop limit\r\n    uint256 private constant MAX_LOOP_LIMIT = 256;\r\n\r\n    // Constant values used in ramping A calculations\r\n    uint256 public constant A_PRECISION = 100;\r\n    uint256 public constant MAX_A = 10**6;\r\n    uint256 private constant MAX_A_CHANGE = 2;\r\n    uint256 private constant MIN_RAMP_TIME = 14 days;\r\n\r\n    /*** VIEW & PURE FUNCTIONS ***/\r\n\r\n    /**\r\n     * @notice Return A, the amplification coefficient * n * (n - 1)\r\n     * @dev See the StableSwap paper for details\r\n     * @param self Swap struct to read from\r\n     * @return A parameter\r\n     */\r\n    function getA(Swap storage self) external view returns (uint256) {\r\n        return _getA(self);\r\n    }\r\n\r\n    /**\r\n     * @notice Return A, the amplification coefficient * n * (n - 1)\r\n     * @dev See the StableSwap paper for details\r\n     * @param self Swap struct to read from\r\n     * @return A parameter\r\n     */\r\n    function _getA(Swap storage self) internal view returns (uint256) {\r\n        return _getAPrecise(self).div(A_PRECISION);\r\n    }\r\n\r\n    /**\r\n     * @notice Return A in its raw precision\r\n     * @dev See the StableSwap paper for details\r\n     * @param self Swap struct to read from\r\n     * @return A parameter in its raw precision form\r\n     */\r\n    function getAPrecise(Swap storage self) external view returns (uint256) {\r\n        return _getAPrecise(self);\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates and returns A based on the ramp settings\r\n     * @dev See the StableSwap paper for details\r\n     * @param self Swap struct to read from\r\n     * @return A parameter in its raw precision form\r\n     */\r\n    function _getAPrecise(Swap storage self) internal view returns (uint256) {\r\n        uint256 t1 = self.futureATime; // time when ramp is finished\r\n        uint256 a1 = self.futureA; // final A value when ramp is finished\r\n\r\n        if (block.timestamp < t1) {\r\n            uint256 t0 = self.initialATime; // time when ramp is started\r\n            uint256 a0 = self.initialA; // initial A value when ramp is started\r\n            if (a1 > a0) {\r\n                // a0 + (a1 - a0) * (block.timestamp - t0) / (t1 - t0)\r\n                return\r\n                    a0.add(\r\n                        a1.sub(a0).mul(block.timestamp.sub(t0)).div(t1.sub(t0))\r\n                    );\r\n            } else {\r\n                // a0 - (a0 - a1) * (block.timestamp - t0) / (t1 - t0)\r\n                return\r\n                    a0.sub(\r\n                        a0.sub(a1).mul(block.timestamp.sub(t0)).div(t1.sub(t0))\r\n                    );\r\n            }\r\n        } else {\r\n            return a1;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Retrieves the timestamp of last deposit made by the given address\r\n     * @param self Swap struct to read from\r\n     * @return timestamp of last deposit\r\n     */\r\n    function getDepositTimestamp(Swap storage self, address user)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return self.depositTimestamp[user];\r\n    }\r\n\r\n    /**\r\n     * @notice Calculate the dy, the amount of selected token that user receives and\r\n     * the fee of withdrawing in one token\r\n     * @param account the address that is withdrawing\r\n     * @param tokenAmount the amount to withdraw in the pool's precision\r\n     * @param tokenIndex which token will be withdrawn\r\n     * @param self Swap struct to read from\r\n     * @return the amount of token user will receive and the associated swap fee\r\n     */\r\n    function calculateWithdrawOneToken(\r\n        Swap storage self,\r\n        address account,\r\n        uint256 tokenAmount,\r\n        uint8 tokenIndex\r\n    ) public view returns (uint256, uint256) {\r\n        uint256 dy;\r\n        uint256 newY;\r\n\r\n        (dy, newY) = calculateWithdrawOneTokenDY(self, tokenIndex, tokenAmount);\r\n\r\n        // dy_0 (without fees)\r\n        // dy, dy_0 - dy\r\n\r\n        uint256 dySwapFee =\r\n            _xp(self)[tokenIndex]\r\n                .sub(newY)\r\n                .div(self.tokenPrecisionMultipliers[tokenIndex])\r\n                .sub(dy);\r\n\r\n        dy = dy\r\n            .mul(\r\n            FEE_DENOMINATOR.sub(calculateCurrentWithdrawFee(self, account))\r\n        )\r\n            .div(FEE_DENOMINATOR);\r\n\r\n        return (dy, dySwapFee);\r\n    }\r\n\r\n    /**\r\n     * @notice Calculate the dy of withdrawing in one token\r\n     * @param self Swap struct to read from\r\n     * @param tokenIndex which token will be withdrawn\r\n     * @param tokenAmount the amount to withdraw in the pools precision\r\n     * @return the d and the new y after withdrawing one token\r\n     */\r\n    function calculateWithdrawOneTokenDY(\r\n        Swap storage self,\r\n        uint8 tokenIndex,\r\n        uint256 tokenAmount\r\n    ) internal view returns (uint256, uint256) {\r\n        require(\r\n            tokenIndex < self.pooledTokens.length,\r\n            \"Token index out of range\"\r\n        );\r\n\r\n        // Get the current D, then solve the stableswap invariant\r\n        // y_i for D - tokenAmount\r\n        uint256[] memory xp = _xp(self);\r\n        CalculateWithdrawOneTokenDYInfo memory v =\r\n            CalculateWithdrawOneTokenDYInfo(0, 0, 0, 0, 0);\r\n        v.preciseA = _getAPrecise(self);\r\n        v.d0 = getD(xp, v.preciseA);\r\n        v.d1 = v.d0.sub(tokenAmount.mul(v.d0).div(self.lpToken.totalSupply()));\r\n\r\n        require(tokenAmount <= xp[tokenIndex], \"Withdraw exceeds available\");\r\n\r\n        v.newY = getYD(v.preciseA, tokenIndex, xp, v.d1);\r\n\r\n        uint256[] memory xpReduced = new uint256[](xp.length);\r\n\r\n        v.feePerToken = _feePerToken(self);\r\n        for (uint256 i = 0; i < self.pooledTokens.length; i++) {\r\n            uint256 xpi = xp[i];\r\n            // if i == tokenIndex, dxExpected = xp[i] * d1 / d0 - newY\r\n            // else dxExpected = xp[i] - (xp[i] * d1 / d0)\r\n            // xpReduced[i] -= dxExpected * fee / FEE_DENOMINATOR\r\n            xpReduced[i] = xpi.sub(\r\n                (\r\n                    (i == tokenIndex)\r\n                        ? xpi.mul(v.d1).div(v.d0).sub(v.newY)\r\n                        : xpi.sub(xpi.mul(v.d1).div(v.d0))\r\n                )\r\n                    .mul(v.feePerToken)\r\n                    .div(FEE_DENOMINATOR)\r\n            );\r\n        }\r\n\r\n        uint256 dy =\r\n            xpReduced[tokenIndex].sub(\r\n                getYD(v.preciseA, tokenIndex, xpReduced, v.d1)\r\n            );\r\n        dy = dy.sub(1).div(self.tokenPrecisionMultipliers[tokenIndex]);\r\n\r\n        return (dy, v.newY);\r\n    }\r\n\r\n    /**\r\n     * @notice Calculate the price of a token in the pool with given\r\n     * precision-adjusted balances and a particular D.\r\n     *\r\n     * @dev This is accomplished via solving the invariant iteratively.\r\n     * See the StableSwap paper and Curve.fi implementation for further details.\r\n     *\r\n     * x_1**2 + x1 * (sum' - (A*n**n - 1) * D / (A * n**n)) = D ** (n + 1) / (n ** (2 * n) * prod' * A)\r\n     * x_1**2 + b*x_1 = c\r\n     * x_1 = (x_1**2 + c) / (2*x_1 + b)\r\n     *\r\n     * @param a the amplification coefficient * n * (n - 1). See the StableSwap paper for details.\r\n     * @param tokenIndex Index of token we are calculating for.\r\n     * @param xp a precision-adjusted set of pool balances. Array should be\r\n     * the same cardinality as the pool.\r\n     * @param d the stableswap invariant\r\n     * @return the price of the token, in the same precision as in xp\r\n     */\r\n    function getYD(\r\n        uint256 a,\r\n        uint8 tokenIndex,\r\n        uint256[] memory xp,\r\n        uint256 d\r\n    ) internal pure returns (uint256) {\r\n        uint256 numTokens = xp.length;\r\n        require(tokenIndex < numTokens, \"Token not found\");\r\n\r\n        uint256 c = d;\r\n        uint256 s;\r\n        uint256 nA = a.mul(numTokens);\r\n\r\n        for (uint256 i = 0; i < numTokens; i++) {\r\n            if (i != tokenIndex) {\r\n                s = s.add(xp[i]);\r\n                c = c.mul(d).div(xp[i].mul(numTokens));\r\n                // If we were to protect the division loss we would have to keep the denominator separate\r\n                // and divide at the end. However this leads to overflow with large numTokens or/and D.\r\n                // c = c * D * D * D * ... overflow!\r\n            }\r\n        }\r\n        c = c.mul(d).mul(A_PRECISION).div(nA.mul(numTokens));\r\n\r\n        uint256 b = s.add(d.mul(A_PRECISION).div(nA));\r\n        uint256 yPrev;\r\n        uint256 y = d;\r\n        for (uint256 i = 0; i < MAX_LOOP_LIMIT; i++) {\r\n            yPrev = y;\r\n            y = y.mul(y).add(c).div(y.mul(2).add(b).sub(d));\r\n            if (y.within1(yPrev)) {\r\n                return y;\r\n            }\r\n        }\r\n        revert(\"Approximation did not converge\");\r\n    }\r\n\r\n    /**\r\n     * @notice Get D, the StableSwap invariant, based on a set of balances and a particular A.\r\n     * @param xp a precision-adjusted set of pool balances. Array should be the same cardinality\r\n     * as the pool.\r\n     * @param a the amplification coefficient * n * (n - 1) in A_PRECISION.\r\n     * See the StableSwap paper for details\r\n     * @return the invariant, at the precision of the pool\r\n     */\r\n    function getD(uint256[] memory xp, uint256 a)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        uint256 numTokens = xp.length;\r\n        uint256 s;\r\n        for (uint256 i = 0; i < numTokens; i++) {\r\n            s = s.add(xp[i]);\r\n        }\r\n        if (s == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 prevD;\r\n        uint256 d = s;\r\n        uint256 nA = a.mul(numTokens);\r\n\r\n        for (uint256 i = 0; i < MAX_LOOP_LIMIT; i++) {\r\n            uint256 dP = d;\r\n            for (uint256 j = 0; j < numTokens; j++) {\r\n                dP = dP.mul(d).div(xp[j].mul(numTokens));\r\n                // If we were to protect the division loss we would have to keep the denominator separate\r\n                // and divide at the end. However this leads to overflow with large numTokens or/and D.\r\n                // dP = dP * D * D * D * ... overflow!\r\n            }\r\n            prevD = d;\r\n            d = nA.mul(s).div(A_PRECISION).add(dP.mul(numTokens)).mul(d).div(\r\n                nA.sub(A_PRECISION).mul(d).div(A_PRECISION).add(\r\n                    numTokens.add(1).mul(dP)\r\n                )\r\n            );\r\n            if (d.within1(prevD)) {\r\n                return d;\r\n            }\r\n        }\r\n\r\n        // Convergence should occur in 4 loops or less. If this is reached, there may be something wrong\r\n        // with the pool. If this were to occur repeatedly, LPs should withdraw via `removeLiquidity()`\r\n        // function which does not rely on D.\r\n        revert(\"D does not converge\");\r\n    }\r\n\r\n    /**\r\n     * @notice Get D, the StableSwap invariant, based on self Swap struct\r\n     * @param self Swap struct to read from\r\n     * @return The invariant, at the precision of the pool\r\n     */\r\n    function getD(Swap storage self) internal view returns (uint256) {\r\n        return getD(_xp(self), _getAPrecise(self));\r\n    }\r\n\r\n    /**\r\n     * @notice Given a set of balances and precision multipliers, return the\r\n     * precision-adjusted balances.\r\n     *\r\n     * @param balances an array of token balances, in their native precisions.\r\n     * These should generally correspond with pooled tokens.\r\n     *\r\n     * @param precisionMultipliers an array of multipliers, corresponding to\r\n     * the amounts in the balances array. When multiplied together they\r\n     * should yield amounts at the pool's precision.\r\n     *\r\n     * @return an array of amounts \"scaled\" to the pool's precision\r\n     */\r\n    function _xp(\r\n        uint256[] memory balances,\r\n        uint256[] memory precisionMultipliers\r\n    ) internal pure returns (uint256[] memory) {\r\n        uint256 numTokens = balances.length;\r\n        require(\r\n            numTokens == precisionMultipliers.length,\r\n            \"Balances must match multipliers\"\r\n        );\r\n        uint256[] memory xp = new uint256[](numTokens);\r\n        for (uint256 i = 0; i < numTokens; i++) {\r\n            xp[i] = balances[i].mul(precisionMultipliers[i]);\r\n        }\r\n        return xp;\r\n    }\r\n\r\n    /**\r\n     * @notice Return the precision-adjusted balances of all tokens in the pool\r\n     * @param self Swap struct to read from\r\n     * @param balances array of balances to scale\r\n     * @return balances array \"scaled\" to the pool's precision, allowing\r\n     * them to be more easily compared.\r\n     */\r\n    function _xp(Swap storage self, uint256[] memory balances)\r\n        internal\r\n        view\r\n        returns (uint256[] memory)\r\n    {\r\n        return _xp(balances, self.tokenPrecisionMultipliers);\r\n    }\r\n\r\n    /**\r\n     * @notice Return the precision-adjusted balances of all tokens in the pool\r\n     * @param self Swap struct to read from\r\n     * @return the pool balances \"scaled\" to the pool's precision, allowing\r\n     * them to be more easily compared.\r\n     */\r\n    function _xp(Swap storage self) internal view returns (uint256[] memory) {\r\n        return _xp(self.balances, self.tokenPrecisionMultipliers);\r\n    }\r\n\r\n    /**\r\n     * @notice Get the virtual price, to help calculate profit\r\n     * @param self Swap struct to read from\r\n     * @return the virtual price, scaled to precision of POOL_PRECISION_DECIMALS\r\n     */\r\n    function getVirtualPrice(Swap storage self)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 d = getD(_xp(self), _getAPrecise(self));\r\n        uint256 supply = self.lpToken.totalSupply();\r\n        if (supply > 0) {\r\n            return\r\n                d.mul(10**uint256(ERC20(self.lpToken).decimals())).div(supply);\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * @notice Calculate the new balances of the tokens given the indexes of the token\r\n     * that is swapped from (FROM) and the token that is swapped to (TO).\r\n     * This function is used as a helper function to calculate how much TO token\r\n     * the user should receive on swap.\r\n     *\r\n     * @param self Swap struct to read from\r\n     * @param tokenIndexFrom index of FROM token\r\n     * @param tokenIndexTo index of TO token\r\n     * @param x the new total amount of FROM token\r\n     * @param xp balances of the tokens in the pool\r\n     * @return the amount of TO token that should remain in the pool\r\n     */\r\n    function getY(\r\n        Swap storage self,\r\n        uint8 tokenIndexFrom,\r\n        uint8 tokenIndexTo,\r\n        uint256 x,\r\n        uint256[] memory xp\r\n    ) internal view returns (uint256) {\r\n        uint256 numTokens = self.pooledTokens.length;\r\n        require(\r\n            tokenIndexFrom != tokenIndexTo,\r\n            \"Can't compare token to itself\"\r\n        );\r\n        require(\r\n            tokenIndexFrom < numTokens && tokenIndexTo < numTokens,\r\n            \"Tokens must be in pool\"\r\n        );\r\n\r\n        uint256 a = _getAPrecise(self);\r\n        uint256 d = getD(xp, a);\r\n        uint256 c = d;\r\n        uint256 s;\r\n        uint256 nA = numTokens.mul(a);\r\n\r\n        uint256 _x;\r\n        for (uint256 i = 0; i < numTokens; i++) {\r\n            if (i == tokenIndexFrom) {\r\n                _x = x;\r\n            } else if (i != tokenIndexTo) {\r\n                _x = xp[i];\r\n            } else {\r\n                continue;\r\n            }\r\n            s = s.add(_x);\r\n            c = c.mul(d).div(_x.mul(numTokens));\r\n            // If we were to protect the division loss we would have to keep the denominator separate\r\n            // and divide at the end. However this leads to overflow with large numTokens or/and D.\r\n            // c = c * D * D * D * ... overflow!\r\n        }\r\n        c = c.mul(d).mul(A_PRECISION).div(nA.mul(numTokens));\r\n        uint256 b = s.add(d.mul(A_PRECISION).div(nA));\r\n        uint256 yPrev;\r\n        uint256 y = d;\r\n\r\n        // iterative approximation\r\n        for (uint256 i = 0; i < MAX_LOOP_LIMIT; i++) {\r\n            yPrev = y;\r\n            y = y.mul(y).add(c).div(y.mul(2).add(b).sub(d));\r\n            if (y.within1(yPrev)) {\r\n                return y;\r\n            }\r\n        }\r\n        revert(\"Approximation did not converge\");\r\n    }\r\n\r\n    /**\r\n     * @notice Externally calculates a swap between two tokens.\r\n     * @param self Swap struct to read from\r\n     * @param tokenIndexFrom the token to sell\r\n     * @param tokenIndexTo the token to buy\r\n     * @param dx the number of tokens to sell. If the token charges a fee on transfers,\r\n     * use the amount that gets transferred after the fee.\r\n     * @return dy the number of tokens the user will get\r\n     */\r\n    function calculateSwap(\r\n        Swap storage self,\r\n        uint8 tokenIndexFrom,\r\n        uint8 tokenIndexTo,\r\n        uint256 dx\r\n    ) external view returns (uint256 dy) {\r\n        (dy, ) = _calculateSwap(self, tokenIndexFrom, tokenIndexTo, dx);\r\n    }\r\n\r\n    /**\r\n     * @notice Internally calculates a swap between two tokens.\r\n     *\r\n     * @dev The caller is expected to transfer the actual amounts (dx and dy)\r\n     * using the token contracts.\r\n     *\r\n     * @param self Swap struct to read from\r\n     * @param tokenIndexFrom the token to sell\r\n     * @param tokenIndexTo the token to buy\r\n     * @param dx the number of tokens to sell. If the token charges a fee on transfers,\r\n     * use the amount that gets transferred after the fee.\r\n     * @return dy the number of tokens the user will get\r\n     * @return dyFee the associated fee\r\n     */\r\n    function _calculateSwap(\r\n        Swap storage self,\r\n        uint8 tokenIndexFrom,\r\n        uint8 tokenIndexTo,\r\n        uint256 dx\r\n    ) internal view returns (uint256 dy, uint256 dyFee) {\r\n        uint256[] memory xp = _xp(self);\r\n        require(\r\n            tokenIndexFrom < xp.length && tokenIndexTo < xp.length,\r\n            \"Token index out of range\"\r\n        );\r\n        uint256 x =\r\n            dx.mul(self.tokenPrecisionMultipliers[tokenIndexFrom]).add(\r\n                xp[tokenIndexFrom]\r\n            );\r\n        uint256 y = getY(self, tokenIndexFrom, tokenIndexTo, x, xp);\r\n        dy = xp[tokenIndexTo].sub(y).sub(1);\r\n        dyFee = dy.mul(self.swapFee).div(FEE_DENOMINATOR);\r\n        dy = dy.sub(dyFee).div(self.tokenPrecisionMultipliers[tokenIndexTo]);\r\n    }\r\n\r\n    /**\r\n     * @notice A simple method to calculate amount of each underlying\r\n     * tokens that is returned upon burning given amount of\r\n     * LP tokens\r\n     *\r\n     * @param account the address that is removing liquidity. required for withdraw fee calculation\r\n     * @param amount the amount of LP tokens that would to be burned on\r\n     * withdrawal\r\n     * @return array of amounts of tokens user will receive\r\n     */\r\n    function calculateRemoveLiquidity(\r\n        Swap storage self,\r\n        address account,\r\n        uint256 amount\r\n    ) external view returns (uint256[] memory) {\r\n        return _calculateRemoveLiquidity(self, account, amount);\r\n    }\r\n\r\n    function _calculateRemoveLiquidity(\r\n        Swap storage self,\r\n        address account,\r\n        uint256 amount\r\n    ) internal view returns (uint256[] memory) {\r\n        uint256 totalSupply = self.lpToken.totalSupply();\r\n        require(amount <= totalSupply, \"Cannot exceed total supply\");\r\n\r\n        uint256 feeAdjustedAmount =\r\n            amount\r\n                .mul(\r\n                FEE_DENOMINATOR.sub(calculateCurrentWithdrawFee(self, account))\r\n            )\r\n                .div(FEE_DENOMINATOR);\r\n\r\n        uint256[] memory amounts = new uint256[](self.pooledTokens.length);\r\n\r\n        for (uint256 i = 0; i < self.pooledTokens.length; i++) {\r\n            amounts[i] = self.balances[i].mul(feeAdjustedAmount).div(\r\n                totalSupply\r\n            );\r\n        }\r\n        return amounts;\r\n    }\r\n\r\n    /**\r\n     * @notice Calculate the fee that is applied when the given user withdraws.\r\n     * Withdraw fee decays linearly over 4 weeks.\r\n     * @param user address you want to calculate withdraw fee of\r\n     * @return current withdraw fee of the user\r\n     */\r\n    function calculateCurrentWithdrawFee(Swap storage self, address user)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 endTime = self.depositTimestamp[user].add(4 weeks);\r\n        if (endTime > block.timestamp) {\r\n            uint256 timeLeftover = endTime.sub(block.timestamp);\r\n            return\r\n                self\r\n                    .defaultWithdrawFee\r\n                    .mul(self.withdrawFeeMultiplier[user])\r\n                    .mul(timeLeftover)\r\n                    .div(4 weeks)\r\n                    .div(FEE_DENOMINATOR);\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * @notice A simple method to calculate prices from deposits or\r\n     * withdrawals, excluding fees but including slippage. This is\r\n     * helpful as an input into the various \"min\" parameters on calls\r\n     * to fight front-running\r\n     *\r\n     * @dev This shouldn't be used outside frontends for user estimates.\r\n     *\r\n     * @param self Swap struct to read from\r\n     * @param account address of the account depositing or withdrawing tokens\r\n     * @param amounts an array of token amounts to deposit or withdrawal,\r\n     * corresponding to pooledTokens. The amount should be in each\r\n     * pooled token's native precision. If a token charges a fee on transfers,\r\n     * use the amount that gets transferred after the fee.\r\n     * @param deposit whether this is a deposit or a withdrawal\r\n     * @return if deposit was true, total amount of lp token that will be minted and if\r\n     * deposit was false, total amount of lp token that will be burned\r\n     */\r\n    function calculateTokenAmount(\r\n        Swap storage self,\r\n        address account,\r\n        uint256[] calldata amounts,\r\n        bool deposit\r\n    ) external view returns (uint256) {\r\n        uint256 numTokens = self.pooledTokens.length;\r\n        uint256 a = _getAPrecise(self);\r\n        uint256 d0 = getD(_xp(self, self.balances), a);\r\n        uint256[] memory balances1 = self.balances;\r\n        for (uint256 i = 0; i < numTokens; i++) {\r\n            if (deposit) {\r\n                balances1[i] = balances1[i].add(amounts[i]);\r\n            } else {\r\n                balances1[i] = balances1[i].sub(\r\n                    amounts[i],\r\n                    \"Cannot withdraw more than available\"\r\n                );\r\n            }\r\n        }\r\n        uint256 d1 = getD(_xp(self, balances1), a);\r\n        uint256 totalSupply = self.lpToken.totalSupply();\r\n\r\n        if (deposit) {\r\n            return d1.sub(d0).mul(totalSupply).div(d0);\r\n        } else {\r\n            return\r\n                d0.sub(d1).mul(totalSupply).div(d0).mul(FEE_DENOMINATOR).div(\r\n                    FEE_DENOMINATOR.sub(\r\n                        calculateCurrentWithdrawFee(self, account)\r\n                    )\r\n                );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice return accumulated amount of admin fees of the token with given index\r\n     * @param self Swap struct to read from\r\n     * @param index Index of the pooled token\r\n     * @return admin balance in the token's precision\r\n     */\r\n    function getAdminBalance(Swap storage self, uint256 index)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        require(index < self.pooledTokens.length, \"Token index out of range\");\r\n        return\r\n            self.pooledTokens[index].balanceOf(address(this)).sub(\r\n                self.balances[index]\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @notice internal helper function to calculate fee per token multiplier used in\r\n     * swap fee calculations\r\n     * @param self Swap struct to read from\r\n     */\r\n    function _feePerToken(Swap storage self) internal view returns (uint256) {\r\n        return\r\n            self.swapFee.mul(self.pooledTokens.length).div(\r\n                self.pooledTokens.length.sub(1).mul(4)\r\n            );\r\n    }\r\n\r\n    /*** STATE MODIFYING FUNCTIONS ***/\r\n\r\n    /**\r\n     * @notice swap two tokens in the pool\r\n     * @param self Swap struct to read from and write to\r\n     * @param tokenIndexFrom the token the user wants to sell\r\n     * @param tokenIndexTo the token the user wants to buy\r\n     * @param dx the amount of tokens the user wants to sell\r\n     * @param minDy the min amount the user would like to receive, or revert.\r\n     * @return amount of token user received on swap\r\n     */\r\n    function swap(\r\n        Swap storage self,\r\n        uint8 tokenIndexFrom,\r\n        uint8 tokenIndexTo,\r\n        uint256 dx,\r\n        uint256 minDy\r\n    ) external returns (uint256) {\r\n        require(\r\n            dx <= self.pooledTokens[tokenIndexFrom].balanceOf(msg.sender),\r\n            \"Cannot swap more than you own\"\r\n        );\r\n\r\n        // Transfer tokens first to see if a fee was charged on transfer\r\n        uint256 beforeBalance =\r\n            self.pooledTokens[tokenIndexFrom].balanceOf(address(this));\r\n        self.pooledTokens[tokenIndexFrom].safeTransferFrom(\r\n            msg.sender,\r\n            address(this),\r\n            dx\r\n        );\r\n\r\n        // Use the actual transferred amount for AMM math\r\n        uint256 transferredDx =\r\n            self.pooledTokens[tokenIndexFrom].balanceOf(address(this)).sub(\r\n                beforeBalance\r\n            );\r\n\r\n        (uint256 dy, uint256 dyFee) =\r\n            _calculateSwap(self, tokenIndexFrom, tokenIndexTo, transferredDx);\r\n        require(dy >= minDy, \"Swap didn't result in min tokens\");\r\n\r\n        uint256 dyAdminFee =\r\n            dyFee.mul(self.adminFee).div(FEE_DENOMINATOR).div(\r\n                self.tokenPrecisionMultipliers[tokenIndexTo]\r\n            );\r\n\r\n        self.balances[tokenIndexFrom] = self.balances[tokenIndexFrom].add(\r\n            transferredDx\r\n        );\r\n        self.balances[tokenIndexTo] = self.balances[tokenIndexTo].sub(dy).sub(\r\n            dyAdminFee\r\n        );\r\n\r\n        self.pooledTokens[tokenIndexTo].safeTransfer(msg.sender, dy);\r\n\r\n        emit TokenSwap(\r\n            msg.sender,\r\n            transferredDx,\r\n            dy,\r\n            tokenIndexFrom,\r\n            tokenIndexTo\r\n        );\r\n\r\n        return dy;\r\n    }\r\n\r\n    /**\r\n     * @notice Add liquidity to the pool\r\n     * @param self Swap struct to read from and write to\r\n     * @param amounts the amounts of each token to add, in their native precision\r\n     * @param minToMint the minimum LP tokens adding this amount of liquidity\r\n     * should mint, otherwise revert. Handy for front-running mitigation\r\n     * @return amount of LP token user received\r\n     */\r\n    function addLiquidity(\r\n        Swap storage self,\r\n        uint256[] memory amounts,\r\n        uint256 minToMint\r\n    ) external returns (uint256) {\r\n        require(\r\n            amounts.length == self.pooledTokens.length,\r\n            \"Amounts must match pooled tokens\"\r\n        );\r\n\r\n        uint256[] memory fees = new uint256[](self.pooledTokens.length);\r\n\r\n        // current state\r\n        AddLiquidityInfo memory v = AddLiquidityInfo(0, 0, 0, 0);\r\n\r\n        if (self.lpToken.totalSupply() != 0) {\r\n            v.d0 = getD(self);\r\n        }\r\n        uint256[] memory newBalances = self.balances;\r\n\r\n        for (uint256 i = 0; i < self.pooledTokens.length; i++) {\r\n            require(\r\n                self.lpToken.totalSupply() != 0 || amounts[i] > 0,\r\n                \"Must supply all tokens in pool\"\r\n            );\r\n\r\n            // Transfer tokens first to see if a fee was charged on transfer\r\n            if (amounts[i] != 0) {\r\n                uint256 beforeBalance =\r\n                    self.pooledTokens[i].balanceOf(address(this));\r\n                self.pooledTokens[i].safeTransferFrom(\r\n                    msg.sender,\r\n                    address(this),\r\n                    amounts[i]\r\n                );\r\n\r\n                // Update the amounts[] with actual transfer amount\r\n                amounts[i] = self.pooledTokens[i].balanceOf(address(this)).sub(\r\n                    beforeBalance\r\n                );\r\n            }\r\n\r\n            newBalances[i] = self.balances[i].add(amounts[i]);\r\n        }\r\n\r\n        // invariant after change\r\n        v.preciseA = _getAPrecise(self);\r\n        v.d1 = getD(_xp(self, newBalances), v.preciseA);\r\n        require(v.d1 > v.d0, \"D should increase\");\r\n\r\n        // updated to reflect fees and calculate the user's LP tokens\r\n        v.d2 = v.d1;\r\n        if (self.lpToken.totalSupply() != 0) {\r\n            uint256 feePerToken = _feePerToken(self);\r\n            for (uint256 i = 0; i < self.pooledTokens.length; i++) {\r\n                uint256 idealBalance = v.d1.mul(self.balances[i]).div(v.d0);\r\n                fees[i] = feePerToken\r\n                    .mul(idealBalance.difference(newBalances[i]))\r\n                    .div(FEE_DENOMINATOR);\r\n                self.balances[i] = newBalances[i].sub(\r\n                    fees[i].mul(self.adminFee).div(FEE_DENOMINATOR)\r\n                );\r\n                newBalances[i] = newBalances[i].sub(fees[i]);\r\n            }\r\n            v.d2 = getD(_xp(self, newBalances), v.preciseA);\r\n        } else {\r\n            // the initial depositor doesn't pay fees\r\n            self.balances = newBalances;\r\n        }\r\n\r\n        uint256 toMint;\r\n        uint256 toMintFee;\r\n        uint256 toMintUser;\r\n        if (self.lpToken.totalSupply() == 0) {\r\n            toMint = v.d1;\r\n        } else {\r\n            toMint = v.d2.sub(v.d0).mul(self.lpToken.totalSupply()).div(v.d0);\r\n        }\r\n\r\n        require(toMint >= minToMint, \"Couldn't mint min requested\");\r\n        // if deposit fee is none, mint full amount\r\n        if (self.defaultDepositFee == 0) {\r\n            self.lpToken.mint(msg.sender, toMint);\r\n        } else {\r\n            // mint the user's LP tokens minus the deposit fee\r\n            toMintFee = toMint.mul(self.defaultDepositFee).div(FEE_DENOMINATOR);\r\n            toMintUser = toMint.sub(toMintFee);\r\n            self.lpToken.mint(self.devaddr, toMintFee);\r\n            self.lpToken.mint(msg.sender, toMintUser);\r\n        }\r\n       \r\n        emit AddLiquidity(\r\n            msg.sender,\r\n            amounts,\r\n            fees,\r\n            v.d1,\r\n            self.lpToken.totalSupply()\r\n        );\r\n\r\n        return toMint;\r\n    }\r\n\r\n    /**\r\n     * @notice Update the withdraw fee for `user`. If the user is currently\r\n     * not providing liquidity in the pool, sets to default value. If not, recalculate\r\n     * the starting withdraw fee based on the last deposit's time & amount relative\r\n     * to the new deposit.\r\n     *\r\n     * @param self Swap struct to read from and write to\r\n     * @param user address of the user depositing tokens\r\n     * @param toMint amount of pool tokens to be minted\r\n     */\r\n    function updateUserWithdrawFee(\r\n        Swap storage self,\r\n        address user,\r\n        uint256 toMint\r\n    ) external {\r\n        _updateUserWithdrawFee(self, user, toMint);\r\n    }\r\n\r\n    function _updateUserWithdrawFee(\r\n        Swap storage self,\r\n        address user,\r\n        uint256 toMint\r\n    ) internal {\r\n        // If token is transferred to address 0 (or burned), don't update the fee.\r\n        if (user == address(0)) {\r\n            return;\r\n        }\r\n        if (self.defaultWithdrawFee == 0) {\r\n            // If current fee is set to 0%, set multiplier to FEE_DENOMINATOR\r\n            self.withdrawFeeMultiplier[user] = FEE_DENOMINATOR;\r\n        } else {\r\n            // Otherwise, calculate appropriate discount based on last deposit amount\r\n            uint256 currentFee = calculateCurrentWithdrawFee(self, user);\r\n            uint256 currentBalance = self.lpToken.balanceOf(user);\r\n\r\n            // ((currentBalance * currentFee) + (toMint * defaultWithdrawFee)) * FEE_DENOMINATOR /\r\n            // ((toMint + currentBalance) * defaultWithdrawFee)\r\n            self.withdrawFeeMultiplier[user] = currentBalance\r\n                .mul(currentFee)\r\n                .add(toMint.mul(self.defaultWithdrawFee))\r\n                .mul(FEE_DENOMINATOR)\r\n                .div(toMint.add(currentBalance).mul(self.defaultWithdrawFee));\r\n        }\r\n        self.depositTimestamp[user] = block.timestamp;\r\n    }\r\n\r\n    /**\r\n     * @notice Burn LP tokens to remove liquidity from the pool.\r\n     * @dev Liquidity can always be removed, even when the pool is paused.\r\n     * @param self Swap struct to read from and write to\r\n     * @param amount the amount of LP tokens to burn\r\n     * @param minAmounts the minimum amounts of each token in the pool\r\n     * acceptable for this burn. Useful as a front-running mitigation\r\n     * @return amounts of tokens the user received\r\n     */\r\n    function removeLiquidity(\r\n        Swap storage self,\r\n        uint256 amount,\r\n        uint256[] calldata minAmounts\r\n    ) external returns (uint256[] memory) {\r\n        require(amount <= self.lpToken.balanceOf(msg.sender), \">LP.balanceOf\");\r\n        require(\r\n            minAmounts.length == self.pooledTokens.length,\r\n            \"minAmounts must match poolTokens\"\r\n        );\r\n\r\n        uint256[] memory amounts =\r\n            _calculateRemoveLiquidity(self, msg.sender, amount);\r\n\r\n        for (uint256 i = 0; i < amounts.length; i++) {\r\n            require(amounts[i] >= minAmounts[i], \"amounts[i] < minAmounts[i]\");\r\n            self.balances[i] = self.balances[i].sub(amounts[i]);\r\n            self.pooledTokens[i].safeTransfer(msg.sender, amounts[i]);\r\n        }\r\n\r\n        self.lpToken.burnFrom(msg.sender, amount);\r\n\r\n        emit RemoveLiquidity(msg.sender, amounts, self.lpToken.totalSupply());\r\n\r\n        return amounts;\r\n    }\r\n\r\n    /**\r\n     * @notice Remove liquidity from the pool all in one token.\r\n     * @param self Swap struct to read from and write to\r\n     * @param tokenAmount the amount of the lp tokens to burn\r\n     * @param tokenIndex the index of the token you want to receive\r\n     * @param minAmount the minimum amount to withdraw, otherwise revert\r\n     * @return amount chosen token that user received\r\n     */\r\n    function removeLiquidityOneToken(\r\n        Swap storage self,\r\n        uint256 tokenAmount,\r\n        uint8 tokenIndex,\r\n        uint256 minAmount\r\n    ) external returns (uint256) {\r\n        uint256 totalSupply = self.lpToken.totalSupply();\r\n        uint256 numTokens = self.pooledTokens.length;\r\n        require(\r\n            tokenAmount <= self.lpToken.balanceOf(msg.sender),\r\n            \">LP.balanceOf\"\r\n        );\r\n        require(tokenIndex < numTokens, \"Token not found\");\r\n\r\n        uint256 dyFee;\r\n        uint256 dy;\r\n\r\n        (dy, dyFee) = calculateWithdrawOneToken(\r\n            self,\r\n            msg.sender,\r\n            tokenAmount,\r\n            tokenIndex\r\n        );\r\n\r\n        require(dy >= minAmount, \"dy < minAmount\");\r\n\r\n        self.balances[tokenIndex] = self.balances[tokenIndex].sub(\r\n            dy.add(dyFee.mul(self.adminFee).div(FEE_DENOMINATOR))\r\n        );\r\n        self.lpToken.burnFrom(msg.sender, tokenAmount);\r\n        self.pooledTokens[tokenIndex].safeTransfer(msg.sender, dy);\r\n\r\n        emit RemoveLiquidityOne(\r\n            msg.sender,\r\n            tokenAmount,\r\n            totalSupply,\r\n            tokenIndex,\r\n            dy\r\n        );\r\n\r\n        return dy;\r\n    }\r\n\r\n    /**\r\n     * @notice Remove liquidity from the pool, weighted differently than the\r\n     * pool's current balances.\r\n     *\r\n     * @param self Swap struct to read from and write to\r\n     * @param amounts how much of each token to withdraw\r\n     * @param maxBurnAmount the max LP token provider is willing to pay to\r\n     * remove liquidity. Useful as a front-running mitigation.\r\n     * @return actual amount of LP tokens burned in the withdrawal\r\n     */\r\n    function removeLiquidityImbalance(\r\n        Swap storage self,\r\n        uint256[] memory amounts,\r\n        uint256 maxBurnAmount\r\n    ) public returns (uint256) {\r\n        require(\r\n            amounts.length == self.pooledTokens.length,\r\n            \"Amounts should match pool tokens\"\r\n        );\r\n        require(\r\n            maxBurnAmount <= self.lpToken.balanceOf(msg.sender) &&\r\n                maxBurnAmount != 0,\r\n            \">LP.balanceOf\"\r\n        );\r\n\r\n        RemoveLiquidityImbalanceInfo memory v =\r\n            RemoveLiquidityImbalanceInfo(0, 0, 0, 0);\r\n\r\n        uint256 tokenSupply = self.lpToken.totalSupply();\r\n        uint256 feePerToken = _feePerToken(self);\r\n\r\n        uint256[] memory balances1 = self.balances;\r\n\r\n        v.preciseA = _getAPrecise(self);\r\n        v.d0 = getD(_xp(self), v.preciseA);\r\n        for (uint256 i = 0; i < self.pooledTokens.length; i++) {\r\n            balances1[i] = balances1[i].sub(\r\n                amounts[i],\r\n                \"Cannot withdraw more than available\"\r\n            );\r\n        }\r\n        v.d1 = getD(_xp(self, balances1), v.preciseA);\r\n        uint256[] memory fees = new uint256[](self.pooledTokens.length);\r\n\r\n        for (uint256 i = 0; i < self.pooledTokens.length; i++) {\r\n            uint256 idealBalance = v.d1.mul(self.balances[i]).div(v.d0);\r\n            uint256 difference = idealBalance.difference(balances1[i]);\r\n            fees[i] = feePerToken.mul(difference).div(FEE_DENOMINATOR);\r\n            self.balances[i] = balances1[i].sub(\r\n                fees[i].mul(self.adminFee).div(FEE_DENOMINATOR)\r\n            );\r\n            balances1[i] = balances1[i].sub(fees[i]);\r\n        }\r\n\r\n        v.d2 = getD(_xp(self, balances1), v.preciseA);\r\n\r\n        uint256 tokenAmount = v.d0.sub(v.d2).mul(tokenSupply).div(v.d0);\r\n        require(tokenAmount != 0, \"Burnt amount cannot be zero\");\r\n        tokenAmount = tokenAmount.add(1).mul(FEE_DENOMINATOR).div(\r\n            FEE_DENOMINATOR.sub(calculateCurrentWithdrawFee(self, msg.sender))\r\n        );\r\n\r\n        require(tokenAmount <= maxBurnAmount, \"tokenAmount > maxBurnAmount\");\r\n\r\n        self.lpToken.burnFrom(msg.sender, tokenAmount);\r\n\r\n        for (uint256 i = 0; i < self.pooledTokens.length; i++) {\r\n            self.pooledTokens[i].safeTransfer(msg.sender, amounts[i]);\r\n        }\r\n\r\n        emit RemoveLiquidityImbalance(\r\n            msg.sender,\r\n            amounts,\r\n            fees,\r\n            v.d1,\r\n            tokenSupply.sub(tokenAmount)\r\n        );\r\n\r\n        return tokenAmount;\r\n    }\r\n\r\n    /**\r\n     * @notice withdraw all admin fees to a given address\r\n     * @param self Swap struct to withdraw fees from\r\n     * @param to Address to send the fees to\r\n     */\r\n    function withdrawAdminFees(Swap storage self, address to) external {\r\n        for (uint256 i = 0; i < self.pooledTokens.length; i++) {\r\n            IERC20 token = self.pooledTokens[i];\r\n            uint256 balance =\r\n                token.balanceOf(address(this)).sub(self.balances[i]);\r\n            if (balance != 0) {\r\n                token.safeTransfer(to, balance);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Sets the admin fee\r\n     * @dev adminFee cannot be higher than 100% of the swap fee\r\n     * @param self Swap struct to update\r\n     * @param newAdminFee new admin fee to be applied on future transactions\r\n     */\r\n    function setAdminFee(Swap storage self, uint256 newAdminFee) external {\r\n        require(newAdminFee <= MAX_ADMIN_FEE, \"Fee is too high\");\r\n        self.adminFee = newAdminFee;\r\n\r\n        emit NewAdminFee(newAdminFee);\r\n    }\r\n\r\n    /**\r\n     * @notice update the swap fee\r\n     * @dev fee cannot be higher than 1% of each swap\r\n     * @param self Swap struct to update\r\n     * @param newSwapFee new swap fee to be applied on future transactions\r\n     */\r\n    function setSwapFee(Swap storage self, uint256 newSwapFee) external {\r\n        require(newSwapFee <= MAX_SWAP_FEE, \"Fee is too high\");\r\n        self.swapFee = newSwapFee;\r\n\r\n        emit NewSwapFee(newSwapFee);\r\n    }\r\n\r\n    /**\r\n     * @notice update the default withdraw fee. This also affects deposits made in the past as well.\r\n     * @param self Swap struct to update\r\n     * @param newWithdrawFee new withdraw fee to be applied\r\n     */\r\n    function setDefaultWithdrawFee(Swap storage self, uint256 newWithdrawFee)\r\n        external\r\n    {\r\n        require(newWithdrawFee <= MAX_WITHDRAW_FEE, \"Fee is too high\");\r\n        self.defaultWithdrawFee = newWithdrawFee;\r\n\r\n        emit NewWithdrawFee(newWithdrawFee);\r\n    }\r\n\r\n    /**\r\n     * @notice update the default deposit fee. \r\n     * @param self Swap struct to update\r\n     * @param newDepositFee new deposit fee to be applied\r\n     */\r\n    function setDefaultDepositFee(Swap storage self, uint256 newDepositFee)\r\n        external\r\n    {\r\n        require(newDepositFee <= MAX_DEPOSIT_FEE, \"Fee is too high\");\r\n        self.defaultDepositFee = newDepositFee;\r\n\r\n        emit NewDepositFee(newDepositFee);\r\n    }\r\n\r\n\r\n    /**\r\n     * @notice Start ramping up or down A parameter towards given futureA_ and futureTime_\r\n     * Checks if the change is too rapid, and commits the new A value only when it falls under\r\n     * the limit range.\r\n     * @param self Swap struct to update\r\n     * @param futureA_ the new A to ramp towards\r\n     * @param futureTime_ timestamp when the new A should be reached\r\n     */\r\n    function rampA(\r\n        Swap storage self,\r\n        uint256 futureA_,\r\n        uint256 futureTime_\r\n    ) external {\r\n        require(\r\n            block.timestamp >= self.initialATime.add(1 days),\r\n            \"Wait 1 day before starting ramp\"\r\n        );\r\n        require(\r\n            futureTime_ >= block.timestamp.add(MIN_RAMP_TIME),\r\n            \"Insufficient ramp time\"\r\n        );\r\n        require(\r\n            futureA_ > 0 && futureA_ < MAX_A,\r\n            \"futureA_ must be > 0 and < MAX_A\"\r\n        );\r\n\r\n        uint256 initialAPrecise = _getAPrecise(self);\r\n        uint256 futureAPrecise = futureA_.mul(A_PRECISION);\r\n\r\n        if (futureAPrecise < initialAPrecise) {\r\n            require(\r\n                futureAPrecise.mul(MAX_A_CHANGE) >= initialAPrecise,\r\n                \"futureA_ is too small\"\r\n            );\r\n        } else {\r\n            require(\r\n                futureAPrecise <= initialAPrecise.mul(MAX_A_CHANGE),\r\n                \"futureA_ is too large\"\r\n            );\r\n        }\r\n\r\n        self.initialA = initialAPrecise;\r\n        self.futureA = futureAPrecise;\r\n        self.initialATime = block.timestamp;\r\n        self.futureATime = futureTime_;\r\n\r\n        emit RampA(\r\n            initialAPrecise,\r\n            futureAPrecise,\r\n            block.timestamp,\r\n            futureTime_\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Stops ramping A immediately. Once this function is called, rampA()\r\n     * cannot be called for another 24 hours\r\n     * @param self Swap struct to update\r\n     */\r\n    function stopRampA(Swap storage self) external {\r\n        require(self.futureATime > block.timestamp, \"Ramp is already stopped\");\r\n        uint256 currentA = _getAPrecise(self);\r\n\r\n        self.initialA = currentA;\r\n        self.futureA = currentA;\r\n        self.initialATime = block.timestamp;\r\n        self.futureATime = block.timestamp;\r\n\r\n        emit StopRampA(currentA, block.timestamp);\r\n    }\r\n\r\n    function setDevAddress(Swap storage self, address _devaddr) public {\r\n        require(msg.sender == self.devaddr, \"dev: wut?\");\r\n        self.devaddr = _devaddr;\r\n    }\r\n}"
    },
    "contracts/stable/MathUtils.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.6.12;\r\n\r\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\r\n\r\n/**\r\n * @title MathUtils library\r\n * @notice A library to be used in conjunction with SafeMath. Contains functions for calculating\r\n * differences between two uint256.\r\n */\r\nlibrary MathUtils {\r\n    /**\r\n     * @notice Compares a and b and returns true if the difference between a and b\r\n     *         is less than 1 or equal to each other.\r\n     * @param a uint256 to compare with\r\n     * @param b uint256 to compare with\r\n     * @return True if the difference between a and b is less than 1 or equal,\r\n     *         otherwise return false\r\n     */\r\n    function within1(uint256 a, uint256 b) external pure returns (bool) {\r\n        return (_difference(a, b) <= 1);\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates absolute difference between a and b\r\n     * @param a uint256 to compare with\r\n     * @param b uint256 to compare with\r\n     * @return Difference between a and b\r\n     */\r\n    function difference(uint256 a, uint256 b) external pure returns (uint256) {\r\n        return _difference(a, b);\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates absolute difference between a and b\r\n     * @param a uint256 to compare with\r\n     * @param b uint256 to compare with\r\n     * @return Difference between a and b\r\n     */\r\n    function _difference(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a > b) {\r\n            return a - b;\r\n        }\r\n        return b - a;\r\n    }\r\n}\r\n"
    },
    "contracts/stable/LPToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.6.12;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20Burnable.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\r\nimport \"./ISwap.sol\";\r\n\r\n/**\r\n * @title Liquidity Provider Token\r\n * @notice This token is an ERC20 detailed token with added capability to be minted by the owner.\r\n * It is used to represent user's shares when providing liquidity to swap contracts.\r\n */\r\ncontract LPToken is ERC20Burnable, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    // Address of the swap contract that owns this LP token. When a user adds liquidity to the swap contract,\r\n    // they receive a proportionate amount of this LPToken.\r\n    ISwap public immutable swap;\r\n\r\n    /**\r\n     * @notice Deploys LPToken contract with given name, symbol, and decimals\r\n     * @dev the caller of this constructor will become the owner of this contract\r\n     * @param name_ name of this token\r\n     * @param symbol_ symbol of this token\r\n     * @param decimals_ number of decimals this token will be based on\r\n     */\r\n    constructor(\r\n        string memory name_,\r\n        string memory symbol_,\r\n        uint8 decimals_\r\n    ) public ERC20(name_, symbol_) {\r\n        _setupDecimals(decimals_);\r\n        swap = ISwap(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @notice Mints the given amount of LPToken to the recipient.\r\n     * @dev only owner can call this mint function\r\n     * @param recipient address of account to receive the tokens\r\n     * @param amount amount of tokens to mint\r\n     */\r\n    function mint(\r\n        address recipient,\r\n        uint256 amount\r\n    ) external onlyOwner {\r\n        require(amount != 0, \"amount == 0\");\r\n        _mint(recipient, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Overrides ERC20._beforeTokenTransfer() which get called on every transfers including\r\n     * minting and burning. This ensures that swap.updateUserWithdrawFees are called everytime.\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal override(ERC20) {\r\n        super._beforeTokenTransfer(from, to, amount);\r\n        swap.updateUserWithdrawFee(to, amount);\r\n    }\r\n}\r\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20Burnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../../utils/Context.sol\";\nimport \"./ERC20.sol\";\n\n/**\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\n * tokens and those that they have an allowance for, in a way that can be\n * recognized off-chain (via event analysis).\n */\nabstract contract ERC20Burnable is Context, ERC20 {\n    using SafeMath for uint256;\n\n    /**\n     * @dev Destroys `amount` tokens from the caller.\n     *\n     * See {ERC20-_burn}.\n     */\n    function burn(uint256 amount) public virtual {\n        _burn(_msgSender(), amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\n     * allowance.\n     *\n     * See {ERC20-_burn} and {ERC20-allowance}.\n     *\n     * Requirements:\n     *\n     * - the caller must have allowance for ``accounts``'s tokens of at least\n     * `amount`.\n     */\n    function burnFrom(address account, uint256 amount) public virtual {\n        uint256 decreasedAllowance = allowance(account, _msgSender()).sub(amount, \"ERC20: burn amount exceeds allowance\");\n\n        _approve(account, _msgSender(), decreasedAllowance);\n        _burn(account, amount);\n    }\n}\n"
    },
    "contracts/stable/ISwap.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.6.12;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\n\r\ninterface ISwap {\r\n    // pool data view functions\r\n    function getA() external view returns (uint256);\r\n\r\n    function getToken(uint8 index) external view returns (IERC20);\r\n\r\n    function getTokenIndex(address tokenAddress) external view returns (uint8);\r\n\r\n    function getTokenBalance(uint8 index) external view returns (uint256);\r\n\r\n    function getVirtualPrice() external view returns (uint256);\r\n\r\n    // min return calculation functions\r\n    function calculateSwap(\r\n        uint8 tokenIndexFrom,\r\n        uint8 tokenIndexTo,\r\n        uint256 dx\r\n    ) external view returns (uint256);\r\n\r\n    function calculateTokenAmount(\r\n        address account,\r\n        uint256[] calldata amounts,\r\n        bool deposit\r\n    ) external view returns (uint256);\r\n\r\n    function calculateRemoveLiquidity(address account, uint256 amount)\r\n        external\r\n        view\r\n        returns (uint256[] memory);\r\n\r\n    function calculateRemoveLiquidityOneToken(\r\n        address account,\r\n        uint256 tokenAmount,\r\n        uint8 tokenIndex\r\n    ) external view returns (uint256 availableTokenAmount);\r\n\r\n    function swap(\r\n        uint8 tokenIndexFrom,\r\n        uint8 tokenIndexTo,\r\n        uint256 dx,\r\n        uint256 minDy,\r\n        uint256 deadline\r\n    ) external returns (uint256);\r\n\r\n    function addLiquidity(\r\n        uint256[] calldata amounts,\r\n        uint256 minToMint,\r\n        uint256 deadline\r\n    ) external returns (uint256);\r\n\r\n    function removeLiquidity(\r\n        uint256 amount,\r\n        uint256[] calldata minAmounts,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory);\r\n\r\n    function removeLiquidityOneToken(\r\n        uint256 tokenAmount,\r\n        uint8 tokenIndex,\r\n        uint256 minAmount,\r\n        uint256 deadline\r\n    ) external returns (uint256);\r\n\r\n    function removeLiquidityImbalance(\r\n        uint256[] calldata amounts,\r\n        uint256 maxBurnAmount,\r\n        uint256 deadline\r\n    ) external returns (uint256);\r\n\r\n    // withdraw fee update function\r\n    function updateUserWithdrawFee(address recipient, uint256 transferAmount)\r\n        external;\r\n}"
    },
    "contracts/stable/MetaSwap.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.6.12;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\r\n\r\nimport \"./ISwap.sol\";\r\nimport \"./EvmoSwap.sol\";\r\nimport \"./MetaSwapUtils.sol\";\r\n\r\n/**\r\n * @title MetaSwap - A StableSwap implementation in solidity.\r\n * @notice This contract is responsible for custody of closely pegged assets (eg. group of stablecoins)\r\n * and automatic market making system. Users become an LP (Liquidity Provider) by depositing their tokens\r\n * in desired ratios for an exchange of the pool token that represents their share of the pool.\r\n * Users can burn pool tokens and withdraw their share of token(s).\r\n *\r\n * Each time a swap between the pooled tokens happens, a set fee incurs which effectively gets\r\n * distributed to the LPs.\r\n *\r\n * In case of emergencies, admin can pause additional deposits, swaps, or single-asset withdraws - which\r\n * stops the ratio of the tokens in the pool from changing.\r\n * Users can always withdraw their tokens via multi-asset withdraws.\r\n *\r\n * MetaSwap is a modified version of Swap that allows Swap's LP token to be utilized in pooling with other tokens.\r\n *\r\n * @dev Most of the logic is stored as a library `EvmoSwapUtils` for the sake of reducing contract's\r\n * deployment size.\r\n */\r\ncontract MetaSwap is EvmoSwap {\r\n    using MetaSwapUtils for EvmoSwapUtils.Swap;\r\n\r\n    MetaSwapUtils.MetaSwap public metaSwapStorage;\r\n\r\n    uint256 constant MAX_UINT256 = 2**256 - 1;\r\n\r\n    /*** EVENTS ***/\r\n\r\n    // events replicated from EvmoSwapUtils to make the ABI easier for dumb\r\n    // clients\r\n    event TokenSwapUnderlying(\r\n        address indexed buyer,\r\n        uint256 tokensSold,\r\n        uint256 tokensBought,\r\n        uint128 soldId,\r\n        uint128 boughtId\r\n    );\r\n\r\n    /**\r\n     * @notice Initializes this Swap contract with the given parameters.\r\n     * This will also deploy the LPToken that represents users\r\n     * LP position. The owner of LPToken will be this contract - which means\r\n     * only this contract is allowed to mint new tokens.\r\n     *\r\n     * @param _pooledTokens an array of ERC20s this pool will accept\r\n     * @param decimals the decimals to use for each pooled token,\r\n     * eg 8 for WBTC. Cannot be larger than POOL_PRECISION_DECIMALS\r\n     * @param lpTokenName the long-form name of the token to be deployed\r\n     * @param lpTokenSymbol the short symbol for the token to be deployed\r\n     * @param _a the amplification coefficient * n * (n - 1). See the\r\n     * StableSwap paper for details\r\n     * @param _fee default swap fee to be initialized with\r\n     * @param _adminFee default adminFee to be initialized with\r\n     * @param _depositFee default depositFee to be initialized with\r\n     * @param _withdrawFee default withdrawFee to be initialized with\r\n     * @param _devaddr default _devaddr to be initialized with\r\n     */\r\n    constructor (\r\n        IERC20[] memory _pooledTokens,\r\n        uint8[] memory decimals,\r\n        string memory lpTokenName,\r\n        string memory lpTokenSymbol,\r\n        uint256 _a,\r\n        uint256 _fee,\r\n        uint256 _adminFee,\r\n        uint256 _depositFee,\r\n        uint256 _withdrawFee,\r\n        address _devaddr,\r\n        ISwap baseSwap\r\n    ) EvmoSwap(\r\n            _pooledTokens,\r\n            decimals,\r\n            lpTokenName,\r\n            lpTokenSymbol,\r\n            _a,\r\n            _fee,\r\n            _adminFee,\r\n            _depositFee,\r\n            _withdrawFee,\r\n            _devaddr\r\n        ) public {\r\n\r\n        // MetaSwap initializer\r\n        metaSwapStorage.baseSwap = baseSwap;\r\n        metaSwapStorage.baseVirtualPrice = baseSwap.getVirtualPrice();\r\n        metaSwapStorage.baseCacheLastUpdated = block.timestamp;\r\n        for (uint8 i; i < 32; i++) {\r\n            try baseSwap.getToken(i) returns (IERC20 token) {\r\n                token.approve(address(baseSwap), MAX_UINT256);\r\n                metaSwapStorage.baseTokens.push(token);\r\n            } catch {\r\n                break;\r\n            }\r\n        }\r\n        _pooledTokens[_pooledTokens.length - 1].approve(\r\n            address(baseSwap),\r\n            MAX_UINT256\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Get the virtual price, to help calculate profit\r\n     * @return the virtual price, scaled to the POOL_PRECISION_DECIMALS\r\n     */\r\n    function getVirtualPrice()\r\n        external\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return swapStorage.getVirtualPrice(metaSwapStorage);\r\n    }\r\n\r\n    /**\r\n     * @notice Calculate amount of tokens you receive on swap\r\n     * @param tokenIndexFrom the token the user wants to sell\r\n     * @param tokenIndexTo the token the user wants to buy\r\n     * @param dx the amount of tokens the user wants to sell. If the token charges\r\n     * a fee on transfers, use the amount that gets transferred after the fee.\r\n     * @return amount of tokens the user will receive\r\n     */\r\n    function calculateSwap(\r\n        uint8 tokenIndexFrom,\r\n        uint8 tokenIndexTo,\r\n        uint256 dx\r\n    ) external view virtual override returns (uint256) {\r\n        return\r\n            swapStorage.calculateSwap(\r\n                metaSwapStorage,\r\n                tokenIndexFrom,\r\n                tokenIndexTo,\r\n                dx\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @notice Calculate amount of tokens you receive on swap. For this function,\r\n     * the token indices are flattened out so that underlying tokens are represented.\r\n     * @param tokenIndexFrom the token the user wants to sell\r\n     * @param tokenIndexTo the token the user wants to buy\r\n     * @param dx the amount of tokens the user wants to sell. If the token charges\r\n     * a fee on transfers, use the amount that gets transferred after the fee.\r\n     * @return amount of tokens the user will receive\r\n     */\r\n    function calculateSwapUnderlying(\r\n        uint8 tokenIndexFrom,\r\n        uint8 tokenIndexTo,\r\n        uint256 dx\r\n    ) external view virtual returns (uint256) {\r\n        return\r\n            swapStorage.calculateSwapUnderlying(\r\n                metaSwapStorage,\r\n                tokenIndexFrom,\r\n                tokenIndexTo,\r\n                dx\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @notice A simple method to calculate prices from deposits or\r\n     * withdrawals, excluding fees but including slippage. This is\r\n     * helpful as an input into the various \"min\" parameters on calls\r\n     * to fight front-running\r\n     *\r\n     * @dev This shouldn't be used outside frontends for user estimates.\r\n     *\r\n     * @param account address that is depositing or withdrawing tokens\r\n     * @param amounts an array of token amounts to deposit or withdrawal,\r\n     * corresponding to pooledTokens. The amount should be in each\r\n     * pooled token's native precision. If a token charges a fee on transfers,\r\n     * use the amount that gets transferred after the fee.\r\n     * @param deposit whether this is a deposit or a withdrawal\r\n     * @return token amount the user will receive\r\n     */\r\n    function calculateTokenAmount(\r\n        address account,\r\n        uint256[] calldata amounts,\r\n        bool deposit\r\n    ) external virtual view override returns (uint256) {\r\n        return\r\n            swapStorage.calculateTokenAmount(\r\n                metaSwapStorage,\r\n                account,\r\n                amounts,\r\n                deposit\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @notice Calculate the amount of underlying token available to withdraw\r\n     * when withdrawing via only single token\r\n     * @param account the address that is withdrawing tokens\r\n     * @param tokenAmount the amount of LP token to burn\r\n     * @param tokenIndex index of which token will be withdrawn\r\n     * @return availableTokenAmount calculated amount of underlying token\r\n     * available to withdraw\r\n     */\r\n    function calculateRemoveLiquidityOneToken(\r\n        address account,\r\n        uint256 tokenAmount,\r\n        uint8 tokenIndex\r\n    ) external view virtual override returns (uint256) {\r\n        return\r\n            swapStorage.calculateWithdrawOneToken(\r\n                metaSwapStorage,\r\n                account,\r\n                tokenAmount,\r\n                tokenIndex\r\n            );\r\n    }\r\n\r\n    /*** STATE MODIFYING FUNCTIONS ***/\r\n\r\n    /**\r\n     * @notice Swap two tokens using this pool\r\n     * @param tokenIndexFrom the token the user wants to swap from\r\n     * @param tokenIndexTo the token the user wants to swap to\r\n     * @param dx the amount of tokens the user wants to swap from\r\n     * @param minDy the min amount the user would like to receive, or revert.\r\n     * @param deadline latest timestamp to accept this transaction\r\n     */\r\n    function swap(\r\n        uint8 tokenIndexFrom,\r\n        uint8 tokenIndexTo,\r\n        uint256 dx,\r\n        uint256 minDy,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        virtual\r\n        override\r\n        nonReentrant\r\n        whenNotPaused\r\n        deadlineCheck(deadline)\r\n        returns (uint256)\r\n    {\r\n        return\r\n            swapStorage.swap(\r\n                metaSwapStorage,\r\n                tokenIndexFrom,\r\n                tokenIndexTo,\r\n                dx,\r\n                minDy\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @notice Swap two tokens using this pool and the base pool.\r\n     * @param tokenIndexFrom the token the user wants to swap from\r\n     * @param tokenIndexTo the token the user wants to swap to\r\n     * @param dx the amount of tokens the user wants to swap from\r\n     * @param minDy the min amount the user would like to receive, or revert.\r\n     * @param deadline latest timestamp to accept this transaction\r\n     */\r\n    function swapUnderlying(\r\n        uint8 tokenIndexFrom,\r\n        uint8 tokenIndexTo,\r\n        uint256 dx,\r\n        uint256 minDy,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        virtual\r\n        nonReentrant\r\n        whenNotPaused\r\n        deadlineCheck(deadline)\r\n        returns (uint256)\r\n    {\r\n        return\r\n            swapStorage.swapUnderlying(\r\n                metaSwapStorage,\r\n                tokenIndexFrom,\r\n                tokenIndexTo,\r\n                dx,\r\n                minDy\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @notice Add liquidity to the pool with the given amounts of tokens\r\n     * @param amounts the amounts of each token to add, in their native precision\r\n     * @param minToMint the minimum LP tokens adding this amount of liquidity\r\n     * should mint, otherwise revert. Handy for front-running mitigation\r\n     * @param deadline latest timestamp to accept this transaction\r\n     * @return amount of LP token user minted and received\r\n     */\r\n    function addLiquidity(\r\n        uint256[] calldata amounts,\r\n        uint256 minToMint,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        virtual\r\n        override\r\n        nonReentrant\r\n        whenNotPaused\r\n        deadlineCheck(deadline)\r\n        returns (uint256)\r\n    {\r\n        return swapStorage.addLiquidity(metaSwapStorage, amounts, minToMint);\r\n    }\r\n\r\n    /**\r\n     * @notice Remove liquidity from the pool all in one token. Withdraw fee that decays linearly\r\n     * over period of 4 weeks since last deposit will apply.\r\n     * @param tokenAmount the amount of the token you want to receive\r\n     * @param tokenIndex the index of the token you want to receive\r\n     * @param minAmount the minimum amount to withdraw, otherwise revert\r\n     * @param deadline latest timestamp to accept this transaction\r\n     * @return amount of chosen token user received\r\n     */\r\n    function removeLiquidityOneToken(\r\n        uint256 tokenAmount,\r\n        uint8 tokenIndex,\r\n        uint256 minAmount,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        virtual\r\n        override\r\n        nonReentrant\r\n        whenNotPaused\r\n        deadlineCheck(deadline)\r\n        returns (uint256)\r\n    {\r\n        return\r\n            swapStorage.removeLiquidityOneToken(\r\n                metaSwapStorage,\r\n                tokenAmount,\r\n                tokenIndex,\r\n                minAmount\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @notice Remove liquidity from the pool, weighted differently than the\r\n     * pool's current balances. Withdraw fee that decays linearly\r\n     * over period of 4 weeks since last deposit will apply.\r\n     * @param amounts how much of each token to withdraw\r\n     * @param maxBurnAmount the max LP token provider is willing to pay to\r\n     * remove liquidity. Useful as a front-running mitigation.\r\n     * @param deadline latest timestamp to accept this transaction\r\n     * @return amount of LP tokens burned\r\n     */\r\n    function removeLiquidityImbalance(\r\n        uint256[] calldata amounts,\r\n        uint256 maxBurnAmount,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        virtual\r\n        override\r\n        nonReentrant\r\n        whenNotPaused\r\n        deadlineCheck(deadline)\r\n        returns (uint256)\r\n    {\r\n        return\r\n            swapStorage.removeLiquidityImbalance(\r\n                metaSwapStorage,\r\n                amounts,\r\n                maxBurnAmount\r\n            );\r\n    }\r\n}"
    },
    "contracts/stable/MetaSwapUtils.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.6.12;\r\n\r\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\r\n\r\nimport \"./MathUtils.sol\";\r\nimport \"./ISwap.sol\";\r\nimport \"./EvmoSwapUtils.sol\";\r\nimport \"./LPToken.sol\";\r\n\r\n\r\n/**\r\n * @title MetaSwapUtils library\r\n * @notice A library to be used within MetaSwap.sol. Contains functions responsible for custody and AMM functionalities.\r\n * @dev Contracts relying on this library must initialize EvmoSwapUtils.Swap struct then use this library\r\n * for EvmoSwapUtils.Swap struct. Note that this library contains both functions called by users and admins.\r\n * Admin functions should be protected within contracts using this library.\r\n */\r\nlibrary MetaSwapUtils {\r\n    using SafeERC20 for IERC20;\r\n    using SafeMath for uint256;\r\n    using MathUtils for uint256;\r\n\r\n    /*** EVENTS ***/\r\n\r\n    event TokenSwap(\r\n        address indexed buyer,\r\n        uint256 tokensSold,\r\n        uint256 tokensBought,\r\n        uint128 soldId,\r\n        uint128 boughtId\r\n    );\r\n    event TokenSwapUnderlying(\r\n        address indexed buyer,\r\n        uint256 tokensSold,\r\n        uint256 tokensBought,\r\n        uint128 soldId,\r\n        uint128 boughtId\r\n    );\r\n    event AddLiquidity(\r\n        address indexed provider,\r\n        uint256[] tokenAmounts,\r\n        uint256[] fees,\r\n        uint256 invariant,\r\n        uint256 lpTokenSupply\r\n    );\r\n    event RemoveLiquidityOne(\r\n        address indexed provider,\r\n        uint256 lpTokenAmount,\r\n        uint256 lpTokenSupply,\r\n        uint256 boughtId,\r\n        uint256 tokensBought\r\n    );\r\n    event RemoveLiquidityImbalance(\r\n        address indexed provider,\r\n        uint256[] tokenAmounts,\r\n        uint256[] fees,\r\n        uint256 invariant,\r\n        uint256 lpTokenSupply\r\n    );\r\n    event NewAdminFee(uint256 newAdminFee);\r\n    event NewSwapFee(uint256 newSwapFee);\r\n    event NewWithdrawFee(uint256 newWithdrawFee);\r\n\r\n    struct MetaSwap {\r\n        // Meta-Swap related parameters\r\n        ISwap baseSwap;\r\n        uint256 baseVirtualPrice;\r\n        uint256 baseCacheLastUpdated;\r\n        IERC20[] baseTokens;\r\n    }\r\n\r\n    // Struct storing variables used in calculations in the\r\n    // calculateWithdrawOneTokenDY function to avoid stack too deep errors\r\n    struct CalculateWithdrawOneTokenDYInfo {\r\n        uint256 d0;\r\n        uint256 d1;\r\n        uint256 newY;\r\n        uint256 feePerToken;\r\n        uint256 preciseA;\r\n        uint256 xpi;\r\n    }\r\n\r\n    // Struct storing variables used in calculation in removeLiquidityImbalance function\r\n    // to avoid stack too deep error\r\n    struct ManageLiquidityInfo {\r\n        uint256 d0;\r\n        uint256 d1;\r\n        uint256 d2;\r\n        LPToken lpToken;\r\n        uint256 totalSupply;\r\n        uint256 preciseA;\r\n        uint256 baseVirtualPrice;\r\n        uint256[] tokenPrecisionMultipliers;\r\n        uint256[] newBalances;\r\n    }\r\n\r\n    struct SwapUnderlyingInfo {\r\n        uint256 x;\r\n        uint256 dx;\r\n        uint256 dy;\r\n        uint8 metaIndexFrom;\r\n        uint8 metaIndexTo;\r\n        uint256[] oldBalances;\r\n        IERC20[] baseTokens;\r\n        IERC20 tokenFrom;\r\n        IERC20 tokenTo;\r\n        uint256 baseVirtualPrice;\r\n    }\r\n\r\n    struct CalculateSwapUnderlyingInfo {\r\n        uint256 baseVirtualPrice;\r\n        ISwap baseSwap;\r\n        uint8 baseLPTokenIndex;\r\n        uint8 baseTokensLength;\r\n        uint8 metaIndexTo;\r\n        uint256 x;\r\n        uint256 dy;\r\n    }\r\n\r\n    // the precision all pools tokens will be converted to\r\n    uint8 public constant POOL_PRECISION_DECIMALS = 18;\r\n\r\n    // the denominator used to calculate admin and LP fees. For example, an\r\n    // LP fee might be something like tradeAmount.mul(fee).div(FEE_DENOMINATOR)\r\n    uint256 private constant FEE_DENOMINATOR = 10**10;\r\n\r\n    // Constant value used as max loop limit\r\n    uint256 private constant MAX_LOOP_LIMIT = 256;\r\n\r\n    // Precision used in A parameter calculation\r\n    uint256 public constant A_PRECISION = 100;\r\n\r\n    // Cache expire time for the stored value of base swap's virtual price\r\n    uint256 public constant BASE_CACHE_EXPIRE_TIME = 10 minutes;\r\n    uint256 public constant BASE_VIRTUAL_PRICE_PRECISION = 10**18;\r\n\r\n    /*** VIEW & PURE FUNCTIONS ***/\r\n\r\n    /**\r\n     * @notice Return A in its raw precision\r\n     * @dev See the StableSwap paper for details\r\n     * @param self Swap struct to read from\r\n     * @return A parameter in its raw precision form\r\n     */\r\n    function getAPrecise(EvmoSwapUtils.Swap storage self)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 t1 = self.futureATime; // time when ramp is finished\r\n        uint256 a1 = self.futureA; // final A value when ramp is finished\r\n\r\n        if (block.timestamp < t1) {\r\n            uint256 t0 = self.initialATime; // time when ramp is started\r\n            uint256 a0 = self.initialA; // initial A value when ramp is started\r\n            if (a1 > a0) {\r\n                // a0 + (a1 - a0) * (block.timestamp - t0) / (t1 - t0)\r\n                return\r\n                    a0.add(\r\n                        a1.sub(a0).mul(block.timestamp.sub(t0)).div(t1.sub(t0))\r\n                    );\r\n            } else {\r\n                // a0 - (a0 - a1) * (block.timestamp - t0) / (t1 - t0)\r\n                return\r\n                    a0.sub(\r\n                        a0.sub(a1).mul(block.timestamp.sub(t0)).div(t1.sub(t0))\r\n                    );\r\n            }\r\n        } else {\r\n            return a1;\r\n        }\r\n    }\r\n\r\n    function _updateBaseVirtualPrice(MetaSwap storage metaSwapStorage)\r\n        internal\r\n        returns (uint256)\r\n    {\r\n        if (\r\n            block.timestamp >\r\n            metaSwapStorage.baseCacheLastUpdated + BASE_CACHE_EXPIRE_TIME\r\n        ) {\r\n            uint256 baseVirtualPrice =\r\n                ISwap(metaSwapStorage.baseSwap).getVirtualPrice();\r\n            metaSwapStorage.baseVirtualPrice = baseVirtualPrice;\r\n            metaSwapStorage.baseCacheLastUpdated = block.timestamp;\r\n            return baseVirtualPrice;\r\n        } else {\r\n            return metaSwapStorage.baseVirtualPrice;\r\n        }\r\n    }\r\n\r\n    function _getBaseVirtualPrice(\r\n        MetaSwap storage metaSwapStorage,\r\n        ISwap baseSwap\r\n    ) internal view returns (uint256) {\r\n        if (\r\n            block.timestamp >\r\n            metaSwapStorage.baseCacheLastUpdated + BASE_CACHE_EXPIRE_TIME\r\n        ) {\r\n            return baseSwap.getVirtualPrice();\r\n        } else {\r\n            return metaSwapStorage.baseVirtualPrice;\r\n        }\r\n    }\r\n\r\n    function _getBaseVirtualPrice(MetaSwap storage metaSwapStorage)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return _getBaseVirtualPrice(metaSwapStorage, metaSwapStorage.baseSwap);\r\n    }\r\n\r\n    /**\r\n     * @notice Calculate the dy, the amount of selected token that user receives.\r\n     * @param account the address that is withdrawing\r\n     * @param tokenAmount the amount to withdraw in the pool's precision\r\n     * @param tokenIndex which token will be withdrawn\r\n     * @param self Swap struct to read from\r\n     * @return dy the amount of token user will receive\r\n     */\r\n    function calculateWithdrawOneToken(\r\n        EvmoSwapUtils.Swap storage self,\r\n        MetaSwap storage metaSwapStorage,\r\n        address account,\r\n        uint256 tokenAmount,\r\n        uint8 tokenIndex\r\n    ) external view returns (uint256 dy) {\r\n        (dy, ) = calculateWithdrawOneToken(\r\n            self,\r\n            account,\r\n            tokenAmount,\r\n            tokenIndex,\r\n            _getBaseVirtualPrice(metaSwapStorage),\r\n            self.lpToken.totalSupply()\r\n        );\r\n    }\r\n\r\n    function calculateWithdrawOneToken(\r\n        EvmoSwapUtils.Swap storage self,\r\n        address account,\r\n        uint256 tokenAmount,\r\n        uint8 tokenIndex,\r\n        uint256 baseVirtualPrice,\r\n        uint256 totalSupply\r\n    ) internal view returns (uint256, uint256) {\r\n        uint256 dy;\r\n        uint256 dySwapFee;\r\n\r\n        {\r\n            uint256 currentY;\r\n            uint256 newY;\r\n\r\n            (dy, newY, currentY) = calculateWithdrawOneTokenDY(\r\n                self,\r\n                tokenIndex,\r\n                tokenAmount,\r\n                baseVirtualPrice,\r\n                totalSupply\r\n            );\r\n\r\n            dySwapFee = currentY\r\n                .sub(newY)\r\n                .div(self.tokenPrecisionMultipliers[tokenIndex])\r\n                .sub(dy);\r\n        }\r\n\r\n        dy = dy\r\n            .mul(\r\n            FEE_DENOMINATOR.sub(calculateCurrentWithdrawFee(self, account))\r\n        )\r\n            .div(FEE_DENOMINATOR);\r\n\r\n        return (dy, dySwapFee);\r\n    }\r\n\r\n    /**\r\n     * @notice Calculate the dy of withdrawing in one token\r\n     * @param self Swap struct to read from\r\n     * @param tokenIndex which token will be withdrawn\r\n     * @param tokenAmount the amount to withdraw in the pools precision\r\n     * @return the d and the new y after withdrawing one token\r\n     */\r\n    function calculateWithdrawOneTokenDY(\r\n        EvmoSwapUtils.Swap storage self,\r\n        uint8 tokenIndex,\r\n        uint256 tokenAmount,\r\n        uint256 baseVirtualPrice,\r\n        uint256 totalSupply\r\n    )\r\n        internal\r\n        view\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        // Get the current D, then solve the stableswap invariant\r\n        // y_i for D - tokenAmount\r\n        uint256[] memory xp = _xp(self, baseVirtualPrice);\r\n        require(tokenIndex < xp.length, \"Token index out of range\");\r\n\r\n        CalculateWithdrawOneTokenDYInfo memory v =\r\n            CalculateWithdrawOneTokenDYInfo(0, 0, 0, 0, 0, 0);\r\n        v.preciseA = getAPrecise(self);\r\n        v.d0 = getD(xp, v.preciseA);\r\n        v.d1 = v.d0.sub(tokenAmount.mul(v.d0).div(totalSupply));\r\n\r\n        require(tokenAmount <= xp[tokenIndex], \"Withdraw exceeds available\");\r\n\r\n        v.newY = getYD(v.preciseA, tokenIndex, xp, v.d1);\r\n\r\n        uint256[] memory xpReduced = new uint256[](xp.length);\r\n\r\n        v.feePerToken = _feePerToken(self);\r\n        for (uint256 i = 0; i < xp.length; i++) {\r\n            v.xpi = xp[i];\r\n            // if i == tokenIndex, dxExpected = xp[i] * d1 / d0 - newY\r\n            // else dxExpected = xp[i] - (xp[i] * d1 / d0)\r\n            // xpReduced[i] -= dxExpected * fee / FEE_DENOMINATOR\r\n            xpReduced[i] = v.xpi.sub(\r\n                (\r\n                    (i == tokenIndex)\r\n                        ? v.xpi.mul(v.d1).div(v.d0).sub(v.newY)\r\n                        : v.xpi.sub(v.xpi.mul(v.d1).div(v.d0))\r\n                )\r\n                    .mul(v.feePerToken)\r\n                    .div(FEE_DENOMINATOR)\r\n            );\r\n        }\r\n\r\n        uint256 dy =\r\n            xpReduced[tokenIndex].sub(\r\n                getYD(v.preciseA, tokenIndex, xpReduced, v.d1)\r\n            );\r\n        dy = dy.sub(1).div(self.tokenPrecisionMultipliers[tokenIndex]);\r\n\r\n        if (tokenIndex == xp.length - 1) {\r\n            dy = dy.mul(BASE_VIRTUAL_PRICE_PRECISION).div(baseVirtualPrice);\r\n        }\r\n\r\n        return (dy, v.newY, xp[tokenIndex]);\r\n    }\r\n\r\n    /**\r\n     * @notice Calculate the price of a token in the pool with given\r\n     * precision-adjusted balances and a particular D.\r\n     *\r\n     * @dev This is accomplished via solving the invariant iteratively.\r\n     * See the StableSwap paper and Curve.fi implementation for further details.\r\n     *\r\n     * x_1**2 + x1 * (sum' - (A*n**n - 1) * D / (A * n**n)) = D ** (n + 1) / (n ** (2 * n) * prod' * A)\r\n     * x_1**2 + b*x_1 = c\r\n     * x_1 = (x_1**2 + c) / (2*x_1 + b)\r\n     *\r\n     * @param a the amplification coefficient * n * (n - 1). See the StableSwap paper for details.\r\n     * @param tokenIndex Index of token we are calculating for.\r\n     * @param xp a precision-adjusted set of pool balances. Array should be\r\n     * the same cardinality as the pool.\r\n     * @param d the stableswap invariant\r\n     * @return the price of the token, in the same precision as in xp\r\n     */\r\n    function getYD(\r\n        uint256 a,\r\n        uint8 tokenIndex,\r\n        uint256[] memory xp,\r\n        uint256 d\r\n    ) internal pure returns (uint256) {\r\n        uint256 numTokens = xp.length;\r\n        require(tokenIndex < numTokens, \"Token not found\");\r\n\r\n        uint256 c = d;\r\n        uint256 s;\r\n        uint256 nA = a.mul(numTokens);\r\n\r\n        for (uint256 i = 0; i < numTokens; i++) {\r\n            if (i != tokenIndex) {\r\n                s = s.add(xp[i]);\r\n                c = c.mul(d).div(xp[i].mul(numTokens));\r\n                // If we were to protect the division loss we would have to keep the denominator separate\r\n                // and divide at the end. However this leads to overflow with large numTokens or/and D.\r\n                // c = c * D * D * D * ... overflow!\r\n            }\r\n        }\r\n        c = c.mul(d).mul(A_PRECISION).div(nA.mul(numTokens));\r\n\r\n        uint256 b = s.add(d.mul(A_PRECISION).div(nA));\r\n        uint256 yPrev;\r\n        uint256 y = d;\r\n        for (uint256 i = 0; i < MAX_LOOP_LIMIT; i++) {\r\n            yPrev = y;\r\n            y = y.mul(y).add(c).div(y.mul(2).add(b).sub(d));\r\n            if (y.within1(yPrev)) {\r\n                return y;\r\n            }\r\n        }\r\n        revert(\"Approximation did not converge\");\r\n    }\r\n\r\n    /**\r\n     * @notice Get D, the StableSwap invariant, based on a set of balances and a particular A.\r\n     * @param xp a precision-adjusted set of pool balances. Array should be the same cardinality\r\n     * as the pool.\r\n     * @param a the amplification coefficient * n * (n - 1) in A_PRECISION.\r\n     * See the StableSwap paper for details\r\n     * @return the invariant, at the precision of the pool\r\n     */\r\n    function getD(uint256[] memory xp, uint256 a)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        uint256 numTokens = xp.length;\r\n        uint256 s;\r\n        for (uint256 i = 0; i < numTokens; i++) {\r\n            s = s.add(xp[i]);\r\n        }\r\n        if (s == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 prevD;\r\n        uint256 d = s;\r\n        uint256 nA = a.mul(numTokens);\r\n\r\n        for (uint256 i = 0; i < MAX_LOOP_LIMIT; i++) {\r\n            uint256 dP = d;\r\n            for (uint256 j = 0; j < numTokens; j++) {\r\n                dP = dP.mul(d).div(xp[j].mul(numTokens));\r\n                // If we were to protect the division loss we would have to keep the denominator separate\r\n                // and divide at the end. However this leads to overflow with large numTokens or/and D.\r\n                // dP = dP * D * D * D * ... overflow!\r\n            }\r\n            prevD = d;\r\n            d = nA.mul(s).div(A_PRECISION).add(dP.mul(numTokens)).mul(d).div(\r\n                nA.sub(A_PRECISION).mul(d).div(A_PRECISION).add(\r\n                    numTokens.add(1).mul(dP)\r\n                )\r\n            );\r\n            if (d.within1(prevD)) {\r\n                return d;\r\n            }\r\n        }\r\n\r\n        // Convergence should occur in 4 loops or less. If this is reached, there may be something wrong\r\n        // with the pool. If this were to occur repeatedly, LPs should withdraw via `removeLiquidity()`\r\n        // function which does not rely on D.\r\n        revert(\"D does not converge\");\r\n    }\r\n\r\n    /**\r\n     * @notice Given a set of balances and precision multipliers, return the\r\n     * precision-adjusted balances.\r\n     *\r\n     * @param balances an array of token balances, in their native precisions.\r\n     * These should generally correspond with pooled tokens.\r\n     *\r\n     * @param precisionMultipliers an array of multipliers, corresponding to\r\n     * the amounts in the balances array. When multiplied together they\r\n     * should yield amounts at the pool's precision.\r\n     *\r\n     * @return an array of amounts \"scaled\" to the pool's precision\r\n     */\r\n    function _xp(\r\n        uint256[] memory balances,\r\n        uint256[] memory precisionMultipliers,\r\n        uint256 baseVirtualPrice\r\n    ) internal pure returns (uint256[] memory) {\r\n        uint256 numTokens = balances.length;\r\n        require(\r\n            numTokens == precisionMultipliers.length,\r\n            \"Balances must match multipliers\"\r\n        );\r\n        uint256[] memory xp = new uint256[](numTokens);\r\n        for (uint256 i = 0; i < numTokens; i++) {\r\n            xp[i] = balances[i].mul(precisionMultipliers[i]);\r\n        }\r\n        uint256 baseLPTokenIndex = numTokens - 1;\r\n        xp[baseLPTokenIndex] = xp[baseLPTokenIndex].mul(baseVirtualPrice).div(\r\n            BASE_VIRTUAL_PRICE_PRECISION\r\n        );\r\n        return xp;\r\n    }\r\n\r\n    /**\r\n     * @notice Return the precision-adjusted balances of all tokens in the pool\r\n     * @param self Swap struct to read from\r\n     * @param balances array of balances to scale\r\n     * @return balances array \"scaled\" to the pool's precision, allowing\r\n     * them to be more easily compared.\r\n     */\r\n    function _xp(\r\n        EvmoSwapUtils.Swap storage self,\r\n        uint256[] memory balances,\r\n        uint256 baseVirtualPrice\r\n    ) internal view returns (uint256[] memory) {\r\n        return _xp(balances, self.tokenPrecisionMultipliers, baseVirtualPrice);\r\n    }\r\n\r\n    /**\r\n     * @notice Return the precision-adjusted balances of all tokens in the pool\r\n     * @param self Swap struct to read from\r\n     * @return the pool balances \"scaled\" to the pool's precision, allowing\r\n     * them to be more easily compared.\r\n     */\r\n    function _xp(EvmoSwapUtils.Swap storage self, uint256 baseVirtualPrice)\r\n        internal\r\n        view\r\n        returns (uint256[] memory)\r\n    {\r\n        return\r\n            _xp(\r\n                self.balances,\r\n                self.tokenPrecisionMultipliers,\r\n                baseVirtualPrice\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @notice Get the virtual price, to help calculate profit\r\n     * @param self Swap struct to read from\r\n     * @return the virtual price, scaled to precision of POOL_PRECISION_DECIMALS\r\n     */\r\n    function getVirtualPrice(\r\n        EvmoSwapUtils.Swap storage self,\r\n        MetaSwap storage metaSwapStorage\r\n    ) external view returns (uint256) {\r\n        uint256 d =\r\n            getD(\r\n                _xp(self, _getBaseVirtualPrice(metaSwapStorage)),\r\n                getAPrecise(self)\r\n            );\r\n        ERC20 lpToken = self.lpToken;\r\n        uint256 supply = lpToken.totalSupply();\r\n        if (supply != 0) {\r\n            return d.mul(10**uint256(lpToken.decimals())).div(supply);\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * @notice Calculate the new balances of the tokens given the indexes of the token\r\n     * that is swapped from (FROM) and the token that is swapped to (TO).\r\n     * This function is used as a helper function to calculate how much TO token\r\n     * the user should receive on swap.\r\n     *\r\n     * @param preciseA value of A parameter to use for calculation\r\n     * @param tokenIndexFrom index of FROM token\r\n     * @param tokenIndexTo index of TO token\r\n     * @param x the new total amount of FROM token\r\n     * @param xp balances of the tokens in the pool\r\n     * @return the amount of TO token that should remain in the pool\r\n     */\r\n    function getY(\r\n        uint256 preciseA,\r\n        uint8 tokenIndexFrom,\r\n        uint8 tokenIndexTo,\r\n        uint256 x,\r\n        uint256[] memory xp\r\n    ) internal pure returns (uint256) {\r\n        uint256 numTokens = xp.length;\r\n        require(\r\n            tokenIndexFrom != tokenIndexTo,\r\n            \"Can't compare token to itself\"\r\n        );\r\n        require(\r\n            tokenIndexFrom < numTokens && tokenIndexTo < numTokens,\r\n            \"Tokens must be in pool\"\r\n        );\r\n\r\n        uint256 d = getD(xp, preciseA);\r\n        uint256 c = d;\r\n        uint256 s;\r\n        uint256 nA = numTokens.mul(preciseA);\r\n\r\n        uint256 _x;\r\n        for (uint256 i = 0; i < numTokens; i++) {\r\n            if (i == tokenIndexFrom) {\r\n                _x = x;\r\n            } else if (i != tokenIndexTo) {\r\n                _x = xp[i];\r\n            } else {\r\n                continue;\r\n            }\r\n            s = s.add(_x);\r\n            c = c.mul(d).div(_x.mul(numTokens));\r\n            // If we were to protect the division loss we would have to keep the denominator separate\r\n            // and divide at the end. However this leads to overflow with large numTokens or/and D.\r\n            // c = c * D * D * D * ... overflow!\r\n        }\r\n        c = c.mul(d).mul(A_PRECISION).div(nA.mul(numTokens));\r\n        uint256 b = s.add(d.mul(A_PRECISION).div(nA));\r\n        uint256 yPrev;\r\n        uint256 y = d;\r\n\r\n        // iterative approximation\r\n        for (uint256 i = 0; i < MAX_LOOP_LIMIT; i++) {\r\n            yPrev = y;\r\n            y = y.mul(y).add(c).div(y.mul(2).add(b).sub(d));\r\n            if (y.within1(yPrev)) {\r\n                return y;\r\n            }\r\n        }\r\n        revert(\"Approximation did not converge\");\r\n    }\r\n\r\n    /**\r\n     * @notice Externally calculates a swap between two tokens.\r\n     * @param self Swap struct to read from\r\n     * @param tokenIndexFrom the token to sell\r\n     * @param tokenIndexTo the token to buy\r\n     * @param dx the number of tokens to sell. If the token charges a fee on transfers,\r\n     * use the amount that gets transferred after the fee.\r\n     * @return dy the number of tokens the user will get\r\n     */\r\n    function calculateSwap(\r\n        EvmoSwapUtils.Swap storage self,\r\n        MetaSwap storage metaSwapStorage,\r\n        uint8 tokenIndexFrom,\r\n        uint8 tokenIndexTo,\r\n        uint256 dx\r\n    ) external view returns (uint256 dy) {\r\n        (dy, ) = _calculateSwap(\r\n            self,\r\n            tokenIndexFrom,\r\n            tokenIndexTo,\r\n            dx,\r\n            _getBaseVirtualPrice(metaSwapStorage)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Internally calculates a swap between two tokens.\r\n     *\r\n     * @dev The caller is expected to transfer the actual amounts (dx and dy)\r\n     * using the token contracts.\r\n     *\r\n     * @param self Swap struct to read from\r\n     * @param tokenIndexFrom the token to sell\r\n     * @param tokenIndexTo the token to buy\r\n     * @param dx the number of tokens to sell. If the token charges a fee on transfers,\r\n     * use the amount that gets transferred after the fee.\r\n     * @return dy the number of tokens the user will get\r\n     * @return dyFee the associated fee\r\n     */\r\n    function _calculateSwap(\r\n        EvmoSwapUtils.Swap storage self,\r\n        uint8 tokenIndexFrom,\r\n        uint8 tokenIndexTo,\r\n        uint256 dx,\r\n        uint256 baseVirtualPrice\r\n    ) internal view returns (uint256 dy, uint256 dyFee) {\r\n        uint256[] memory xp = _xp(self, baseVirtualPrice);\r\n        require(\r\n            tokenIndexFrom < xp.length && tokenIndexTo < xp.length,\r\n            \"Token index out of range\"\r\n        );\r\n        uint256 baseLPTokenIndex = xp.length.sub(1);\r\n\r\n        uint256 x = dx.mul(self.tokenPrecisionMultipliers[tokenIndexFrom]);\r\n        if (tokenIndexFrom == baseLPTokenIndex) {\r\n            // When swapping from a base Swap token, scale up dx by its virtual price\r\n            x = x.mul(baseVirtualPrice).div(BASE_VIRTUAL_PRICE_PRECISION);\r\n        }\r\n        x = x.add(xp[tokenIndexFrom]);\r\n\r\n        uint256 y = getY(\r\n            getAPrecise(self),\r\n            tokenIndexFrom,\r\n            tokenIndexTo,\r\n            x,\r\n            xp\r\n        );\r\n        dy = xp[tokenIndexTo].sub(y).sub(1);\r\n\r\n        if (tokenIndexTo == baseLPTokenIndex) {\r\n            // When swapping to a base Swap token, scale down dy by its virtual price\r\n            dy = dy.mul(BASE_VIRTUAL_PRICE_PRECISION).div(baseVirtualPrice);\r\n        }\r\n\r\n        dyFee = dy.mul(self.swapFee).div(FEE_DENOMINATOR);\r\n        dy = dy.sub(dyFee);\r\n\r\n        dy = dy.div(self.tokenPrecisionMultipliers[tokenIndexTo]);\r\n    }\r\n\r\n    function calculateSwapUnderlying(\r\n        EvmoSwapUtils.Swap storage self,\r\n        MetaSwap storage metaSwapStorage,\r\n        uint8 tokenIndexFrom,\r\n        uint8 tokenIndexTo,\r\n        uint256 dx\r\n    ) external view returns (uint256) {\r\n        CalculateSwapUnderlyingInfo memory v =\r\n            CalculateSwapUnderlyingInfo(\r\n                _getBaseVirtualPrice(metaSwapStorage),\r\n                metaSwapStorage.baseSwap,\r\n                0,\r\n                uint8(metaSwapStorage.baseTokens.length),\r\n                0,\r\n                0,\r\n                0\r\n            );\r\n\r\n        uint256[] memory xp = _xp(self, v.baseVirtualPrice);\r\n        v.baseLPTokenIndex = uint8(xp.length) - 1;\r\n        {\r\n            uint8 maxRange = v.baseLPTokenIndex + v.baseTokensLength;\r\n            require(\r\n                tokenIndexFrom < maxRange && tokenIndexTo < maxRange,\r\n                \"Token index out of range\"\r\n            );\r\n        }\r\n\r\n        if (tokenIndexFrom < v.baseLPTokenIndex) {\r\n            // tokenFrom is from this pool\r\n            v.x = xp[tokenIndexFrom].add(\r\n                dx.mul(self.tokenPrecisionMultipliers[tokenIndexFrom])\r\n            );\r\n        } else {\r\n            // tokenFrom is from the base pool\r\n            tokenIndexFrom = tokenIndexFrom - v.baseLPTokenIndex;\r\n            if (tokenIndexTo < v.baseLPTokenIndex) {\r\n                uint256[] memory baseInputs = new uint256[](v.baseTokensLength);\r\n                baseInputs[tokenIndexFrom] = dx;\r\n                v.x = v\r\n                    .baseSwap\r\n                    .calculateTokenAmount(address(this), baseInputs, true)\r\n                    .mul(v.baseVirtualPrice)\r\n                    .div(BASE_VIRTUAL_PRICE_PRECISION)\r\n                    .add(xp[v.baseLPTokenIndex]);\r\n            } else {\r\n                // both from and to are from the base pool\r\n                return\r\n                    v.baseSwap.calculateSwap(\r\n                        tokenIndexFrom,\r\n                        tokenIndexTo - v.baseLPTokenIndex,\r\n                        dx\r\n                    );\r\n            }\r\n            tokenIndexFrom = v.baseLPTokenIndex;\r\n        }\r\n\r\n        v.metaIndexTo = v.baseLPTokenIndex;\r\n        if (tokenIndexTo < v.baseLPTokenIndex) {\r\n            v.metaIndexTo = tokenIndexTo;\r\n        }\r\n\r\n        {\r\n            uint256 y =\r\n                getY(getAPrecise(self), tokenIndexFrom, v.metaIndexTo, v.x, xp);\r\n            v.dy = xp[v.metaIndexTo].sub(y).sub(1);\r\n            uint256 dyFee = v.dy.mul(self.swapFee).div(FEE_DENOMINATOR);\r\n            v.dy = v.dy.sub(dyFee);\r\n        }\r\n\r\n        if (tokenIndexTo < v.baseLPTokenIndex) {\r\n            // tokenTo is from this pool\r\n            v.dy = v.dy.div(self.tokenPrecisionMultipliers[v.metaIndexTo]);\r\n        } else {\r\n            // tokenTo is from the base pool\r\n            v.dy = v.baseSwap.calculateRemoveLiquidityOneToken(\r\n                address(this),\r\n                v.dy.mul(BASE_VIRTUAL_PRICE_PRECISION).div(v.baseVirtualPrice),\r\n                tokenIndexTo - v.baseLPTokenIndex\r\n            );\r\n        }\r\n\r\n        return v.dy;\r\n    }\r\n\r\n    /**\r\n     * @notice Calculate the fee that is applied when the given user withdraws.\r\n     * Withdraw fee decays linearly over 4 weeks.\r\n     * @param user address you want to calculate withdraw fee of\r\n     * @return current withdraw fee of the user\r\n     */\r\n    function calculateCurrentWithdrawFee(\r\n        EvmoSwapUtils.Swap storage self,\r\n        address user\r\n    ) public view returns (uint256) {\r\n        uint256 endTime = self.depositTimestamp[user].add(4 weeks);\r\n        if (endTime > block.timestamp) {\r\n            uint256 timeLeftover = endTime.sub(block.timestamp);\r\n            return\r\n                self\r\n                    .defaultWithdrawFee\r\n                    .mul(self.withdrawFeeMultiplier[user])\r\n                    .mul(timeLeftover)\r\n                    .div(4 weeks)\r\n                    .div(FEE_DENOMINATOR);\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * @notice A simple method to calculate prices from deposits or\r\n     * withdrawals, excluding fees but including slippage. This is\r\n     * helpful as an input into the various \"min\" parameters on calls\r\n     * to fight front-running\r\n     *\r\n     * @dev This shouldn't be used outside frontends for user estimates.\r\n     *\r\n     * @param self Swap struct to read from\r\n     * @param account address of the account depositing or withdrawing tokens\r\n     * @param amounts an array of token amounts to deposit or withdrawal,\r\n     * corresponding to pooledTokens. The amount should be in each\r\n     * pooled token's native precision. If a token charges a fee on transfers,\r\n     * use the amount that gets transferred after the fee.\r\n     * @param deposit whether this is a deposit or a withdrawal\r\n     * @return if deposit was true, total amount of lp token that will be minted and if\r\n     * deposit was false, total amount of lp token that will be burned\r\n     */\r\n    function calculateTokenAmount(\r\n        EvmoSwapUtils.Swap storage self,\r\n        MetaSwap storage metaSwapStorage,\r\n        address account,\r\n        uint256[] calldata amounts,\r\n        bool deposit\r\n    ) external view returns (uint256) {\r\n        uint256 a = getAPrecise(self);\r\n        uint256 d0;\r\n        uint256 d1;\r\n        {\r\n            uint256 baseVirtualPrice = _getBaseVirtualPrice(metaSwapStorage);\r\n            uint256[] memory balances1 = self.balances;\r\n            uint256 numTokens = balances1.length;\r\n            d0 = getD(_xp(self, balances1, baseVirtualPrice), a);\r\n            for (uint256 i = 0; i < numTokens; i++) {\r\n                if (deposit) {\r\n                    balances1[i] = balances1[i].add(amounts[i]);\r\n                } else {\r\n                    balances1[i] = balances1[i].sub(\r\n                        amounts[i],\r\n                        \"Cannot withdraw more than available\"\r\n                    );\r\n                }\r\n            }\r\n            d1 = getD(_xp(self, balances1, baseVirtualPrice), a);\r\n        }\r\n        uint256 totalSupply = self.lpToken.totalSupply();\r\n\r\n        if (deposit) {\r\n            return d1.sub(d0).mul(totalSupply).div(d0);\r\n        } else {\r\n            return\r\n                d0.sub(d1).mul(totalSupply).div(d0).mul(FEE_DENOMINATOR).div(\r\n                    FEE_DENOMINATOR.sub(\r\n                        calculateCurrentWithdrawFee(self, account)\r\n                    )\r\n                );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice internal helper function to calculate fee per token multiplier used in\r\n     * swap fee calculations\r\n     * @param self Swap struct to read from\r\n     */\r\n    function _feePerToken(EvmoSwapUtils.Swap storage self)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        IERC20[] memory pooledTokens = self.pooledTokens;\r\n        return\r\n            self.swapFee.mul(pooledTokens.length).div(\r\n                pooledTokens.length.sub(1).mul(4)\r\n            );\r\n    }\r\n\r\n    /*** STATE MODIFYING FUNCTIONS ***/\r\n\r\n    /**\r\n     * @notice swap two tokens in the pool\r\n     * @param self Swap struct to read from and write to\r\n     * @param tokenIndexFrom the token the user wants to sell\r\n     * @param tokenIndexTo the token the user wants to buy\r\n     * @param dx the amount of tokens the user wants to sell\r\n     * @param minDy the min amount the user would like to receive, or revert.\r\n     * @return amount of token user received on swap\r\n     */\r\n    function swap(\r\n        EvmoSwapUtils.Swap storage self,\r\n        MetaSwap storage metaSwapStorage,\r\n        uint8 tokenIndexFrom,\r\n        uint8 tokenIndexTo,\r\n        uint256 dx,\r\n        uint256 minDy\r\n    ) external returns (uint256) {\r\n        uint256 transferredDx;\r\n        {\r\n            IERC20 tokenFrom = self.pooledTokens[tokenIndexFrom];\r\n            require(\r\n                dx <= tokenFrom.balanceOf(msg.sender),\r\n                \"Cannot swap more than you own\"\r\n            );\r\n\r\n            {\r\n                // Transfer tokens first to see if a fee was charged on transfer\r\n                uint256 beforeBalance = tokenFrom.balanceOf(address(this));\r\n                tokenFrom.safeTransferFrom(msg.sender, address(this), dx);\r\n\r\n                // Use the actual transferred amount for AMM math\r\n                transferredDx = tokenFrom.balanceOf(address(this)).sub(\r\n                    beforeBalance\r\n                );\r\n            }\r\n        }\r\n\r\n        (uint256 dy, uint256 dyFee) =\r\n            _calculateSwap(\r\n                self,\r\n                tokenIndexFrom,\r\n                tokenIndexTo,\r\n                transferredDx,\r\n                _updateBaseVirtualPrice(metaSwapStorage)\r\n            );\r\n        require(dy >= minDy, \"Swap didn't result in min tokens\");\r\n\r\n        uint256 dyAdminFee =\r\n            dyFee.mul(self.adminFee).div(FEE_DENOMINATOR).div(\r\n                self.tokenPrecisionMultipliers[tokenIndexTo]\r\n            );\r\n\r\n        self.balances[tokenIndexFrom] = self.balances[tokenIndexFrom].add(\r\n            transferredDx\r\n        );\r\n        self.balances[tokenIndexTo] = self.balances[tokenIndexTo].sub(dy).sub(\r\n            dyAdminFee\r\n        );\r\n\r\n        self.pooledTokens[tokenIndexTo].safeTransfer(msg.sender, dy);\r\n\r\n        emit TokenSwap(\r\n            msg.sender,\r\n            transferredDx,\r\n            dy,\r\n            tokenIndexFrom,\r\n            tokenIndexTo\r\n        );\r\n\r\n        return dy;\r\n    }\r\n\r\n    function swapUnderlying(\r\n        EvmoSwapUtils.Swap storage self,\r\n        MetaSwap storage metaSwapStorage,\r\n        uint8 tokenIndexFrom,\r\n        uint8 tokenIndexTo,\r\n        uint256 dx,\r\n        uint256 minDy\r\n    ) external returns (uint256) {\r\n        SwapUnderlyingInfo memory v =\r\n            SwapUnderlyingInfo(\r\n                0,\r\n                0,\r\n                0,\r\n                0,\r\n                0,\r\n                self.balances,\r\n                metaSwapStorage.baseTokens,\r\n                IERC20(address(0)),\r\n                IERC20(address(0)),\r\n                _updateBaseVirtualPrice(metaSwapStorage)\r\n            );\r\n\r\n        uint8 baseLPTokenIndex = uint8(v.oldBalances.length) - 1;\r\n\r\n        {\r\n            uint8 maxRange = baseLPTokenIndex + uint8(v.baseTokens.length);\r\n            require(\r\n                tokenIndexFrom < maxRange && tokenIndexTo < maxRange,\r\n                \"Token index out of range\"\r\n            );\r\n        }\r\n\r\n        ISwap baseSwap = metaSwapStorage.baseSwap;\r\n\r\n        // Find the address of the token swapping from\r\n        if (tokenIndexFrom < baseLPTokenIndex) {\r\n            v.tokenFrom = self.pooledTokens[tokenIndexFrom];\r\n            v.metaIndexFrom = tokenIndexFrom;\r\n        } else {\r\n            v.tokenFrom = v.baseTokens[tokenIndexFrom - baseLPTokenIndex];\r\n            v.metaIndexFrom = baseLPTokenIndex;\r\n        }\r\n\r\n        // Find the address of the token swapping to\r\n        if (tokenIndexTo < baseLPTokenIndex) {\r\n            v.tokenTo = self.pooledTokens[tokenIndexTo];\r\n            v.metaIndexTo = tokenIndexTo;\r\n        } else {\r\n            v.tokenTo = v.baseTokens[tokenIndexTo - baseLPTokenIndex];\r\n            v.metaIndexTo = baseLPTokenIndex;\r\n        }\r\n\r\n        v.dx = v.tokenFrom.balanceOf(address(this));\r\n        v.tokenFrom.safeTransferFrom(msg.sender, address(this), dx);\r\n        v.dx = v.tokenFrom.balanceOf(address(this)).sub(v.dx); // update dx in case of fee on transfer\r\n\r\n        if (\r\n            tokenIndexFrom < baseLPTokenIndex || tokenIndexTo < baseLPTokenIndex\r\n        ) {\r\n            uint256[] memory xp = _xp(self, v.oldBalances, v.baseVirtualPrice);\r\n\r\n            if (tokenIndexFrom < baseLPTokenIndex) {\r\n                v.x =\r\n                    xp[tokenIndexFrom] +\r\n                    dx.mul(self.tokenPrecisionMultipliers[tokenIndexFrom]);\r\n            } else {\r\n                // tokenFrom is in the base pool\r\n                uint256[] memory baseAmounts =\r\n                    new uint256[](v.baseTokens.length);\r\n                baseAmounts[tokenIndexFrom - baseLPTokenIndex] = v.dx;\r\n                IERC20 baseLPToken = self.pooledTokens[baseLPTokenIndex];\r\n                v.x = baseLPToken.balanceOf(address(this));\r\n                // Add liquidity to the underlying swap contract\r\n                baseSwap.addLiquidity(baseAmounts, 0, block.timestamp);\r\n                // Now we have more of the base LP token\r\n                v.dx = baseLPToken.balanceOf(address(this)).sub(v.x);\r\n                v.x = v\r\n                    .dx\r\n                    .mul(v.baseVirtualPrice)\r\n                    .div(BASE_VIRTUAL_PRICE_PRECISION)\r\n                    .add(xp[baseLPTokenIndex]);\r\n            }\r\n\r\n            uint256 dyFee;\r\n            {\r\n                uint256 y =\r\n                    getY(\r\n                        getAPrecise(self),\r\n                        v.metaIndexFrom,\r\n                        v.metaIndexTo,\r\n                        v.x,\r\n                        xp\r\n                    );\r\n                v.dy = xp[v.metaIndexTo].sub(y).sub(1);\r\n                dyFee = v.dy.mul(self.swapFee).div(FEE_DENOMINATOR);\r\n                v.dy = v.dy.sub(dyFee).div(\r\n                    self.tokenPrecisionMultipliers[v.metaIndexTo]\r\n                );\r\n            }\r\n\r\n            if (tokenIndexTo >= baseLPTokenIndex) {\r\n                v.dy = v.dy.mul(BASE_VIRTUAL_PRICE_PRECISION).div(\r\n                    v.baseVirtualPrice\r\n                );\r\n            }\r\n\r\n            {\r\n                uint256 dyAdminFee =\r\n                    dyFee.mul(self.adminFee).div(FEE_DENOMINATOR);\r\n                dyAdminFee = dyAdminFee.div(\r\n                    self.tokenPrecisionMultipliers[v.metaIndexTo]\r\n                );\r\n                self.balances[v.metaIndexFrom] = v.oldBalances[v.metaIndexFrom]\r\n                    .add(v.dx);\r\n                self.balances[v.metaIndexTo] = v.oldBalances[v.metaIndexTo]\r\n                    .sub(v.dy)\r\n                    .sub(dyAdminFee);\r\n            }\r\n\r\n            if (tokenIndexTo >= baseLPTokenIndex) {\r\n                // tokenTo is from the base pool\r\n                // burn the LP token and withdraw the desired token from the base pool\r\n                uint256 oldBalance = v.tokenTo.balanceOf(address(this));\r\n                baseSwap.removeLiquidityOneToken(\r\n                    v.dy,\r\n                    tokenIndexTo - baseLPTokenIndex,\r\n                    0,\r\n                    block.timestamp\r\n                );\r\n                v.dy = v.tokenTo.balanceOf(address(this)) - oldBalance;\r\n            }\r\n            require(v.dy >= minDy, \"Swap didn't result in min tokens\");\r\n        } else {\r\n            // Both tokens are from the base swap pool\r\n            v.dy = v.tokenTo.balanceOf(address(this));\r\n            baseSwap.swap(\r\n                tokenIndexFrom - baseLPTokenIndex,\r\n                tokenIndexTo - baseLPTokenIndex,\r\n                v.dx,\r\n                minDy,\r\n                block.timestamp\r\n            );\r\n            v.dy = v.tokenTo.balanceOf(address(this)).sub(v.dy);\r\n        }\r\n\r\n        v.tokenTo.safeTransfer(msg.sender, v.dy);\r\n\r\n        emit TokenSwapUnderlying(\r\n            msg.sender,\r\n            dx,\r\n            v.dy,\r\n            tokenIndexFrom,\r\n            tokenIndexTo\r\n        );\r\n\r\n        return v.dy;\r\n    }\r\n\r\n    /**\r\n     * @notice Add liquidity to the pool\r\n     * @param self Swap struct to read from and write to\r\n     * @param amounts the amounts of each token to add, in their native precision\r\n     * @param minToMint the minimum LP tokens adding this amount of liquidity\r\n     * should mint, otherwise revert. Handy for front-running mitigation\r\n     * allowed addresses. If the pool is not in the guarded launch phase, this parameter will be ignored.\r\n     * @return amount of LP token user received\r\n     */\r\n    function addLiquidity(\r\n        EvmoSwapUtils.Swap storage self,\r\n        MetaSwap storage metaSwapStorage,\r\n        uint256[] memory amounts,\r\n        uint256 minToMint\r\n    ) external returns (uint256) {\r\n        IERC20[] memory pooledTokens = self.pooledTokens;\r\n        require(\r\n            amounts.length == self.pooledTokens.length,\r\n            \"Amounts must match pooled tokens\"\r\n        );\r\n\r\n        uint256[] memory fees = new uint256[](pooledTokens.length);\r\n\r\n        // current state\r\n        ManageLiquidityInfo memory v =\r\n            ManageLiquidityInfo(\r\n                0,\r\n                0,\r\n                0,\r\n                self.lpToken,\r\n                0,\r\n                getAPrecise(self),\r\n                _updateBaseVirtualPrice(metaSwapStorage),\r\n                self.tokenPrecisionMultipliers,\r\n                self.balances\r\n            );\r\n        v.totalSupply = v.lpToken.totalSupply();\r\n\r\n        if (v.totalSupply != 0) {\r\n            v.d0 = getD(\r\n                _xp(\r\n                    v.newBalances,\r\n                    v.tokenPrecisionMultipliers,\r\n                    v.baseVirtualPrice\r\n                ),\r\n                v.preciseA\r\n            );\r\n        }\r\n\r\n        for (uint256 i = 0; i < pooledTokens.length; i++) {\r\n            require(\r\n                v.totalSupply != 0 || amounts[i] > 0,\r\n                \"Must supply all tokens in pool\"\r\n            );\r\n\r\n            // Transfer tokens first to see if a fee was charged on transfer\r\n            if (amounts[i] != 0) {\r\n                uint256 beforeBalance =\r\n                    pooledTokens[i].balanceOf(address(this));\r\n                pooledTokens[i].safeTransferFrom(\r\n                    msg.sender,\r\n                    address(this),\r\n                    amounts[i]\r\n                );\r\n\r\n                // Update the amounts[] with actual transfer amount\r\n                amounts[i] = pooledTokens[i].balanceOf(address(this)).sub(\r\n                    beforeBalance\r\n                );\r\n            }\r\n\r\n            v.newBalances[i] = v.newBalances[i].add(amounts[i]);\r\n        }\r\n\r\n        // invariant after change\r\n        v.d1 = getD(\r\n            _xp(v.newBalances, v.tokenPrecisionMultipliers, v.baseVirtualPrice),\r\n            v.preciseA\r\n        );\r\n        require(v.d1 > v.d0, \"D should increase\");\r\n\r\n        // updated to reflect fees and calculate the user's LP tokens\r\n        v.d2 = v.d1;\r\n        uint256 toMint;\r\n\r\n        if (v.totalSupply != 0) {\r\n            uint256 feePerToken = _feePerToken(self);\r\n            for (uint256 i = 0; i < pooledTokens.length; i++) {\r\n                uint256 idealBalance = v.d1.mul(self.balances[i]).div(v.d0);\r\n                fees[i] = feePerToken\r\n                    .mul(idealBalance.difference(v.newBalances[i]))\r\n                    .div(FEE_DENOMINATOR);\r\n                self.balances[i] = v.newBalances[i].sub(\r\n                    fees[i].mul(self.adminFee).div(FEE_DENOMINATOR)\r\n                );\r\n                v.newBalances[i] = v.newBalances[i].sub(fees[i]);\r\n            }\r\n            v.d2 = getD(\r\n                _xp(\r\n                    v.newBalances,\r\n                    v.tokenPrecisionMultipliers,\r\n                    v.baseVirtualPrice\r\n                ),\r\n                v.preciseA\r\n            );\r\n            toMint = v.d2.sub(v.d0).mul(v.totalSupply).div(v.d0);\r\n        } else {\r\n            // the initial depositor doesn't pay fees\r\n            self.balances = v.newBalances;\r\n            toMint = v.d1;\r\n        }\r\n\r\n        require(toMint >= minToMint, \"Couldn't mint min requested\");\r\n\r\n        // mint the user's LP tokens\r\n        self.lpToken.mint(msg.sender, toMint);\r\n\r\n        emit AddLiquidity(\r\n            msg.sender,\r\n            amounts,\r\n            fees,\r\n            v.d1,\r\n            v.totalSupply.add(toMint)\r\n        );\r\n\r\n        return toMint;\r\n    }\r\n\r\n    /**\r\n     * @notice Remove liquidity from the pool all in one token.\r\n     * @param self Swap struct to read from and write to\r\n     * @param tokenAmount the amount of the lp tokens to burn\r\n     * @param tokenIndex the index of the token you want to receive\r\n     * @param minAmount the minimum amount to withdraw, otherwise revert\r\n     * @return amount chosen token that user received\r\n     */\r\n    function removeLiquidityOneToken(\r\n        EvmoSwapUtils.Swap storage self,\r\n        MetaSwap storage metaSwapStorage,\r\n        uint256 tokenAmount,\r\n        uint8 tokenIndex,\r\n        uint256 minAmount\r\n    ) external returns (uint256) {\r\n        LPToken lpToken = self.lpToken;\r\n        uint256 totalSupply = lpToken.totalSupply();\r\n        uint256 numTokens = self.pooledTokens.length;\r\n        require(tokenAmount <= lpToken.balanceOf(msg.sender), \">LP.balanceOf\");\r\n        require(tokenIndex < numTokens, \"Token not found\");\r\n\r\n        uint256 dyFee;\r\n        uint256 dy;\r\n\r\n        (dy, dyFee) = calculateWithdrawOneToken(\r\n            self,\r\n            msg.sender,\r\n            tokenAmount,\r\n            tokenIndex,\r\n            _updateBaseVirtualPrice(metaSwapStorage),\r\n            totalSupply\r\n        );\r\n\r\n        require(dy >= minAmount, \"dy < minAmount\");\r\n\r\n        self.balances[tokenIndex] = self.balances[tokenIndex].sub(\r\n            dy.add(dyFee.mul(self.adminFee).div(FEE_DENOMINATOR))\r\n        );\r\n        lpToken.burnFrom(msg.sender, tokenAmount);\r\n        self.pooledTokens[tokenIndex].safeTransfer(msg.sender, dy);\r\n\r\n        emit RemoveLiquidityOne(\r\n            msg.sender,\r\n            tokenAmount,\r\n            totalSupply,\r\n            tokenIndex,\r\n            dy\r\n        );\r\n\r\n        return dy;\r\n    }\r\n\r\n    /**\r\n     * @notice Remove liquidity from the pool, weighted differently than the\r\n     * pool's current balances.\r\n     *\r\n     * @param self Swap struct to read from and write to\r\n     * @param amounts how much of each token to withdraw\r\n     * @param maxBurnAmount the max LP token provider is willing to pay to\r\n     * remove liquidity. Useful as a front-running mitigation.\r\n     * @return actual amount of LP tokens burned in the withdrawal\r\n     */\r\n    function removeLiquidityImbalance(\r\n        EvmoSwapUtils.Swap storage self,\r\n        MetaSwap storage metaSwapStorage,\r\n        uint256[] memory amounts,\r\n        uint256 maxBurnAmount\r\n    ) public returns (uint256) {\r\n        ManageLiquidityInfo memory v =\r\n            ManageLiquidityInfo(\r\n                0,\r\n                0,\r\n                0,\r\n                self.lpToken,\r\n                0,\r\n                getAPrecise(self),\r\n                _updateBaseVirtualPrice(metaSwapStorage),\r\n                self.tokenPrecisionMultipliers,\r\n                self.balances\r\n            );\r\n        v.totalSupply = v.lpToken.totalSupply();\r\n\r\n        require(\r\n            amounts.length == v.newBalances.length,\r\n            \"Amounts should match pool tokens\"\r\n        );\r\n        require(\r\n            maxBurnAmount <= v.lpToken.balanceOf(msg.sender) &&\r\n                maxBurnAmount != 0,\r\n            \">LP.balanceOf\"\r\n        );\r\n\r\n        uint256 feePerToken = _feePerToken(self);\r\n\r\n        uint256[] memory fees = new uint256[](v.newBalances.length);\r\n        {\r\n            uint256[] memory balances1 = new uint256[](v.newBalances.length);\r\n\r\n            v.d0 = getD(\r\n                _xp(\r\n                    v.newBalances,\r\n                    v.tokenPrecisionMultipliers,\r\n                    v.baseVirtualPrice\r\n                ),\r\n                v.preciseA\r\n            );\r\n            for (uint256 i = 0; i < v.newBalances.length; i++) {\r\n                balances1[i] = v.newBalances[i].sub(\r\n                    amounts[i],\r\n                    \"Cannot withdraw more than available\"\r\n                );\r\n            }\r\n            v.d1 = getD(\r\n                _xp(balances1, v.tokenPrecisionMultipliers, v.baseVirtualPrice),\r\n                v.preciseA\r\n            );\r\n\r\n            for (uint256 i = 0; i < v.newBalances.length; i++) {\r\n                uint256 idealBalance = v.d1.mul(v.newBalances[i]).div(v.d0);\r\n                uint256 difference = idealBalance.difference(balances1[i]);\r\n                fees[i] = feePerToken.mul(difference).div(FEE_DENOMINATOR);\r\n                self.balances[i] = balances1[i].sub(\r\n                    fees[i].mul(self.adminFee).div(FEE_DENOMINATOR)\r\n                );\r\n                balances1[i] = balances1[i].sub(fees[i]);\r\n            }\r\n\r\n            v.d2 = getD(\r\n                _xp(balances1, v.tokenPrecisionMultipliers, v.baseVirtualPrice),\r\n                v.preciseA\r\n            );\r\n        }\r\n\r\n        uint256 tokenAmount = v.d0.sub(v.d2).mul(v.totalSupply).div(v.d0);\r\n        require(tokenAmount != 0, \"Burnt amount cannot be zero\");\r\n        tokenAmount = tokenAmount.add(1).mul(FEE_DENOMINATOR).div(\r\n            FEE_DENOMINATOR.sub(calculateCurrentWithdrawFee(self, msg.sender))\r\n        );\r\n\r\n        require(tokenAmount <= maxBurnAmount, \"tokenAmount > maxBurnAmount\");\r\n\r\n        v.lpToken.burnFrom(msg.sender, tokenAmount);\r\n\r\n        for (uint256 i = 0; i < v.newBalances.length; i++) {\r\n            self.pooledTokens[i].safeTransfer(msg.sender, amounts[i]);\r\n        }\r\n\r\n        emit RemoveLiquidityImbalance(\r\n            msg.sender,\r\n            amounts,\r\n            fees,\r\n            v.d1,\r\n            v.totalSupply.sub(tokenAmount)\r\n        );\r\n\r\n        return tokenAmount;\r\n    }\r\n}"
    },
    "contracts/stable/MetaSwapDeposit.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.6.12;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\r\n\r\n\r\nimport \"./IMetaSwap.sol\";\r\nimport \"./ISwap.sol\";\r\n\r\n/**\r\n * @title MetaSwapDeposit\r\n * @notice This contract flattens the LP token in a MetaSwap pool for easier user access.\r\n *\r\n * For example, suppose there exists a base Swap pool consisting of [DAI, USDC, USDT].\r\n * Then a MetaSwap pool can be created with [BUSD, BaseSwapLPToken] to allow trades between either\r\n * the LP token or the underlying tokens and BUSD.\r\n *\r\n * MetaSwapDeposit flattens the LP token and remaps them to [BUSD, DAI, USDC, USDT], allowing users\r\n * to ignore the dependency on BaseSwapLPToken.\r\n */\r\ncontract MetaSwapDeposit {\r\n    using SafeERC20 for IERC20;\r\n    using SafeMath for uint256;\r\n\r\n    ISwap public baseSwap;\r\n    IMetaSwap public metaSwap;\r\n    IERC20[] public baseTokens;\r\n    IERC20[] public metaTokens;\r\n    IERC20[] public tokens;\r\n    IERC20 public metaLPToken;\r\n\r\n    uint256 constant MAX_UINT256 = 2**256 - 1;\r\n\r\n    struct RemoveLiquidityImbalanceInfo {\r\n        ISwap baseSwap;\r\n        IMetaSwap metaSwap;\r\n        IERC20 metaLPToken;\r\n        uint8 baseLPTokenIndex;\r\n        bool withdrawFromBase;\r\n        uint256 leftoverMetaLPTokenAmount;\r\n    }\r\n\r\n    /**\r\n     * @notice Sets the address for the base swap contract, meta swap contract, and the\r\n     * meta swap LP token contract.\r\n     * @param _baseSwap the address of the base swap contract\r\n     * @param _metaSwap the address of the meta swap contract\r\n     * @param _metaLPToken the address of the meta swap LP token contract\r\n     */\r\n    constructor(\r\n        ISwap _baseSwap,\r\n        IMetaSwap _metaSwap,\r\n        IERC20 _metaLPToken\r\n    ) public {\r\n        // Check and approve base level tokens to be deposited to the base swap contract\r\n        for (uint8 i = 0; i < 32; i++) {\r\n            try _baseSwap.getToken(i) returns (IERC20 token) {\r\n                baseTokens.push(token);\r\n                token.approve(address(_baseSwap), MAX_UINT256);\r\n                token.approve(address(_metaSwap), MAX_UINT256);\r\n            } catch {\r\n                break;\r\n            }\r\n        }\r\n\r\n        // Check and approve meta level tokens to be deposited to the meta swap contract\r\n        IERC20 baseLPToken;\r\n        for (uint8 i = 0; i < 32; i++) {\r\n            try _metaSwap.getToken(i) returns (IERC20 token) {\r\n                baseLPToken = token;\r\n                metaTokens.push(token);\r\n                tokens.push(token);\r\n                token.approve(address(_metaSwap), MAX_UINT256);\r\n            } catch {\r\n                break;\r\n            }\r\n        }\r\n\r\n        tokens[tokens.length - 1] = baseTokens[0];\r\n        for (uint8 i = 1; i < baseTokens.length; i++) {\r\n            tokens.push(baseTokens[i]);\r\n        }\r\n\r\n        // Approve base swap LP token to be burned by the base swap contract for withdrawing\r\n        baseLPToken.approve(address(_baseSwap), MAX_UINT256);\r\n        // Approve meta swap LP token to be burned by the meta swap contract for withdrawing\r\n        _metaLPToken.approve(address(_metaSwap), MAX_UINT256);\r\n\r\n        // Initialize storage variables\r\n        baseSwap = _baseSwap;\r\n        metaSwap = _metaSwap;\r\n        metaLPToken = _metaLPToken;\r\n    }\r\n\r\n    // Mutative functions\r\n\r\n    /**\r\n     * @notice Swap two underlying tokens using the meta pool and the base pool\r\n     * @param tokenIndexFrom the token the user wants to swap from\r\n     * @param tokenIndexTo the token the user wants to swap to\r\n     * @param dx the amount of tokens the user wants to swap from\r\n     * @param minDy the min amount the user would like to receive, or revert.\r\n     * @param deadline latest timestamp to accept this transaction\r\n     */\r\n    function swap(\r\n        uint8 tokenIndexFrom,\r\n        uint8 tokenIndexTo,\r\n        uint256 dx,\r\n        uint256 minDy,\r\n        uint256 deadline\r\n    ) external returns (uint256) {\r\n        tokens[tokenIndexFrom].safeTransferFrom(msg.sender, address(this), dx);\r\n        uint256 tokenToAmount =\r\n            metaSwap.swapUnderlying(\r\n                tokenIndexFrom,\r\n                tokenIndexTo,\r\n                dx,\r\n                minDy,\r\n                deadline\r\n            );\r\n        tokens[tokenIndexTo].safeTransfer(msg.sender, tokenToAmount);\r\n        return tokenToAmount;\r\n    }\r\n\r\n    /**\r\n     * @notice Add liquidity to the pool with the given amounts of tokens\r\n     * @param amounts the amounts of each token to add, in their native precision\r\n     * @param minToMint the minimum LP tokens adding this amount of liquidity\r\n     * should mint, otherwise revert. Handy for front-running mitigation\r\n     * @param deadline latest timestamp to accept this transaction\r\n     * @return amount of LP token user minted and received\r\n     */\r\n    function addLiquidity(\r\n        uint256[] calldata amounts,\r\n        uint256 minToMint,\r\n        uint256 deadline\r\n    ) external returns (uint256) {\r\n        IERC20[] memory memBaseTokens = baseTokens;\r\n        IERC20[] memory memMetaTokens = metaTokens;\r\n        uint256 baseLPTokenIndex = memMetaTokens.length - 1;\r\n\r\n        require(amounts.length == memBaseTokens.length + baseLPTokenIndex);\r\n\r\n        uint256 baseLPTokenAmount;\r\n        {\r\n            // Transfer base tokens from the caller and deposit to the base swap pool\r\n            uint256[] memory baseAmounts = new uint256[](memBaseTokens.length);\r\n            bool shouldDepositBaseTokens;\r\n            for (uint8 i = 0; i < memBaseTokens.length; i++) {\r\n                IERC20 token = memBaseTokens[i];\r\n                uint256 depositAmount = amounts[baseLPTokenIndex + i];\r\n                if (depositAmount > 0) {\r\n                    token.safeTransferFrom(\r\n                        msg.sender,\r\n                        address(this),\r\n                        depositAmount\r\n                    );\r\n                    baseAmounts[i] = token.balanceOf(address(this)); // account for any fees on transfer\r\n                    shouldDepositBaseTokens = true;\r\n                }\r\n            }\r\n            if (shouldDepositBaseTokens) {\r\n                baseLPTokenAmount = baseSwap.addLiquidity(\r\n                    baseAmounts,\r\n                    0,\r\n                    deadline\r\n                );\r\n            }\r\n        }\r\n\r\n        uint256 metaLPTokenAmount;\r\n        {\r\n            // Transfer remaining meta level tokens from the caller and deposit to the meta swap pool\r\n            uint256[] memory metaAmounts = new uint256[](metaTokens.length);\r\n            for (uint8 i = 0; i < baseLPTokenIndex; i++) {\r\n                IERC20 token = memMetaTokens[i];\r\n                uint256 depositAmount = amounts[i];\r\n                if (depositAmount > 0) {\r\n                    token.safeTransferFrom(\r\n                        msg.sender,\r\n                        address(this),\r\n                        depositAmount\r\n                    );\r\n                    metaAmounts[i] = token.balanceOf(address(this)); // account for any fees on transfer\r\n                }\r\n            }\r\n            metaAmounts[baseLPTokenIndex] = baseLPTokenAmount;\r\n            metaLPTokenAmount = metaSwap.addLiquidity(\r\n                metaAmounts,\r\n                minToMint,\r\n                deadline\r\n            );\r\n        }\r\n\r\n        // Transfer the meta lp token to the caller\r\n        metaLPToken.safeTransfer(msg.sender, metaLPTokenAmount);\r\n\r\n        return metaLPTokenAmount;\r\n    }\r\n\r\n    /**\r\n     * @notice Burn LP tokens to remove liquidity from the pool. Withdraw fee that decays linearly\r\n     * over period of 4 weeks since last deposit will apply.\r\n     * @dev Liquidity can always be removed, even when the pool is paused.\r\n     * @param amount the amount of LP tokens to burn\r\n     * @param minAmounts the minimum amounts of each token in the pool\r\n     *        acceptable for this burn. Useful as a front-running mitigation\r\n     * @param deadline latest timestamp to accept this transaction\r\n     * @return amounts of tokens user received\r\n     */\r\n    function removeLiquidity(\r\n        uint256 amount,\r\n        uint256[] calldata minAmounts,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory) {\r\n        IERC20[] memory memBaseTokens = baseTokens;\r\n        IERC20[] memory memMetaTokens = metaTokens;\r\n        uint256[] memory totalRemovedAmounts;\r\n\r\n        {\r\n            uint256 numOfAllTokens =\r\n                memBaseTokens.length + memMetaTokens.length - 1;\r\n            require(minAmounts.length == numOfAllTokens, \"out of range\");\r\n            totalRemovedAmounts = new uint256[](numOfAllTokens);\r\n        }\r\n\r\n        // Transfer meta lp token from the caller to this\r\n        metaLPToken.safeTransferFrom(msg.sender, address(this), amount);\r\n\r\n        uint256 baseLPTokenAmount;\r\n        {\r\n            // Remove liquidity from the meta swap pool\r\n            uint256[] memory removedAmounts;\r\n            uint256 baseLPTokenIndex = memMetaTokens.length - 1;\r\n            {\r\n                uint256[] memory metaMinAmounts =\r\n                    new uint256[](memMetaTokens.length);\r\n                for (uint8 i = 0; i < baseLPTokenIndex; i++) {\r\n                    metaMinAmounts[i] = minAmounts[i];\r\n                }\r\n                removedAmounts = metaSwap.removeLiquidity(\r\n                    amount,\r\n                    metaMinAmounts,\r\n                    deadline\r\n                );\r\n            }\r\n\r\n            // Send the meta level tokens to the caller\r\n            for (uint8 i = 0; i < baseLPTokenIndex; i++) {\r\n                totalRemovedAmounts[i] = removedAmounts[i];\r\n                memMetaTokens[i].safeTransfer(msg.sender, removedAmounts[i]);\r\n            }\r\n            baseLPTokenAmount = removedAmounts[baseLPTokenIndex];\r\n\r\n            // Remove liquidity from the base swap pool\r\n            {\r\n                uint256[] memory baseMinAmounts =\r\n                    new uint256[](memBaseTokens.length);\r\n                for (uint8 i = 0; i < baseLPTokenIndex; i++) {\r\n                    baseMinAmounts[i] = minAmounts[baseLPTokenIndex + i];\r\n                }\r\n                removedAmounts = baseSwap.removeLiquidity(\r\n                    baseLPTokenAmount,\r\n                    baseMinAmounts,\r\n                    deadline\r\n                );\r\n            }\r\n\r\n            // Send the base level tokens to the caller\r\n            for (uint8 i = 0; i < memBaseTokens.length; i++) {\r\n                totalRemovedAmounts[baseLPTokenIndex + i] = removedAmounts[i];\r\n                memBaseTokens[i].safeTransfer(msg.sender, removedAmounts[i]);\r\n            }\r\n        }\r\n\r\n        return totalRemovedAmounts;\r\n    }\r\n\r\n    /**\r\n     * @notice Remove liquidity from the pool all in one token. Withdraw fee that decays linearly\r\n     * over period of 4 weeks since last deposit will apply.\r\n     * @param tokenAmount the amount of the token you want to receive\r\n     * @param tokenIndex the index of the token you want to receive\r\n     * @param minAmount the minimum amount to withdraw, otherwise revert\r\n     * @param deadline latest timestamp to accept this transaction\r\n     * @return amount of chosen token user received\r\n     */\r\n    function removeLiquidityOneToken(\r\n        uint256 tokenAmount,\r\n        uint8 tokenIndex,\r\n        uint256 minAmount,\r\n        uint256 deadline\r\n    ) external returns (uint256) {\r\n        uint8 baseLPTokenIndex = uint8(metaTokens.length - 1);\r\n        uint8 baseTokensLength = uint8(baseTokens.length);\r\n\r\n        metaLPToken.safeTransferFrom(msg.sender, address(this), tokenAmount);\r\n\r\n        IERC20 token;\r\n        if (tokenIndex < baseLPTokenIndex) {\r\n            metaSwap.removeLiquidityOneToken(\r\n                tokenAmount,\r\n                tokenIndex,\r\n                minAmount,\r\n                deadline\r\n            );\r\n            token = metaTokens[tokenIndex];\r\n        } else if (tokenIndex < baseLPTokenIndex + baseTokensLength) {\r\n            uint256 removedBaseLPTokenAmount =\r\n                metaSwap.removeLiquidityOneToken(\r\n                    tokenAmount,\r\n                    baseLPTokenIndex,\r\n                    0,\r\n                    deadline\r\n                );\r\n\r\n            baseSwap.removeLiquidityOneToken(\r\n                removedBaseLPTokenAmount,\r\n                tokenIndex - baseLPTokenIndex,\r\n                minAmount,\r\n                deadline\r\n            );\r\n            token = baseTokens[tokenIndex - baseLPTokenIndex];\r\n        } else {\r\n            revert(\"out of range\");\r\n        }\r\n\r\n        uint256 amountWithdrawn = token.balanceOf(address(this));\r\n        token.safeTransfer(msg.sender, amountWithdrawn);\r\n        return amountWithdrawn;\r\n    }\r\n\r\n    /**\r\n     * @notice Remove liquidity from the pool, weighted differently than the\r\n     * pool's current balances. Withdraw fee that decays linearly\r\n     * over period of 4 weeks since last deposit will apply.\r\n     * @param amounts how much of each token to withdraw\r\n     * @param maxBurnAmount the max LP token provider is willing to pay to\r\n     * remove liquidity. Useful as a front-running mitigation.\r\n     * @param deadline latest timestamp to accept this transaction\r\n     * @return amount of LP tokens burned\r\n     */\r\n    function removeLiquidityImbalance(\r\n        uint256[] calldata amounts,\r\n        uint256 maxBurnAmount,\r\n        uint256 deadline\r\n    ) external returns (uint256) {\r\n        IERC20[] memory memBaseTokens = baseTokens;\r\n        IERC20[] memory memMetaTokens = metaTokens;\r\n        uint256[] memory metaAmounts = new uint256[](memMetaTokens.length);\r\n        uint256[] memory baseAmounts = new uint256[](memBaseTokens.length);\r\n\r\n        require(\r\n            amounts.length == memBaseTokens.length + memMetaTokens.length - 1,\r\n            \"out of range\"\r\n        );\r\n\r\n        RemoveLiquidityImbalanceInfo memory v =\r\n            RemoveLiquidityImbalanceInfo(\r\n                baseSwap,\r\n                metaSwap,\r\n                metaLPToken,\r\n                uint8(metaAmounts.length - 1),\r\n                false,\r\n                0\r\n            );\r\n\r\n        for (uint8 i = 0; i < v.baseLPTokenIndex; i++) {\r\n            metaAmounts[i] = amounts[i];\r\n        }\r\n\r\n        for (uint8 i = 0; i < baseAmounts.length; i++) {\r\n            baseAmounts[i] = amounts[v.baseLPTokenIndex + i];\r\n            if (baseAmounts[i] > 0) {\r\n                v.withdrawFromBase = true;\r\n            }\r\n        }\r\n\r\n        // Calculate how much base LP token we need to get the desired amount of underlying tokens\r\n        if (v.withdrawFromBase) {\r\n            metaAmounts[v.baseLPTokenIndex] = v\r\n                .baseSwap\r\n                .calculateTokenAmount(address(this), baseAmounts, false)\r\n                .mul(10005)\r\n                .div(10000);\r\n        }\r\n\r\n        // Transfer meta swap LP token from the caller to this contract\r\n        v.metaLPToken.safeTransferFrom(\r\n            msg.sender,\r\n            address(this),\r\n            maxBurnAmount\r\n        );\r\n\r\n        // Withdraw the paired meta level tokens and the base LP token from the meta swap pool\r\n        uint256 burnedMetaLPTokenAmount =\r\n            v.metaSwap.removeLiquidityImbalance(\r\n                metaAmounts,\r\n                maxBurnAmount,\r\n                deadline\r\n            );\r\n        v.leftoverMetaLPTokenAmount = maxBurnAmount.sub(\r\n            burnedMetaLPTokenAmount\r\n        );\r\n\r\n        // If underlying tokens are desired, withdraw them from the base swap pool\r\n        if (v.withdrawFromBase) {\r\n            v.baseSwap.removeLiquidityImbalance(\r\n                baseAmounts,\r\n                metaAmounts[v.baseLPTokenIndex],\r\n                deadline\r\n            );\r\n\r\n            // Base swap may require LESS base LP token than the amount we have\r\n            // In that case, deposit it to the meta swap pool.\r\n            uint256[] memory leftovers = new uint256[](metaAmounts.length);\r\n            IERC20 baseLPToken = memMetaTokens[v.baseLPTokenIndex];\r\n            uint256 leftoverBaseLPTokenAmount =\r\n                baseLPToken.balanceOf(address(this));\r\n            if (leftoverBaseLPTokenAmount > 0) {\r\n                leftovers[v.baseLPTokenIndex] = leftoverBaseLPTokenAmount;\r\n                v.leftoverMetaLPTokenAmount = v.leftoverMetaLPTokenAmount.add(\r\n                    v.metaSwap.addLiquidity(leftovers, 0, deadline)\r\n                );\r\n            }\r\n        }\r\n\r\n        // Transfer all withdrawn tokens to the caller\r\n        for (uint8 i = 0; i < amounts.length; i++) {\r\n            IERC20 token;\r\n            if (i < v.baseLPTokenIndex) {\r\n                token = memMetaTokens[i];\r\n            } else {\r\n                token = memBaseTokens[i - v.baseLPTokenIndex];\r\n            }\r\n            if (amounts[i] > 0) {\r\n                token.safeTransfer(msg.sender, amounts[i]);\r\n            }\r\n        }\r\n\r\n        // If there were any extra meta lp token, transfer them back to the caller as well\r\n        if (v.leftoverMetaLPTokenAmount > 0) {\r\n            v.metaLPToken.safeTransfer(msg.sender, v.leftoverMetaLPTokenAmount);\r\n        }\r\n\r\n        return maxBurnAmount - v.leftoverMetaLPTokenAmount;\r\n    }\r\n\r\n    // VIEW FUNCTIONS\r\n\r\n    /**\r\n     * @notice A simple method to calculate prices from deposits or\r\n     * withdrawals, excluding fees but including slippage. This is\r\n     * helpful as an input into the various \"min\" parameters on calls\r\n     * to fight front-running. When withdrawing from the base pool in imbalanced\r\n     * fashion, the recommended slippage setting is 0.2% or higher.\r\n     *\r\n     * @dev This shouldn't be used outside frontends for user estimates.\r\n     *\r\n     * @param account address that is depositing or withdrawing tokens\r\n     * @param amounts an array of token amounts to deposit or withdrawal,\r\n     * corresponding to pooledTokens. The amount should be in each\r\n     * pooled token's native precision. If a token charges a fee on transfers,\r\n     * use the amount that gets transferred after the fee.\r\n     * @param deposit whether this is a deposit or a withdrawal\r\n     * @return token amount the user will receive\r\n     */\r\n    function calculateTokenAmount(\r\n        address account,\r\n        uint256[] calldata amounts,\r\n        bool deposit\r\n    ) external view returns (uint256) {\r\n        account = address(this);\r\n        uint256[] memory metaAmounts = new uint256[](metaTokens.length);\r\n        uint256[] memory baseAmounts = new uint256[](baseTokens.length);\r\n        uint256 baseLPTokenIndex = metaAmounts.length - 1;\r\n\r\n        for (uint8 i = 0; i < baseLPTokenIndex; i++) {\r\n            metaAmounts[i] = amounts[i];\r\n        }\r\n\r\n        for (uint8 i = 0; i < baseAmounts.length; i++) {\r\n            baseAmounts[i] = amounts[baseLPTokenIndex + i];\r\n        }\r\n\r\n        uint256 baseLPTokenAmount =\r\n            baseSwap.calculateTokenAmount(account, baseAmounts, deposit);\r\n        metaAmounts[baseLPTokenIndex] = baseLPTokenAmount;\r\n\r\n        return metaSwap.calculateTokenAmount(account, metaAmounts, deposit);\r\n    }\r\n\r\n    /**\r\n     * @notice A simple method to calculate amount of each underlying\r\n     * tokens that is returned upon burning given amount of LP tokens\r\n     * @param account the address that is withdrawing tokens\r\n     * @param amount the amount of LP tokens that would be burned on withdrawal\r\n     * @return array of token balances that the user will receive\r\n     */\r\n    function calculateRemoveLiquidity(address account, uint256 amount)\r\n        external\r\n        view\r\n        returns (uint256[] memory)\r\n    {\r\n        account = address(this); // overwrite account\r\n        uint256[] memory metaAmounts =\r\n            metaSwap.calculateRemoveLiquidity(account, amount);\r\n        uint8 baseLPTokenIndex = uint8(metaAmounts.length - 1);\r\n        uint256[] memory baseAmounts =\r\n            baseSwap.calculateRemoveLiquidity(\r\n                account,\r\n                metaAmounts[baseLPTokenIndex]\r\n            );\r\n\r\n        uint256[] memory totalAmounts =\r\n            new uint256[](baseLPTokenIndex + baseAmounts.length);\r\n        for (uint8 i = 0; i < baseLPTokenIndex; i++) {\r\n            totalAmounts[i] = metaAmounts[i];\r\n        }\r\n        for (uint8 i = 0; i < baseAmounts.length; i++) {\r\n            totalAmounts[baseLPTokenIndex + i] = baseAmounts[i];\r\n        }\r\n\r\n        return totalAmounts;\r\n    }\r\n\r\n    /**\r\n     * @notice Calculate the amount of underlying token available to withdraw\r\n     * when withdrawing via only single token\r\n     * @param account the address that is withdrawing tokens\r\n     * @param tokenAmount the amount of LP token to burn\r\n     * @param tokenIndex index of which token will be withdrawn\r\n     * @return availableTokenAmount calculated amount of underlying token\r\n     * available to withdraw\r\n     */\r\n    function calculateRemoveLiquidityOneToken(\r\n        address account,\r\n        uint256 tokenAmount,\r\n        uint8 tokenIndex\r\n    ) external view returns (uint256) {\r\n        account = address(this); // overwrite account\r\n        uint8 baseLPTokenIndex = uint8(metaTokens.length - 1);\r\n\r\n        if (tokenIndex < baseLPTokenIndex) {\r\n            return\r\n                metaSwap.calculateRemoveLiquidityOneToken(\r\n                    account,\r\n                    tokenAmount,\r\n                    tokenIndex\r\n                );\r\n        } else {\r\n            uint256 baseLPTokenAmount =\r\n                metaSwap.calculateRemoveLiquidityOneToken(\r\n                    account,\r\n                    tokenAmount,\r\n                    baseLPTokenIndex\r\n                );\r\n            return\r\n                baseSwap.calculateRemoveLiquidityOneToken(\r\n                    account,\r\n                    baseLPTokenAmount,\r\n                    tokenIndex - baseLPTokenIndex\r\n                );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Return address of the pooled token at given index. Reverts if tokenIndex is out of range.\r\n     * This is a flattened representation of the pooled tokens.\r\n     * @param index the index of the token\r\n     * @return address of the token at given index\r\n     */\r\n    function getToken(uint256 index) external view returns (IERC20) {\r\n        require(index < tokens.length, \"index out of range\");\r\n        return tokens[index];\r\n    }\r\n\r\n    /**\r\n     * @notice Calculate amount of tokens you receive on swap\r\n     * @param tokenIndexFrom the token the user wants to sell\r\n     * @param tokenIndexTo the token the user wants to buy\r\n     * @param dx the amount of tokens the user wants to sell. If the token charges\r\n     * a fee on transfers, use the amount that gets transferred after the fee.\r\n     * @return amount of tokens the user will receive\r\n     */\r\n    function calculateSwap(\r\n        uint8 tokenIndexFrom,\r\n        uint8 tokenIndexTo,\r\n        uint256 dx\r\n    ) external view returns (uint256) {\r\n        return\r\n            metaSwap.calculateSwapUnderlying(tokenIndexFrom, tokenIndexTo, dx);\r\n    }\r\n}"
    },
    "contracts/stable/IMetaSwap.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.6.12;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n\r\ninterface IMetaSwap {\r\n    // pool data view functions\r\n    function getA() external view returns (uint256);\r\n\r\n    function getToken(uint8 index) external view returns (IERC20);\r\n\r\n    function getTokenIndex(address tokenAddress) external view returns (uint8);\r\n\r\n    function getTokenBalance(uint8 index) external view returns (uint256);\r\n\r\n    function getVirtualPrice() external view returns (uint256);\r\n\r\n    function isGuarded() external view returns (bool);\r\n\r\n    function swapStorage()\r\n        external\r\n        view\r\n        returns (\r\n            uint256 initialA,\r\n            uint256 futureA,\r\n            uint256 initialATime,\r\n            uint256 futureATime,\r\n            uint256 swapFee,\r\n            uint256 adminFee,\r\n            uint256 defaultDepositFee,\r\n            uint256 defaultWithdrawFee,\r\n            address lpToken,\r\n            address devaddr\r\n        );\r\n\r\n    // min return calculation functions\r\n    function calculateSwap(\r\n        uint8 tokenIndexFrom,\r\n        uint8 tokenIndexTo,\r\n        uint256 dx\r\n    ) external view returns (uint256);\r\n\r\n    function calculateSwapUnderlying(\r\n        uint8 tokenIndexFrom,\r\n        uint8 tokenIndexTo,\r\n        uint256 dx\r\n    ) external view returns (uint256);\r\n\r\n    function calculateTokenAmount(\r\n        address account,\r\n        uint256[] calldata amounts,\r\n        bool deposit\r\n    ) external view returns (uint256);\r\n\r\n    function calculateRemoveLiquidity(address account, uint256 amount)\r\n        external\r\n        view\r\n        returns (uint256[] memory);\r\n\r\n    function calculateRemoveLiquidityOneToken(\r\n        address account,\r\n        uint256 tokenAmount,\r\n        uint8 tokenIndex\r\n    ) external view returns (uint256 availableTokenAmount);\r\n\r\n    function swap(\r\n        uint8 tokenIndexFrom,\r\n        uint8 tokenIndexTo,\r\n        uint256 dx,\r\n        uint256 minDy,\r\n        uint256 deadline\r\n    ) external returns (uint256);\r\n\r\n    function swapUnderlying(\r\n        uint8 tokenIndexFrom,\r\n        uint8 tokenIndexTo,\r\n        uint256 dx,\r\n        uint256 minDy,\r\n        uint256 deadline\r\n    ) external returns (uint256);\r\n\r\n    function addLiquidity(\r\n        uint256[] calldata amounts,\r\n        uint256 minToMint,\r\n        uint256 deadline\r\n    ) external returns (uint256);\r\n\r\n    function removeLiquidity(\r\n        uint256 amount,\r\n        uint256[] calldata minAmounts,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory);\r\n\r\n    function removeLiquidityOneToken(\r\n        uint256 tokenAmount,\r\n        uint8 tokenIndex,\r\n        uint256 minAmount,\r\n        uint256 deadline\r\n    ) external returns (uint256);\r\n\r\n    function removeLiquidityImbalance(\r\n        uint256[] calldata amounts,\r\n        uint256 maxBurnAmount,\r\n        uint256 deadline\r\n    ) external returns (uint256);\r\n\r\n    // withdraw fee update function\r\n    function updateUserWithdrawFee(address recipient, uint256 transferAmount)\r\n        external;\r\n}"
    },
    "contracts/stable/ILPToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.6.12;\r\n\r\nimport \"./ISwap.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n\r\ninterface ILPToken is IERC20 {\r\n    function swap() external view returns (ISwap);\r\n}\r\n"
    },
    "contracts/stable/AmplificationUtils.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\r\nimport \"./EvmoSwapUtils.sol\";\r\n\r\npragma solidity 0.6.12;\r\n\r\nlibrary AmplificationUtils {\r\n    using SafeMath for uint256;\r\n\r\n    event RampA(\r\n        uint256 oldA,\r\n        uint256 newA,\r\n        uint256 initialTime,\r\n        uint256 futureTime\r\n    );\r\n    event StopRampA(uint256 currentA, uint256 time);\r\n\r\n    // Constant values used in ramping A calculations\r\n    uint256 public constant A_PRECISION = 100;\r\n    uint256 public constant MAX_A = 10**6;\r\n    uint256 private constant MAX_A_CHANGE = 2;\r\n    uint256 private constant MIN_RAMP_TIME = 14 days;\r\n\r\n    /**\r\n     * @notice Start ramping up or down A parameter towards given futureA_ and futureTime_\r\n     * Checks if the change is too rapid, and commits the new A value only when it falls under\r\n     * the limit range.\r\n     * @param self Swap struct to update\r\n     * @param futureA_ the new A to ramp towards\r\n     * @param futureTime_ timestamp when the new A should be reached\r\n     */\r\n    function rampA(\r\n        EvmoSwapUtils.Swap storage self,\r\n        uint256 initialAPrecise,\r\n        uint256 futureA_,\r\n        uint256 futureTime_\r\n    ) external {\r\n        require(\r\n            block.timestamp >= self.initialATime.add(1 days),\r\n            \"Wait 1 day before starting ramp\"\r\n        );\r\n        require(\r\n            futureTime_ >= block.timestamp.add(MIN_RAMP_TIME),\r\n            \"Insufficient ramp time\"\r\n        );\r\n        require(\r\n            futureA_ > 0 && futureA_ < MAX_A,\r\n            \"futureA_ must be > 0 and < MAX_A\"\r\n        );\r\n\r\n        uint256 futureAPrecise = futureA_.mul(A_PRECISION);\r\n\r\n        if (futureAPrecise < initialAPrecise) {\r\n            require(\r\n                futureAPrecise.mul(MAX_A_CHANGE) >= initialAPrecise,\r\n                \"futureA_ is too small\"\r\n            );\r\n        } else {\r\n            require(\r\n                futureAPrecise <= initialAPrecise.mul(MAX_A_CHANGE),\r\n                \"futureA_ is too large\"\r\n            );\r\n        }\r\n\r\n        self.initialA = initialAPrecise;\r\n        self.futureA = futureAPrecise;\r\n        self.initialATime = block.timestamp;\r\n        self.futureATime = futureTime_;\r\n\r\n        emit RampA(\r\n            initialAPrecise,\r\n            futureAPrecise,\r\n            block.timestamp,\r\n            futureTime_\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Stops ramping A immediately. Once this function is called, rampA()\r\n     * cannot be called for another 24 hours\r\n     * @param self Swap struct to update\r\n     */\r\n    function stopRampA(EvmoSwapUtils.Swap storage self, uint256 currentA) external {\r\n        require(self.futureATime > block.timestamp, \"Ramp is already stopped\");\r\n\r\n        self.initialA = currentA;\r\n        self.futureA = currentA;\r\n        self.initialATime = block.timestamp;\r\n        self.futureATime = block.timestamp;\r\n\r\n        emit StopRampA(currentA, block.timestamp);\r\n    }\r\n}"
    },
    "contracts/ifo/EMOPrivateSale.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.6.12;\r\npragma experimental ABIEncoderV2;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/utils/Pausable.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\r\n\r\ninterface AggregatorV3Interface {\r\n    function decimals() external view returns (uint8);\r\n\r\n    function latestRoundData() external view returns (\r\n        uint80 roundId,\r\n        int256 answer,\r\n        uint256 startedAt,\r\n        uint256 updatedAt,\r\n        uint80 answeredInRound\r\n    );\r\n}\r\n\r\ncontract EMOPrivateSale is Ownable, Pausable {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    /**\r\n     * EVENTS\r\n     **/\r\n    event TokenPurchased(address indexed user, address coin, uint coinAmount, uint256 tokenAmount);\r\n    event TokensClaimed(address indexed user, uint256 tokenAmount);\r\n\r\n    /**\r\n     * CONSTANTS\r\n     **/\r\n\r\n    // *** support coin ***\r\n    address public USDC;\r\n\r\n    // *** SALE PARAMETERS ***\r\n    uint256 public constant PRECISION = 1000000; //Up to 0.000001\r\n    uint256 public constant WITHDRAWAL_PERIOD = 395 * 24 * 60 * 60; //1 year to withdrawal\r\n\r\n    /***\r\n     * STORAGE\r\n     ***/\r\n\r\n    uint256 public minTokensAmount; // minimum amount of TOKEN to buy per tx,like 1000 * 1e18\r\n    uint256 public maxTokensAmount; // max amount of each address can buy\r\n    uint256 public maxGasPrice; // mitigate front running\r\n\r\n    // *** SALE PARAMETERS START ***\r\n\r\n    AggregatorV3Interface public priceFeed;\r\n    uint256 public  privateSaleStart;\r\n    uint256 public  privateSaleEnd;\r\n    uint256 public  privateSaleTokenPool; // total amount of token in private slae pool\r\n\r\n    // *** SALE PARAMETERS END ***\r\n\r\n    // *** VESTING PARAMETERS START ***\r\n\r\n    uint256 public vestingStart; // seconds\r\n    uint256 public vestingDuration; // seconds\r\n\r\n    // *** VESTING PARAMETERS END ***\r\n\r\n    address public token;\r\n    uint256 public tokenPrice; // the price of token in usd multiply by PRECISION\r\n    mapping(address => uint256) public purchased;\r\n    mapping(address => uint256) internal _claimed;\r\n    mapping(address => bool) public whitelisted;\r\n\r\n    uint256 public purchasedPrivateSale;\r\n    uint256 public basePrice; // the price of ETH in usd multiply by PRECISION\r\n\r\n    address private treasury;\r\n    address private keeper; // update base price\r\n\r\n    /***\r\n     * MODIFIERS\r\n     ***/\r\n\r\n    /**\r\n    * @dev Throws if address is not owner or keeper.\r\n    */\r\n    modifier onlyKeeper() {\r\n        require(_msgSender() == owner() || _msgSender() == keeper, \"!Keeper\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Throws if called when no ongoing pre-sale or public sale.\r\n    */\r\n    modifier onlySale() {\r\n        require(_isPrivateSale(), \"PrivateSale stages are over or not started\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Throws if sale stage is ongoing.\r\n    */\r\n    modifier notOnSale() {\r\n        require(!_isPrivateSale(), \"PrivateSale is not over\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Throws if gas price exceeds gas limit.\r\n    */\r\n    modifier correctGas() {\r\n        require(maxGasPrice == 0 || tx.gasprice <= maxGasPrice, \"Gas price exceeds limit\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Throws if address is not on the whitelist.\r\n    */\r\n    modifier onlyWhitelist(address user) {\r\n        require(whitelisted[user], \"Address is not on the whitelist\");\r\n        _;\r\n    }\r\n\r\n    /***\r\n     * INITIALIZER AND SETTINGS\r\n     ***/\r\n\r\n    constructor(address _treasury, address _keeper, address _usdc,\r\n        address _token, uint256 _tokenPrice, uint256 _basePrice,\r\n        uint256 _minTokensAmount, uint256 _maxTokensAmount, uint256 _privateSaleTokenPool,\r\n        uint256 _privateSaleStart, uint256 _privateSaleEnd, uint256 _vestingDuration) public {\r\n        require(_treasury != address(0), \"!treasury\");\r\n        require(_privateSaleStart > 0, \"!start\");\r\n        require(_privateSaleEnd > _privateSaleStart, \"start >= end\");\r\n        require(_vestingDuration < WITHDRAWAL_PERIOD, \"vestingDuration >= WITHDRAWAL_PERIOD\");\r\n\r\n        treasury = _treasury;\r\n        keeper = _keeper;\r\n\r\n        USDC = _usdc;\r\n        token = _token;\r\n        tokenPrice = _tokenPrice;\r\n        basePrice = _basePrice;\r\n\r\n        minTokensAmount = _minTokensAmount;\r\n        maxTokensAmount = _maxTokensAmount;\r\n        privateSaleTokenPool = _privateSaleTokenPool;\r\n\r\n        privateSaleStart = _privateSaleStart;\r\n        privateSaleEnd = _privateSaleEnd;\r\n        vestingDuration = _vestingDuration;\r\n    }\r\n\r\n    /**\r\n    * @notice Updates current priceFeed of chainlink.\r\n    * @param _priceFeed New priceFeed\r\n    */\r\n    function adminSetPriceFeed(address _priceFeed) external onlyOwner {\r\n        priceFeed = AggregatorV3Interface(_priceFeed);\r\n    }\r\n\r\n    /**\r\n     * @notice Updates current vesting start time. Can be used once\r\n     * @param _vestingStart New vesting start time\r\n     */\r\n    function adminSetVestingStart(uint256 _vestingStart) virtual external onlyOwner {\r\n        require(vestingStart == 0, \"Vesting start is already set\");\r\n        require(_vestingStart > privateSaleEnd && block.timestamp < _vestingStart, \"Incorrect time provided\");\r\n        vestingStart = _vestingStart;\r\n    }\r\n\r\n    /**\r\n    * @notice Sets the rate based on the contracts precision\r\n    * @param _price The price of ETH multiple by precision (e.g. _rate = PRECISION corresponds to $1)\r\n    */\r\n    function adminSetBasePrice(uint256 _price) external onlyKeeper {\r\n        basePrice = _price;\r\n    }\r\n\r\n    /**\r\n    * @notice Allows owner to change the treasury address. Treasury is the address where all funds from sale go to\r\n    * @param _treasury New treasury address\r\n    */\r\n    function adminSetTreasury(address _treasury) external onlyOwner {\r\n        treasury = _treasury;\r\n    }\r\n\r\n    /**\r\n    * @notice Allows owner to change min allowed token to buy per tx.\r\n    * @param _minToken New min token amount\r\n    */\r\n    function adminSetMinToken(uint256 _minToken) external onlyOwner {\r\n        minTokensAmount = _minToken;\r\n    }\r\n\r\n    /**\r\n    * @notice Allows owner to change max allowed token per address.\r\n    * @param _maxToken New max token amount\r\n    */\r\n    function adminSetMaxToken(uint256 _maxToken) external onlyOwner {\r\n        maxTokensAmount = _maxToken;\r\n    }\r\n\r\n    /**\r\n    * @notice Allows owner to change the max allowed gas price. Prevents gas wars\r\n    * @param _maxGasPrice New max gas price\r\n    */\r\n    function adminSetMaxGasPrice(uint256 _maxGasPrice) external onlyOwner {\r\n        maxGasPrice = _maxGasPrice;\r\n    }\r\n\r\n    function adminSetWhitelisted(address [] memory _users, bool _flag) external onlyOwner {\r\n        for (uint i = 0; i < _users.length; i++) {\r\n            whitelisted[_users[i]] = _flag;\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @notice Stops purchase functions. Owner only\r\n    */\r\n    function adminPause() external onlyOwner {\r\n        _pause();\r\n    }\r\n\r\n    /**\r\n    * @notice Unpauses purchase functions. Owner only\r\n    */\r\n    function adminUnpause() external onlyOwner {\r\n        _unpause();\r\n    }\r\n\r\n    function adminAddPurchase(address _receiver, uint256 _amount) virtual external onlyOwner {\r\n        purchased[_receiver] = purchased[_receiver].add(_amount);\r\n    }\r\n\r\n    /***\r\n     * PURCHASE FUNCTIONS\r\n     ***/\r\n\r\n    /**\r\n    * @notice For purchase with ETH\r\n    */\r\n    receive() external virtual payable onlySale whenNotPaused {\r\n        _purchaseTokenWithETH();\r\n    }\r\n\r\n    /**\r\n     * @notice For purchase with ETH. ETH is left on the contract until withdrawn to treasury\r\n     */\r\n    function purchaseTokenWithETH() external payable onlySale whenNotPaused {\r\n        require(msg.value > 0, \"No ETH sent\");\r\n        _purchaseTokenWithETH();\r\n    }\r\n\r\n    function _purchaseTokenWithETH() private correctGas onlyWhitelist(_msgSender()) {\r\n        uint256 purchasedAmount = calcEthPurchasedAmount(msg.value);\r\n        require(purchasedAmount >= minTokensAmount, \"Minimum required unreached\");\r\n\r\n        require(purchasedPrivateSale.add(purchasedAmount) <= privateSaleTokenPool, \"Not enough token in private slae pool\");\r\n        purchasedPrivateSale = purchasedPrivateSale.add(purchasedAmount);\r\n        purchased[_msgSender()] = purchased[_msgSender()].add(purchasedAmount);\r\n        require(purchased[_msgSender()] <= maxTokensAmount, \"Maximum allowed exceeded\");\r\n\r\n        emit TokenPurchased(_msgSender(), address(0), msg.value, purchasedAmount);\r\n    }\r\n\r\n    /**\r\n    * @notice For purchase with allowed stablecoin (USDC)\r\n    * @param coin Address of the token to be paid in\r\n    * @param amount Amount of the token to be paid in\r\n    */\r\n    function purchaseTokenWithCoin(address coin, uint256 amount) external onlySale whenNotPaused correctGas onlyWhitelist(_msgSender()) {\r\n        require(coin == USDC, \"Coin is not supported!\");\r\n        uint256 purchasedAmount = calcCoinPurchasedAmount(coin, amount);\r\n        require(purchasedAmount >= minTokensAmount, \"Minimum required unreached\");\r\n\r\n        purchasedPrivateSale = purchasedPrivateSale.add(purchasedAmount);\r\n        require(purchasedPrivateSale <= privateSaleTokenPool, \"Token is not enough!\");\r\n        purchased[_msgSender()] = purchased[_msgSender()].add(purchasedAmount);\r\n        require(purchased[_msgSender()] <= maxTokensAmount, \"Maximum allowed exceeded\");\r\n\r\n        IERC20(coin).safeTransferFrom(_msgSender(), address(this), amount);\r\n\r\n        emit TokenPurchased(_msgSender(), coin, amount, purchasedAmount);\r\n    }\r\n\r\n\r\n    /**\r\n     * @notice Function for the administrator to withdraw token\r\n     * @notice Withdrawals allowed only if there is no sale pending stage\r\n     * @param ERC20token Address of ERC20 token to withdraw from the contract\r\n     */\r\n    function adminWithdrawERC20(address ERC20token) external onlyOwner notOnSale {\r\n        uint256 withdrawAmount;\r\n        if (ERC20token != token) {\r\n            withdrawAmount = IERC20(ERC20token).balanceOf(address(this));\r\n        } else {\r\n            if (block.timestamp >= vestingStart.add(WITHDRAWAL_PERIOD)) {\r\n                withdrawAmount = IERC20(ERC20token).balanceOf(address(this));\r\n            } else {\r\n                withdrawAmount = IERC20(ERC20token).balanceOf(address(this)).sub(purchasedPrivateSale);\r\n            }\r\n        }\r\n\r\n        require(withdrawAmount > 0, \"No ERC20 to withdraw\");\r\n        IERC20(ERC20token).safeTransfer(treasury, withdrawAmount);\r\n    }\r\n\r\n    /**\r\n     * @notice Function for the administrator to withdraw ETH for refunds\r\n     * @notice Withdrawals allowed only if there is no sale pending stage\r\n     */\r\n    function adminWithdrawETH() external onlyOwner notOnSale {\r\n        require(address(this).balance > 0, \"No ETH to withdraw\");\r\n\r\n        (bool success,) = treasury.call{value : address(this).balance}(\"\");\r\n        require(success, \"Transfer failed\");\r\n    }\r\n\r\n    /***\r\n     * VESTING INTERFACE\r\n     ***/\r\n\r\n    /**\r\n     * @notice Transfers available for claim vested tokens to the user.\r\n     */\r\n    function claim() external notOnSale {\r\n        require(vestingStart != 0, \"Vesting start is not set\");\r\n        uint256 unclaimed = claimable(_msgSender());\r\n        require(unclaimed > 0, \"TokenVesting: no tokens are due\");\r\n\r\n        _claimed[_msgSender()] = _claimed[_msgSender()].add(unclaimed);\r\n        IERC20(token).safeTransfer(_msgSender(), unclaimed);\r\n        emit TokensClaimed(_msgSender(), unclaimed);\r\n    }\r\n\r\n    /**\r\n     * @notice Gets the amount of tokens the user has already claimed\r\n     * @param _user Address of the user who purchased tokens\r\n     * @return The amount of the token claimed.\r\n     */\r\n    function claimed(address _user) external view returns (uint256) {\r\n        return _claimed[_user];\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates the amount that has already vested but hasn't been claimed yet.\r\n     * @param _user Address of the user who purchased tokens\r\n     * @return The amount of the token vested and unclaimed.\r\n     */\r\n    function claimable(address _user) public view returns (uint256) {\r\n        return _vestedAmount(_user).sub(_claimed[_user]);\r\n    }\r\n\r\n    /**\r\n    * @notice Calculates the amount that is still locked.\r\n    * @param _user Address of the user who purchased tokens\r\n    * @return The amount of the token vested and unclaimed.\r\n    */\r\n    function locked(address _user) public view returns (uint256) {\r\n        return purchased[_user].sub(_vestedAmount(_user));\r\n    }\r\n\r\n    /**\r\n     * @dev Calculates the amount that has already vested.\r\n     * @param _user Address of the user who purchased tokens\r\n     * @return Amount of token already vested\r\n     */\r\n    function _vestedAmount(address _user) private view returns (uint256) {\r\n        if (vestingStart == 0 || block.timestamp < vestingStart) {\r\n            return 0;\r\n        } else if (block.timestamp >= vestingStart.add(vestingDuration)) {\r\n            return purchased[_user];\r\n        } else {\r\n            return purchased[_user].mul(block.timestamp.sub(vestingStart)).div(vestingDuration);\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Calculates Token amount based on rate and ETH amount.\r\n     * @param _amount ETH amount to convert to token\r\n     * @return Token amount\r\n     */\r\n    function calcEthPurchasedAmount(uint256 _amount) public view returns (uint256) {\r\n        if (address(priceFeed) != address(0)) {\r\n            uint decimals = priceFeed.decimals();\r\n            (,int256 price,,,) = priceFeed.latestRoundData();\r\n            return _amount.mul(uint256(price)).mul(PRECISION).div(tokenPrice).div(10 ** decimals);\r\n        } else {\r\n            return _amount.mul(basePrice).div(tokenPrice);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Calculates token amount based on amount of token.\r\n     * @param _coin Supported ERC20 token\r\n     * @param _amount Coin amount to convert to token\r\n     * @return purchasedAmount Token amount to buy\r\n     */\r\n    function calcCoinPurchasedAmount(address _coin, uint256 _amount) public view returns (uint256) {\r\n        uint256 amountInUsd = _amount.mul(1e18).div(10 ** (uint256(ERC20(_coin).decimals())));\r\n        return amountInUsd.mul(PRECISION).div(tokenPrice);\r\n    }\r\n\r\n    /***\r\n     * INTERNAL HELPERS\r\n     ***/\r\n\r\n\r\n    /**\r\n     * @dev Checks if private slae stage is on-going.\r\n     * @return True is private slae is active\r\n     */\r\n    function _isPrivateSale() virtual internal view returns (bool) {\r\n        return (block.timestamp >= privateSaleStart && block.timestamp < privateSaleEnd);\r\n    }\r\n}"
    },
    "contracts/staking/FeeDistributor.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.6.12;\r\npragma experimental ABIEncoderV2;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\r\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\r\n\r\ninterface IVotingEscrow {\r\n    struct Point {\r\n        int128 bias;\r\n        int128 slope;\r\n        uint256 ts;\r\n        uint256 blk;\r\n    }\r\n\r\n    function userPointEpoch(address addr) external view returns (uint256);\r\n\r\n    function epoch() external view returns (uint256);\r\n\r\n    function userPointHistory(address addr, uint256 loc) external view returns (Point memory point);\r\n\r\n    function pointHistory(uint256 loc) external view returns (Point memory point);\r\n\r\n    function checkpoint() external;\r\n}\r\n\r\n/**\r\n * Independent of votingescrow's reward contract\r\n * As a tool for distributing rewards!\r\n */\r\ncontract FeeDistributor is Ownable, ReentrancyGuard {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    uint256 public constant WEEK = 7 * 86400;\r\n    uint256 public constant TOKEN_CHECKPOINT_DEADLINE = 86400;\r\n\r\n\r\n    uint256 public startTime;\r\n    uint256 public timeCursor;\r\n    mapping(address => uint256) public timeCursorOf;\r\n    mapping(address => uint256) public userEpochOf;\r\n\r\n    uint256 public lastTokenTime;\r\n    uint256[1000000000000000] public tokensPerWeek;\r\n\r\n    address public votingEscrow;\r\n    address public token;\r\n    uint256 public tokenLastBalance;\r\n\r\n    // VE total supply at week bounds\r\n    uint256[1000000000000000] public veSupply;\r\n\r\n    bool public canCheckpointToken;\r\n    address public emergencyReturn;\r\n    bool public isKilled;\r\n\r\n    event ToggleAllowCheckpointToken(bool toggleFlag);\r\n    event CheckpointToken(uint256 time, uint256 tokens);\r\n    event Claimed(address indexed recipient, uint256 amount, uint256 claimEpoch, uint256 maxEpoch);\r\n\r\n    /***\r\n    * @notice Contract constructor\r\n    * @param _votingEscrow VotingEscrow contract address\r\n    * @param _startTime Epoch time for fee distribution to start\r\n    * @param _token Fee token address\r\n    * @param _emergencyReturn Address to transfer `_token` balance to,if this contract is killed\r\n    ***/\r\n    constructor(address _votingEscrow, uint256 _startTime, address _token, address _emergencyReturn) public {\r\n        uint256 t = _startTime / WEEK * WEEK;\r\n        startTime = t;\r\n        lastTokenTime = t;\r\n        timeCursor = t;\r\n        token = _token;\r\n        votingEscrow = _votingEscrow;\r\n        emergencyReturn = _emergencyReturn;\r\n    }\r\n\r\n    function max(int128 x, int128 y) internal pure returns (int128 z) {\r\n        z = x < y ? y : x;\r\n    }\r\n\r\n    function min(uint x, uint y) internal pure returns (uint z) {\r\n        z = x < y ? x : y;\r\n    }\r\n\r\n    function _checkpointToken() internal {\r\n        uint256 tokenBalance = IERC20(token).balanceOf(address(this));\r\n        uint256 toDistribute = tokenBalance.sub(tokenLastBalance);\r\n        tokenLastBalance = tokenBalance;\r\n\r\n        uint256 t = lastTokenTime;\r\n        uint256 sinceLast = block.timestamp.sub(t);\r\n        lastTokenTime = block.timestamp;\r\n        uint256 thisWeek = t / WEEK * WEEK;\r\n        uint256 nextWeek = 0;\r\n\r\n        for (uint i; i < 20; i++) {\r\n            nextWeek = thisWeek + WEEK;\r\n            if (block.timestamp < nextWeek) {\r\n                if (sinceLast == 0 && block.timestamp == t) {\r\n                    tokensPerWeek[thisWeek] = tokensPerWeek[thisWeek].add(toDistribute);\r\n                } else {\r\n                    tokensPerWeek[thisWeek] = tokensPerWeek[thisWeek].add(toDistribute.mul(block.timestamp.sub(t)).div(sinceLast));\r\n                }\r\n                break;\r\n            } else {\r\n                if (sinceLast == 0 && nextWeek == t) {\r\n                    tokensPerWeek[thisWeek] = tokensPerWeek[thisWeek].add(toDistribute);\r\n                } else {\r\n                    tokensPerWeek[thisWeek] = tokensPerWeek[thisWeek].add(toDistribute.mul(nextWeek.sub(t)).div(sinceLast));\r\n                }\r\n            }\r\n            t = nextWeek;\r\n            thisWeek = nextWeek;\r\n        }\r\n\r\n        emit CheckpointToken(block.timestamp, toDistribute);\r\n    }\r\n\r\n    /***\r\n    * @notice Update the token checkpoint\r\n    * @dev Calculates the total number of tokens to be distributed in a given week.\r\n    * During setup for the initial distribution this function is only callable\r\n    * by the contract owner. Beyond initial distro, it can be enabled for anyone\r\n    * to call.\r\n    ***/\r\n    function checkpointToken() external {\r\n        require(msg.sender == owner()\r\n            || (canCheckpointToken && (block.timestamp > lastTokenTime + TOKEN_CHECKPOINT_DEADLINE)), \"Wrong user!\");\r\n        _checkpointToken();\r\n    }\r\n\r\n    function _findTimestampEpoch(address ve, uint256 _timestamp) internal view returns (uint256) {\r\n        uint256 _min = 0;\r\n        uint256 _max = IVotingEscrow(ve).epoch();\r\n        for (uint i; i < 128; i++) {\r\n            if (_min >= _max) {\r\n                break;\r\n            }\r\n            uint256 _mid = (_min + _max + 2) / 2;\r\n            IVotingEscrow.Point memory pt = IVotingEscrow(ve).pointHistory(_mid);\r\n            if (pt.ts <= _timestamp) {\r\n                _min = _mid;\r\n            } else {\r\n                _max = _mid - 1;\r\n            }\r\n        }\r\n        return _min;\r\n    }\r\n\r\n    function _findTimestampUserEpoch(address ve, address user, uint256 _timestamp, uint256 maxUserEpoch) internal view returns (uint256) {\r\n        uint256 _min = 0;\r\n        uint256 _max = maxUserEpoch;\r\n        for (uint i; i < 128; i++) {\r\n            if (_min >= _max) {\r\n                break;\r\n            }\r\n            uint256 _mid = (_min + _max + 2) / 2;\r\n            IVotingEscrow.Point memory pt = IVotingEscrow(ve).userPointHistory(user, _mid);\r\n            if (pt.ts <= _timestamp) {\r\n                _min = _mid;\r\n            } else {\r\n                _max = _mid - 1;\r\n            }\r\n        }\r\n        return _min;\r\n    }\r\n\r\n    /***\r\n    * @notice Get the veCRV balance for `_user` at `_timestamp`\r\n    * @param _user Address to query balance for\r\n    * @param _timestamp Epoch time\r\n    * @return uint256 veCRV balance\r\n    ***/\r\n    function veForAt(address _user, uint256 _timestamp) external view returns (uint256) {\r\n        address ve = votingEscrow; // gas savings\r\n        uint256 maxUserEpoch = IVotingEscrow(ve).userPointEpoch(_user);\r\n        uint256 epoch = _findTimestampUserEpoch(ve, _user, _timestamp, maxUserEpoch);\r\n        IVotingEscrow.Point memory pt = IVotingEscrow(ve).userPointHistory(_user, epoch);\r\n        return uint256(max(pt.bias - pt.slope * int128(_timestamp - pt.ts), 0));\r\n    }\r\n\r\n    function _checkpointTotalSupply() internal {\r\n        address ve = votingEscrow;\r\n        uint256 t = timeCursor;\r\n        uint256 roundedTimestamp = block.timestamp / WEEK * WEEK;\r\n        IVotingEscrow(ve).checkpoint();\r\n\r\n        for (uint i; i < 20; i++) {\r\n            if (t > roundedTimestamp) {\r\n                break;\r\n            } else {\r\n                uint256 epoch = _findTimestampEpoch(ve, t);\r\n                IVotingEscrow.Point memory pt = IVotingEscrow(ve).pointHistory(epoch);\r\n                int128 dt = 0;\r\n                if (t > pt.ts) {\r\n                    dt = int128(t - pt.ts);\r\n                }\r\n                veSupply[t] = uint256(max(pt.bias - pt.slope * dt, 0));\r\n            }\r\n            t += WEEK;\r\n        }\r\n\r\n        timeCursor = t;\r\n    }\r\n\r\n    /***\r\n    * @notice Update the veCRV total supply checkpoint\r\n    * @dev The checkpoint is also updated by the first claimant each\r\n    *   new epoch week. This function may be called independently\r\n    *   of a claim, to reduce claiming gas costs.\r\n    ***/\r\n    function checkpointTotalSupply() external {\r\n        _checkpointTotalSupply();\r\n    }\r\n\r\n    function _claim(address addr, address ve, uint256 _lastTokenTime) internal returns (uint256) {\r\n        uint256 userEpoch = 0;\r\n        uint256 toDistribute = 0;\r\n\r\n        uint256 maxUserEpoch = IVotingEscrow(ve).userPointEpoch(addr);\r\n        uint256 _startTime = startTime; // gas savings\r\n\r\n        // No lock = no fees\r\n        if (maxUserEpoch == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 weekCursor = timeCursorOf[addr];\r\n        if (weekCursor == 0) {\r\n            userEpoch = _findTimestampUserEpoch(ve, addr, _startTime, maxUserEpoch);\r\n        } else {\r\n            userEpoch = userEpochOf[addr];\r\n        }\r\n\r\n        if (userEpoch == 0) {\r\n            userEpoch = 1;\r\n        }\r\n\r\n        IVotingEscrow.Point memory userPoint = IVotingEscrow(ve).userPointHistory(addr, userEpoch);\r\n\r\n        if (weekCursor == 0) {\r\n            weekCursor = (userPoint.ts + WEEK - 1) / WEEK * WEEK;\r\n        }\r\n\r\n        if (weekCursor >= _lastTokenTime) {\r\n            return 0;\r\n        }\r\n\r\n        if (weekCursor < _startTime) {\r\n            weekCursor = _startTime;\r\n        }\r\n        // empty\r\n        IVotingEscrow.Point memory oldUserPoint;\r\n\r\n\r\n        for (uint i; i < 50; i++) {\r\n            if (weekCursor >= _lastTokenTime) {\r\n                break;\r\n            }\r\n\r\n            if (weekCursor >= userPoint.ts && userEpoch <= maxUserEpoch) {\r\n                userEpoch += 1;\r\n                oldUserPoint = IVotingEscrow.Point({bias : userPoint.bias, slope : userPoint.slope, ts : userPoint.ts, blk : userPoint.blk});\r\n                if (userEpoch > maxUserEpoch) {\r\n                    userPoint = IVotingEscrow.Point({bias : 0, slope : 0, ts : 0, blk : 0});\r\n                } else {\r\n                    userPoint = IVotingEscrow(ve).userPointHistory(addr, userEpoch);\r\n                }\r\n            } else {\r\n                int128 dt = int128(weekCursor - oldUserPoint.ts);\r\n                uint256 balanceOf = uint256(max(oldUserPoint.bias - dt * oldUserPoint.slope, 0));\r\n                if (balanceOf == 0 && userEpoch > maxUserEpoch) {\r\n                    break;\r\n                }\r\n                if (balanceOf > 0) {\r\n                    toDistribute = toDistribute.add(balanceOf.mul(tokensPerWeek[weekCursor]).div(veSupply[weekCursor]));\r\n                }\r\n\r\n                weekCursor += WEEK;\r\n            }\r\n        }\r\n\r\n        userEpoch = min(maxUserEpoch, userEpoch - 1);\r\n        userEpochOf[addr] = userEpoch;\r\n        timeCursorOf[addr] = weekCursor;\r\n\r\n        emit Claimed(addr, toDistribute, userEpoch, maxUserEpoch);\r\n\r\n        return toDistribute;\r\n    }\r\n\r\n    /***\r\n    * @notice Claim fees for `_addr`\r\n    * @dev Each call to claim look at a maximum of 50 user veCRV points.\r\n    *    For accounts with many veCRV related actions, this function\r\n    *    may need to be called more than once to claim all available\r\n    *    fees. In the `Claimed` event that fires, if `claim_epoch` is\r\n    *    less than `max_epoch`, the account may claim again.\r\n    * @param _addr Address to claim fees for\r\n    * @return uint256 Amount of fees claimed in the call\r\n    ***/\r\n    function claim(address _addr) public nonReentrant returns (uint256) {\r\n        require(!isKilled, \"Killed\");\r\n\r\n        if (block.timestamp >= timeCursor) {\r\n            _checkpointTotalSupply();\r\n        }\r\n\r\n        uint256 _lastTokenTime = lastTokenTime;\r\n\r\n        if (canCheckpointToken && (block.timestamp > _lastTokenTime + TOKEN_CHECKPOINT_DEADLINE)) {\r\n            _checkpointToken();\r\n            _lastTokenTime = block.timestamp;\r\n        }\r\n\r\n        _lastTokenTime = _lastTokenTime / WEEK * WEEK;\r\n\r\n        uint256 amount = _claim(_addr, votingEscrow, _lastTokenTime);\r\n        if (amount != 0) {\r\n            IERC20(token).safeTransfer(_addr, amount);\r\n            tokenLastBalance = tokenLastBalance.sub(amount);\r\n        }\r\n\r\n        return amount;\r\n    }\r\n\r\n    function claim() external returns (uint256) {\r\n        return claim(msg.sender);\r\n    }\r\n\r\n    /***\r\n    * @notice Make multiple fee claims in a single call\r\n    * @dev Used to claim for many accounts at once, or to make\r\n    *   multiple claims for the same address when that address\r\n    *   has significant veCRV history\r\n    * @param _receivers List of addresses to claim for. Claiming\r\n    *   terminates at the first `ZERO_ADDRESS`.\r\n    * @return bool success\r\n    ***/\r\n    function claimMany(address[] memory _receivers) external nonReentrant returns (bool) {\r\n        require(!isKilled, \"Killed\");\r\n\r\n        if (block.timestamp >= timeCursor) {\r\n            _checkpointTotalSupply();\r\n        }\r\n\r\n        uint256 _lastTokenTime = lastTokenTime;\r\n\r\n        if (canCheckpointToken && (block.timestamp > _lastTokenTime + TOKEN_CHECKPOINT_DEADLINE)) {\r\n            _checkpointToken();\r\n            _lastTokenTime = block.timestamp;\r\n        }\r\n\r\n        _lastTokenTime = _lastTokenTime / WEEK * WEEK;\r\n        address ve = votingEscrow;\r\n        address _token = token;\r\n        uint256 total = 0;\r\n\r\n        for (uint i; i < _receivers.length; i++) {\r\n            address addr = _receivers[i];\r\n            if (addr == address(0)) {\r\n                break;\r\n            }\r\n            uint256 amount = _claim(addr, ve, _lastTokenTime);\r\n            if (amount != 0) {\r\n                require(IERC20(_token).transfer(addr, amount), \"Transfer failed!\");\r\n                total = total.add(amount);\r\n            }\r\n        }\r\n\r\n        if (total != 0) {\r\n            tokenLastBalance = tokenLastBalance.sub(total);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /***\r\n    * @notice Receive fee token into the contract and trigger a token checkpoint\r\n    * @param _coin Address of the coin being received (must be fee token),just for preventing misoperation\r\n    * @return bool success\r\n    ***/\r\n    function distribute(address _coin) external returns (bool) {\r\n        require(_coin == token, \"Wrong coin!\");\r\n        require(!isKilled, \"Killed\");\r\n\r\n        uint256 amount = IERC20(_coin).balanceOf(msg.sender);\r\n        if (amount != 0) {\r\n            IERC20(_coin).transferFrom(msg.sender, address(this), amount);\r\n            if (canCheckpointToken && (block.timestamp > lastTokenTime + TOKEN_CHECKPOINT_DEADLINE)) {\r\n                _checkpointToken();\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /***\r\n    * @notice Toggle permission for checkpointing by any account\r\n    ***/\r\n    function toggleAllowCheckpointToken() external onlyOwner {\r\n        bool flag = !canCheckpointToken;\r\n        canCheckpointToken = flag;\r\n        emit ToggleAllowCheckpointToken(flag);\r\n    }\r\n\r\n    /***\r\n    * @notice Kill the contract\r\n    * @dev Killing transfers the entire fee token balance to the emergency return address\r\n    *   and blocks the ability to claim or burn. The contract cannot be unkilled.\r\n    ***/\r\n    function killMe() external onlyOwner {\r\n        isKilled = true;\r\n        require(IERC20(token).transfer(emergencyReturn, IERC20(token).balanceOf(address(this))), \"Transfer failed!\");\r\n    }\r\n\r\n    /***\r\n    * @notice Recover ERC20 tokens from this contract\r\n    * @dev Tokens are sent to the emergency return address.\r\n    * @param _coin Token address\r\n    * @return bool success\r\n    ***/\r\n    function recoverBalance(address _coin) external onlyOwner returns (bool) {\r\n        require(_coin != token, \"Wrong coin!\");\r\n        IERC20(_coin).safeTransfer(emergencyReturn, IERC20(_coin).balanceOf(address(this)));\r\n        return true;\r\n    }\r\n}"
    },
    "contracts/interfaces/IEvmoSwapIFO.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.6.12;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n\r\n/** @title IEvmoSwapIFO.\r\n * @notice It is an interface for EvmoSwapIFO.sol\r\n */\r\ninterface IEvmoSwapIFO {\r\n    /**\r\n    * @notice It returns the offering token\r\n    */\r\n    function offeringToken() external view returns (IERC20);\r\n\r\n    /**\r\n     * @notice It allows users to deposit LP tokens to pool\r\n     * @param _amount: the number of LP token used (18 decimals)\r\n     * @param _pid: poolId\r\n     */\r\n    function depositPool(uint256 _amount, uint8 _pid) external;\r\n\r\n    /**\r\n     * @notice It allows users to harvest from pool\r\n     * @param _pid: poolId\r\n     */\r\n    function harvestPool(uint8 _pid) external;\r\n\r\n    /**\r\n     * @notice It allows the admin to withdraw funds\r\n     * @param _lpAmount: the number of LP token to withdraw (18 decimals)\r\n     * @param _offerAmount: the number of offering amount to withdraw\r\n     * @dev This function is only callable by admin.\r\n     */\r\n    function finalWithdraw(uint256[] memory _lpAmount, uint256 _offerAmount) external;\r\n\r\n    /**\r\n     * @notice It sets parameters for pool\r\n     * @param _offeringAmountPool: offering amount (in tokens)\r\n     * @param _raisingAmountPool: raising amount (in LP tokens)\r\n     * @param _limitPerUserInRaisingToken: limit per user (in LP tokens)\r\n     * @param _initialReleasePercentage: initial release percentage (if 10000, it is 100%)\r\n     * @param _vestingEndTime: vesting end time\r\n     * @param _hasTax: if the pool has a tax\r\n     * @param _pid: poolId\r\n     * @dev This function is only callable by admin.\r\n     */\r\n    function setPool(\r\n        address _raisingToken,\r\n        uint256 _offeringAmountPool,\r\n        uint256 _raisingAmountPool,\r\n        uint256 _limitPerUserInRaisingToken,\r\n        uint256 _initialReleasePercentage,\r\n        uint256 _burnPercentage,\r\n        uint256 _vestingEndTime,\r\n        bool _hasTax,\r\n        uint8 _pid\r\n    ) external;\r\n\r\n    /**\r\n     * @notice It updates campaignId for the IFO.\r\n     * @param _campaignId: the campaignId for the IFO\r\n     * @dev This function is only callable by admin.\r\n     */\r\n    function updateCampaignId(\r\n        uint256 _campaignId\r\n    ) external;\r\n\r\n    /**\r\n     * @notice It returns the pool information\r\n     * @param _pid: poolId\r\n     */\r\n    function viewPoolInformation(uint256 _pid)\r\n    external\r\n    view\r\n    returns (\r\n        IERC20,\r\n        uint256,\r\n        uint256,\r\n        uint256,\r\n        uint256,\r\n        uint256,\r\n        uint256,\r\n        bool,\r\n        uint256,\r\n        uint256\r\n    );\r\n\r\n    /**\r\n     * @notice It returns the tax overflow rate calculated for a pool\r\n     * @dev 100,000 means 0.1(10%)/ 1 means 0.000001(0.0001%)/ 1,000,000 means 1(100%)\r\n     * @param _pid: poolId\r\n     * @return It returns the tax percentage\r\n     */\r\n    function viewPoolTaxRateOverflow(uint256 _pid) external view returns (uint256);\r\n\r\n    /**\r\n     * @notice External view function to see user information\r\n     * @param _user: user address\r\n     * @param _pids[]: array of pids\r\n     */\r\n    function viewUserInfo(address _user, uint8[] calldata _pids)\r\n    external\r\n    view\r\n    returns (uint256[] memory, uint256[] memory, uint256[] memory, bool[] memory, bool[] memory);\r\n\r\n    /**\r\n     * @notice External view function to see user allocations for both pools\r\n     * @param _user: user address\r\n     * @param _pids[]: array of pids\r\n     */\r\n    function viewUserAllocationPools(address _user, uint8[] calldata _pids) external view returns (uint256[] memory);\r\n\r\n    /**\r\n     * @notice External view function to see user offering and refunding amounts for both pools\r\n     * @param _user: user address\r\n     * @param _pids: array of pids\r\n     */\r\n    function viewUserOfferingAndRefundingAmountsForPools(address _user, uint8[] calldata _pids)\r\n    external\r\n    view\r\n    returns (uint256[3][] memory);\r\n}\r\n"
    },
    "contracts/ifo/IFOInitializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.6.12;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\r\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\r\n\r\nimport \"../interfaces/IEvmoSwapIFO.sol\";\r\nimport \"../interfaces/IVotingEscrow.sol\";\r\n\r\n/**\r\n * @title IFOInitializable\r\n */\r\n\r\ncontract IFOInitializable is IEvmoSwapIFO, ReentrancyGuard, Ownable {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    // The offering token\r\n    IERC20 public override offeringToken;\r\n\r\n    // Max time interval (for sanity checks)\r\n    uint256 public MAX_BUFFER_TIME_INTERVAL;\r\n\r\n    // Number of pools\r\n    uint8 public constant NUMBER_POOLS = 2;\r\n\r\n    // MULTIPLIER\r\n    uint8 public constant VE_RATE = 10;\r\n\r\n    uint256 constant public PERCENTAGE_FACTOR = 10000;\r\n\r\n    // The address of the smart chef factory\r\n    address public immutable IFO_FACTORY;\r\n\r\n    // VotingEscrow contract\r\n    address public votingEscrowAddress;\r\n\r\n    // Whether it is initialized\r\n    bool public isInitialized;\r\n\r\n    // Allow claim\r\n    bool public allowClaim;\r\n\r\n    // The block timestamp when IFO starts\r\n    uint256 public startTime;\r\n\r\n    // The block timestamp when IFO ends\r\n    uint256 public endTime;\r\n\r\n    // The campaignId for the IFO\r\n    uint256 public campaignId;\r\n\r\n    // Total tokens distributed across the pools\r\n    uint256 public totalTokensOffered;\r\n\r\n    // Total amount of raising token withdrew\r\n    uint256[NUMBER_POOLS] public totalWithdrawRaisingAmount;\r\n\r\n    // The address burns raisingToken\r\n    address public burnAddress;\r\n\r\n    // The address receive remaining raisingToken after burning, like PostIFOLauncher\r\n    address public receiverAddress;\r\n\r\n    // Total amount of tax(raising token) withdrew\r\n    uint256[NUMBER_POOLS] public totalWithdrawTaxAmount;\r\n\r\n    // The address receive tax\r\n    address public taxCollector;\r\n\r\n    // Array of PoolCharacteristics of size NUMBER_POOLS\r\n    PoolCharacteristics[NUMBER_POOLS] private _poolInformation;\r\n\r\n    // It maps the address to pool id to UserInfo\r\n    mapping(address => mapping(uint8 => UserInfo)) private _userInfo;\r\n\r\n    // Struct that contains each pool characteristics\r\n    struct PoolCharacteristics {\r\n        IERC20 raisingToken; // The raising token\r\n        uint256 raisingAmountPool; // amount of tokens raised for the pool (in raising tokens)\r\n        uint256 offeringAmountPool; // amount of tokens offered for the pool (in offeringTokens)\r\n        uint256 limitPerUserInRaisingToken; // limit of tokens per user (if 0, it is ignored)\r\n        uint256 initialReleasePercentage; // percentage releases immediately when ifo ends(if 10000, it is 100%)\r\n        uint256 burnPercentage; // The percentag of raisingToken to burn,multiply by PERCENTAGE_FACTOR (100 means 0.01)\r\n        uint256 vestingEndTime; // block timestamp when 100% of tokens have been released\r\n        bool hasTax; // tax on the overflow (if any, it works with _calculateTaxOverflow)\r\n        uint256 totalAmountPool; // total amount pool deposited (in raising tokens)\r\n        uint256 sumTaxesOverflow; // total taxes collected (starts at 0, increases with each harvest if overflow)\r\n    }\r\n\r\n    // Struct that contains each user information for both pools\r\n    struct UserInfo {\r\n        uint256 amountPool; // How many tokens the user has provided for pool\r\n        uint256 offeringTokensClaimed; // How many tokens has been claimed by user\r\n        uint256 lastTimeHarvested; // The time when user claimed recently\r\n        bool hasHarvestedInitial; // If initial is claimed\r\n        bool refunded; // If the user is refunded\r\n    }\r\n\r\n    // Admin withdraw events\r\n    event AdminWithdraw(uint256[] amountRaisingTokens, uint256 amountOfferingToken);\r\n\r\n    // Admin recovers token\r\n    event AdminTokenRecovery(address tokenAddress, uint256 amountTokens);\r\n\r\n    // Deposit event\r\n    event Deposit(address indexed user, uint8 indexed pid, uint256 amount);\r\n\r\n    // Harvest event\r\n    event Harvest(address indexed user, uint8 indexed pid, uint256 offeringAmount, uint256 excessAmount);\r\n\r\n    // Event for new start & end timestamp\r\n    event NewStartAndEndTimes(uint256 startTime, uint256 endTime);\r\n\r\n    // Event with campaignId for IFO\r\n    event CampaignIdSet(uint256 campaignId);\r\n\r\n    // Event when parameters are set for one of the pools\r\n    event PoolParametersSet(uint8 pid, uint256 offeringAmountPool, uint256 raisingAmountPool);\r\n\r\n    // Modifier to prevent contracts to participate\r\n    modifier notContract() {\r\n        require(!_isContract(msg.sender), \"contract not allowed\");\r\n        require(msg.sender == tx.origin, \"proxy contract not allowed\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @notice Constructor\r\n     */\r\n    constructor() public {\r\n        IFO_FACTORY = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @notice It initializes the contract\r\n     * @dev It can only be called once.\r\n     * @param _offeringToken: the token that is offered for the IFO\r\n     * @param _startTime: the start timestamp for the IFO\r\n     * @param _endTime: the end timestamp for the IFO\r\n     * @param _adminAddress: the admin address for handling tokens\r\n     * @param _votingEscrowAddress: the address of the VotingEscrow\r\n     */\r\n    function initialize(\r\n        address _offeringToken,\r\n        uint256 _startTime,\r\n        uint256 _endTime,\r\n        uint256 _maxBufferTimeInterval,\r\n        address _adminAddress,\r\n        address _votingEscrowAddress,\r\n        address _burnAddress,\r\n        address _receiverAddress\r\n    ) public {\r\n        require(!isInitialized, \"Operations: Already initialized\");\r\n        require(msg.sender == IFO_FACTORY, \"Operations: Not factory\");\r\n        require(_receiverAddress != address(0), \"Operations: Zero address\");\r\n\r\n        // Make this contract initialized\r\n        isInitialized = true;\r\n\r\n        // init not allow claim\r\n        allowClaim = false; \r\n\r\n        offeringToken = IERC20(_offeringToken);\r\n        votingEscrowAddress = _votingEscrowAddress;\r\n        startTime = _startTime;\r\n        endTime = _endTime;\r\n        MAX_BUFFER_TIME_INTERVAL = _maxBufferTimeInterval;\r\n\r\n        burnAddress = _burnAddress;\r\n        receiverAddress = _receiverAddress;\r\n\r\n        // Transfer ownership to admin\r\n        transferOwnership(_adminAddress);\r\n    }\r\n\r\n    /**\r\n     * @notice It allows users to deposit raising tokens to pool\r\n     * @param _amount: the number of raising token used (18 decimals)\r\n     * @param _pid: pool id\r\n     */\r\n    function depositPool(uint256 _amount, uint8 _pid) external override nonReentrant notContract {\r\n        // Checks whether the pool id is valid\r\n        require(_pid < NUMBER_POOLS, \"Deposit: Non valid pool id\");\r\n\r\n        // Checks that pool was set\r\n        require(\r\n            _poolInformation[_pid].offeringAmountPool > 0 && _poolInformation[_pid].raisingAmountPool > 0,\r\n            \"Deposit: Pool not set\"\r\n        );\r\n\r\n        // Checks whether the block timestamp is not too early\r\n        require(block.timestamp > startTime, \"Deposit: Too early\");\r\n\r\n        // Checks whether the block timestamp is not too late\r\n        require(block.timestamp < endTime, \"Deposit: Too late\");\r\n\r\n        // Checks that the amount deposited is not inferior to 0\r\n        require(_amount > 0, \"Deposit: Amount must be > 0\");\r\n\r\n        // Verify tokens were deposited properly\r\n        require(offeringToken.balanceOf(address(this)) >= totalTokensOffered, \"Deposit: Tokens not deposited properly\");\r\n\r\n        // amount of veEmo from votingEscrow, only for base sale\r\n        if (votingEscrowAddress != address(0) && _pid == 0) {\r\n            uint256 veDecimal = IVotingEscrow(votingEscrowAddress).decimals();\r\n            uint256 raisingDecimal = IVotingEscrow(address(_poolInformation[_pid].raisingToken)).decimals();\r\n            require(veDecimal >= raisingDecimal, \"Wrong decimal\");\r\n\r\n            uint256 ifoCredit = IVotingEscrow(votingEscrowAddress).balanceOfT(msg.sender, startTime) * VE_RATE;\r\n            require(_userInfo[msg.sender][_pid].amountPool.add(_amount).mul(10 ** (veDecimal - raisingDecimal)) <= ifoCredit, \"Not enough veEmo\");\r\n        }\r\n\r\n        // Transfers funds to this contract\r\n        _poolInformation[_pid].raisingToken.safeTransferFrom(address(msg.sender), address(this), _amount);\r\n\r\n        // Update the user status\r\n        _userInfo[msg.sender][_pid].amountPool = _userInfo[msg.sender][_pid].amountPool.add(_amount);\r\n\r\n        // Check if the pool has a limit per user\r\n        if (_poolInformation[_pid].limitPerUserInRaisingToken > 0) {\r\n            // Checks whether the limit has been reached\r\n            require(\r\n                _userInfo[msg.sender][_pid].amountPool <= _poolInformation[_pid].limitPerUserInRaisingToken,\r\n                \"Deposit: New amount above user limit\"\r\n            );\r\n        }\r\n\r\n        // Updates the totalAmount for pool\r\n        _poolInformation[_pid].totalAmountPool = _poolInformation[_pid].totalAmountPool.add(_amount);\r\n\r\n        emit Deposit(msg.sender, _pid, _amount);\r\n    }\r\n\r\n    /**\r\n     * @notice It allows users to harvest from pool\r\n     * @param _pid: pool id\r\n     */\r\n    function harvestPool(uint8 _pid) external override nonReentrant notContract {\r\n        // Checks whether it is allow to harvest\r\n        require(allowClaim, \"Harvest: not allow claim\");\r\n\r\n        // Checks whether pool id is valid\r\n        require(_pid < NUMBER_POOLS, \"Harvest: Non valid pool id\");\r\n\r\n        UserInfo storage currentUserInfo = _userInfo[msg.sender][_pid];\r\n\r\n        // Checks whether the user has participated\r\n        require(currentUserInfo.amountPool > 0, \"Harvest: Did not participate\");\r\n\r\n        // Checks whether the user has already harvested in the same block\r\n        require(currentUserInfo.lastTimeHarvested < block.timestamp, \"Harvest: Already harvest in the same block\");\r\n\r\n        // Initialize the variables for offering, refunding user amounts, and tax amount\r\n        (\r\n        uint256 raisingTokenRefund,\r\n        uint256 userTaxOverflow,\r\n        uint256 offeringTokenTotalHarvest,,,\r\n        ) = userTokenStatus(msg.sender, _pid);\r\n\r\n        // Updates the harvest time\r\n        currentUserInfo.lastTimeHarvested = block.timestamp;\r\n        currentUserInfo.hasHarvestedInitial = true;\r\n\r\n        // Settle refund\r\n        if (!currentUserInfo.refunded) {\r\n            currentUserInfo.refunded = true;\r\n            if (raisingTokenRefund > 0) {\r\n                _poolInformation[_pid].raisingToken.safeTransfer(msg.sender, raisingTokenRefund);\r\n            }\r\n            // Increment the sumTaxesOverflow\r\n            if (userTaxOverflow > 0) {\r\n                _poolInformation[_pid].sumTaxesOverflow = _poolInformation[_pid].sumTaxesOverflow.add(userTaxOverflow);\r\n            }\r\n        }\r\n\r\n        // Final check to verify the user has not gotten more tokens that originally allocated\r\n        (uint256 offeringTokenAmount,,) = _calculateOfferingAndRefundingAmountsPool(msg.sender, _pid);\r\n        uint256 offeringAllocationLeft = offeringTokenAmount - currentUserInfo.offeringTokensClaimed;\r\n        uint256 allocatedTokens = offeringAllocationLeft >= offeringTokenTotalHarvest ? offeringTokenTotalHarvest : offeringAllocationLeft;\r\n        if (allocatedTokens > 0) {\r\n            currentUserInfo.offeringTokensClaimed += allocatedTokens;\r\n            offeringToken.safeTransfer(msg.sender, allocatedTokens);\r\n        }\r\n\r\n        emit Harvest(msg.sender, _pid, allocatedTokens, raisingTokenRefund);\r\n    }\r\n\r\n    /**\r\n     * @notice It allows the admin to withdraw funds\r\n     * @param _raisingAmounts: the number array of raising token to withdraw\r\n     * @param _offeringAmount: the number of offering amount to withdraw\r\n     * @dev This function is only callable by admin.\r\n     */\r\n    function finalWithdraw(uint256[] memory _raisingAmounts, uint256 _offeringAmount) external override onlyOwner {\r\n        require(_raisingAmounts.length == NUMBER_POOLS, \"Operations: Wrong length\");\r\n      \r\n        for (uint i; i < NUMBER_POOLS; i++) {\r\n            if(_raisingAmounts[i] > 0) {\r\n                PoolCharacteristics memory poolInfo = _poolInformation[i];\r\n                require(_raisingAmounts[i] <= poolInfo.raisingToken.balanceOf(address(this)), \"Operations: Not enough raising tokens\");\r\n\r\n                totalWithdrawRaisingAmount[i] = totalWithdrawRaisingAmount[i].add(_raisingAmounts[i]);\r\n                require(totalWithdrawRaisingAmount[i] <= poolInfo.raisingAmountPool, \"Operations: Maximum allowance exceeds\");\r\n\r\n                uint burnAmount = 0;\r\n                if (poolInfo.burnPercentage != 0) {\r\n                    burnAmount = _raisingAmounts[i].mul(poolInfo.burnPercentage).div(PERCENTAGE_FACTOR);\r\n                    poolInfo.raisingToken.safeTransfer(burnAddress, burnAmount);\r\n                }\r\n                poolInfo.raisingToken.safeTransfer(receiverAddress, _raisingAmounts[i].sub(burnAmount));\r\n            }\r\n        }\r\n\r\n        if (_offeringAmount > 0) {\r\n            require(_offeringAmount <= offeringToken.balanceOf(address(this)), \"Operations: Not enough offering tokens\");\r\n            offeringToken.safeTransfer(address(msg.sender), _offeringAmount);\r\n        }\r\n\r\n        emit AdminWithdraw(_raisingAmounts, _offeringAmount);\r\n    }\r\n\r\n    /**\r\n     * @notice It allows the admin or collector to withdraw tax\r\n     * @dev This function is only callable by admin or collector.\r\n     */\r\n    function taxWithdraw() external {\r\n        require(taxCollector != address(0), \"Operations: Wrong tax collector\");\r\n        require(owner() == msg.sender || taxCollector == msg.sender, \"Operations: Permission denied\");\r\n\r\n        for (uint i; i < NUMBER_POOLS; i++) {\r\n            uint256 sumTaxesOverflow = _poolInformation[i].sumTaxesOverflow;\r\n            _poolInformation[i].raisingToken.safeTransfer(taxCollector, sumTaxesOverflow.sub(totalWithdrawTaxAmount[i]));\r\n            totalWithdrawTaxAmount[i] = sumTaxesOverflow;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice It allows the admin to recover wrong tokens sent to the contract\r\n     * @param _tokenAddress: the address of the token to withdraw (18 decimals)\r\n     * @param _tokenAmount: the number of token amount to withdraw\r\n     * @dev This function is only callable by admin.\r\n     */\r\n    function recoverWrongTokens(address _tokenAddress, uint256 _tokenAmount) external onlyOwner {\r\n        require(_tokenAddress != address(offeringToken), \"Recover: Cannot be offering token\");\r\n        for (uint i; i < NUMBER_POOLS; i++) {\r\n            require(_tokenAddress != address(_poolInformation[i].raisingToken), \"Recover: Cannot be raising token\");\r\n        }\r\n\r\n        IERC20(_tokenAddress).safeTransfer(address(msg.sender), _tokenAmount);\r\n\r\n        emit AdminTokenRecovery(_tokenAddress, _tokenAmount);\r\n    }\r\n\r\n    /**\r\n     * @notice It sets parameters for pool\r\n     * @param _raisingToken: the raising token used\r\n     * @param _offeringAmountPool: offering amount (in tokens)\r\n     * @param _raisingAmountPool: raising amount (in raising tokens)\r\n     * @param _limitPerUserInRaisingToken: limit per user (in raising tokens)\r\n     * @param _initialReleasePercentage: initial release percentage (if 10000, it is 100%)\r\n     * @param _vestingEndTime: vesting end time\r\n     * @param _hasTax: if the pool has a tax\r\n     * @param _pid: pool id\r\n     * @dev This function is only callable by admin.\r\n     */\r\n    function setPool(\r\n        address _raisingToken,\r\n        uint256 _offeringAmountPool,\r\n        uint256 _raisingAmountPool,\r\n        uint256 _limitPerUserInRaisingToken,\r\n        uint256 _initialReleasePercentage,\r\n        uint256 _burnPercentage,\r\n        uint256 _vestingEndTime,\r\n        bool _hasTax,\r\n        uint8 _pid\r\n    ) external override onlyOwner {\r\n        require(IERC20(_raisingToken).totalSupply() >= 0);\r\n        require(_raisingToken != address(offeringToken), \"Operations: Tokens must be be different\");\r\n        require(block.timestamp < startTime, \"Operations: IFO has started\");\r\n        require(_initialReleasePercentage <= PERCENTAGE_FACTOR, \"Operations: Wrong initial percentage\");\r\n        require(_burnPercentage <= PERCENTAGE_FACTOR, \"Operations: Wrong percentage\");\r\n        require(_vestingEndTime >= endTime, \"Operations: Vesting ends too early\");\r\n        require(_pid < NUMBER_POOLS, \"Operations: Pool does not exist\");\r\n\r\n        if (_vestingEndTime == endTime) {\r\n            require(_initialReleasePercentage == PERCENTAGE_FACTOR, \"Operations:Initial percentage should be equal to PERCENTAGE_FACTOR\");\r\n        }\r\n\r\n        _poolInformation[_pid].raisingToken = IERC20(_raisingToken);\r\n        _poolInformation[_pid].offeringAmountPool = _offeringAmountPool;\r\n        _poolInformation[_pid].raisingAmountPool = _raisingAmountPool;\r\n        _poolInformation[_pid].limitPerUserInRaisingToken = _limitPerUserInRaisingToken;\r\n        _poolInformation[_pid].initialReleasePercentage = _initialReleasePercentage;\r\n        _poolInformation[_pid].burnPercentage = _burnPercentage;\r\n        _poolInformation[_pid].vestingEndTime = _vestingEndTime;\r\n        _poolInformation[_pid].hasTax = _hasTax;\r\n\r\n        uint256 tokensDistributedAcrossPools;\r\n\r\n        for (uint8 i = 0; i < NUMBER_POOLS; i++) {\r\n            tokensDistributedAcrossPools = tokensDistributedAcrossPools.add(_poolInformation[i].offeringAmountPool);\r\n        }\r\n\r\n        // Update totalTokensOffered\r\n        totalTokensOffered = tokensDistributedAcrossPools;\r\n\r\n        emit PoolParametersSet(_pid, _offeringAmountPool, _raisingAmountPool);\r\n    }\r\n\r\n    /**\r\n     * @notice It updates campaignId for the IFO.\r\n     * @param _campaignId: the campaignId for the IFO\r\n     * @dev This function is only callable by admin.\r\n     */\r\n    function updateCampaignId(uint256 _campaignId) external override onlyOwner {\r\n        require(block.timestamp < endTime, \"Operations: IFO has ended\");\r\n        campaignId = _campaignId;\r\n\r\n        emit CampaignIdSet(campaignId);\r\n    }\r\n\r\n    /**\r\n     * @notice It allows the admin to update start and end timestamp\r\n     * @param _startTime: the new start timestamp\r\n     * @param _endTime: the new end timestamp\r\n     * @dev This function is only callable by admin.\r\n     */\r\n    function updateStartAndEndTimes(uint256 _startTime, uint256 _endTime) external onlyOwner {\r\n        require(_endTime < (block.timestamp + MAX_BUFFER_TIME_INTERVAL), \"Operations: EndTime too far\");\r\n        require(block.timestamp < startTime, \"Operations: IFO has started\");\r\n        require(_startTime < _endTime, \"Operations: New startTime must be less than new endTime\");\r\n        require(block.timestamp < _startTime, \"Operations: New startTime must be greater than current timestamp\");\r\n\r\n        startTime = _startTime;\r\n        endTime = _endTime;\r\n\r\n        emit NewStartAndEndTimes(_startTime, _endTime);\r\n    }\r\n\r\n    /**\r\n    * @notice It allows the admin to set\r\n    * @param _allow: claim status\r\n    * @dev This function is only callable by admin.\r\n    */\r\n    function setAllowClaim(bool _allow) external onlyOwner {\r\n        allowClaim = _allow;\r\n    }\r\n\r\n    /**\r\n    * @notice It allows the admin to update tax collector\r\n    * @param _taxCollector: the new tax collector\r\n    * @dev This function is only callable by admin.\r\n    */\r\n    function setTaxCollector(address _taxCollector) external onlyOwner {\r\n        taxCollector = _taxCollector;\r\n    }\r\n\r\n    /**\r\n     * @notice It returns the pool information\r\n     * @param _pid: poolId\r\n     * @return raisingAmountPool: amount of raising tokens raised (in raising tokens)\r\n     * @return offeringAmountPool: amount of tokens offered for the pool (in offeringTokens)\r\n     * @return limitPerUserInRaisingToken: limit of tokens per user (if 0, it is ignored)\r\n     * @return hasTax: tax on the overflow (if any, it works with _calculateTaxOverflow)\r\n     * @return totalAmountPool: total amount pool deposited (in raising tokens)\r\n     * @return sumTaxesOverflow: total taxes collected (starts at 0, increases with each harvest if overflow)\r\n     */\r\n    function viewPoolInformation(uint256 _pid)\r\n    external\r\n    view\r\n    override\r\n    returns (\r\n        IERC20,\r\n        uint256,\r\n        uint256,\r\n        uint256,\r\n        uint256,\r\n        uint256,\r\n        uint256,\r\n        bool,\r\n        uint256,\r\n        uint256\r\n    )\r\n    {\r\n        PoolCharacteristics memory poolInfo = _poolInformation[_pid];\r\n        return (\r\n        poolInfo.raisingToken,\r\n        poolInfo.raisingAmountPool,\r\n        poolInfo.offeringAmountPool,\r\n        poolInfo.limitPerUserInRaisingToken,\r\n        poolInfo.initialReleasePercentage,\r\n        poolInfo.burnPercentage,\r\n        poolInfo.vestingEndTime,\r\n        poolInfo.hasTax,\r\n        poolInfo.totalAmountPool,\r\n        poolInfo.sumTaxesOverflow\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice It returns the tax overflow rate calculated for a pool\r\n     * @dev 100,000,000,000 means 0.1 (10%) / 1 means 0.0000000000001 (0.0000001%) / 1,000,000,000,000 means 1 (100%)\r\n     * @param _pid: poolId\r\n     * @return It returns the tax percentage\r\n     */\r\n    function viewPoolTaxRateOverflow(uint256 _pid) external view override returns (uint256) {\r\n        if (!_poolInformation[_pid].hasTax) {\r\n            return 0;\r\n        } else {\r\n            return\r\n            _calculateTaxOverflow(_poolInformation[_pid].totalAmountPool, _poolInformation[_pid].raisingAmountPool);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice External view function to see user allocations for both pools\r\n     * @param _user: user address\r\n     * @param _pids[]: array of pids\r\n     * @return\r\n     */\r\n    function viewUserAllocationPools(address _user, uint8[] calldata _pids)\r\n    external\r\n    view\r\n    override\r\n    returns (uint256[] memory)\r\n    {\r\n        uint256[] memory allocationPools = new uint256[](_pids.length);\r\n        for (uint8 i = 0; i < _pids.length; i++) {\r\n            allocationPools[i] = _getUserAllocationPool(_user, _pids[i]);\r\n        }\r\n        return allocationPools;\r\n    }\r\n\r\n    /**\r\n     * @notice External view function to see user information\r\n     * @param _user: user address\r\n     * @param _pids[]: array of pids\r\n     */\r\n    function viewUserInfo(address _user, uint8[] calldata _pids)\r\n    external\r\n    view\r\n    override\r\n    returns (uint256[] memory, uint256[] memory, uint256[] memory, bool[] memory, bool[] memory)\r\n    {\r\n        uint256[] memory amountPools = new uint256[](_pids.length);\r\n        uint256[] memory offeringTokensClaimedPools = new uint256[](_pids.length);\r\n        uint256[] memory lastTimeHarvestedPools = new uint256[](_pids.length);\r\n        bool[] memory hasHarvestedInitialPools = new bool[](_pids.length);\r\n        bool[] memory refundedPools = new bool[](_pids.length);\r\n\r\n        for (uint8 i = 0; i < NUMBER_POOLS; i++) {\r\n            amountPools[i] = _userInfo[_user][i].amountPool;\r\n            offeringTokensClaimedPools[i] = _userInfo[_user][i].offeringTokensClaimed;\r\n            lastTimeHarvestedPools[i] = _userInfo[_user][i].lastTimeHarvested;\r\n            hasHarvestedInitialPools[i] = _userInfo[_user][i].hasHarvestedInitial;\r\n            refundedPools[i] = _userInfo[_user][i].refunded;\r\n        }\r\n        return (amountPools, offeringTokensClaimedPools, lastTimeHarvestedPools, hasHarvestedInitialPools, refundedPools);\r\n    }\r\n\r\n    /**\r\n     * @notice External view function to see user offering and refunding amounts for both pools\r\n     * @param _user: user address\r\n     * @param _pids: array of pids\r\n     */\r\n    function viewUserOfferingAndRefundingAmountsForPools(address _user, uint8[] calldata _pids)\r\n    external\r\n    view\r\n    override\r\n    returns (uint256[3][] memory)\r\n    {\r\n        uint256[3][] memory amountPools = new uint256[3][](_pids.length);\r\n\r\n        for (uint8 i = 0; i < _pids.length; i++) {\r\n            uint256 userOfferingAmountPool;\r\n            uint256 userRefundingAmountPool;\r\n            uint256 userTaxAmountPool;\r\n\r\n            if (_poolInformation[_pids[i]].raisingAmountPool > 0) {\r\n                (\r\n                userOfferingAmountPool,\r\n                userRefundingAmountPool,\r\n                userTaxAmountPool\r\n                ) = _calculateOfferingAndRefundingAmountsPool(_user, _pids[i]);\r\n            }\r\n\r\n            amountPools[i] = [userOfferingAmountPool, userRefundingAmountPool, userTaxAmountPool];\r\n        }\r\n        return amountPools;\r\n    }\r\n\r\n    /**\r\n    * @notice Get the amount of tokens a user is eligible to receive based on current state.\r\n    * @param _user: address of user to obtain token status\r\n    * @param _pid: pool id to obtain token status\r\n    * raisingTokenRefund:Amount of raising tokens available to refund\r\n    * userTaxOverflow: Amount of tax\r\n    * offeringTokenTotalHarvest: Total amount of offering tokens that can be harvested (initial + vested)\r\n    * offeringTokenInitialHarvest: Amount of initial harvest offering tokens that can be collected\r\n    * offeringTokenVestedHarvest: Amount offering tokens that can be harvested from the vesting portion of tokens\r\n    * offeringTokensVesting: Amount of offering tokens that are still vested\r\n    */\r\n    function userTokenStatus(address _user, uint8 _pid) public view returns (\r\n        uint256 raisingTokenRefund,\r\n        uint256 userTaxOverflow,\r\n        uint256 offeringTokenTotalHarvest,\r\n        uint256 offeringTokenInitialHarvest,\r\n        uint256 offeringTokenVestedHarvest,\r\n        uint256 offeringTokensVesting\r\n    ){\r\n        uint256 currentTime = block.timestamp;\r\n        if (currentTime < endTime) {\r\n            return (0, 0, 0, 0, 0, 0);\r\n        }\r\n\r\n        UserInfo memory currentUserInfo = _userInfo[_user][_pid];\r\n        PoolCharacteristics memory currentPoolInfo = _poolInformation[_pid];\r\n\r\n        // Initialize the variables for offering, refunding user amounts\r\n        (uint256 offeringTokenAmount, uint256 refundingTokenAmount, uint256 taxAmount) = _calculateOfferingAndRefundingAmountsPool(_user, _pid);\r\n        uint256 offeringTokenInitialAmount = offeringTokenAmount * currentPoolInfo.initialReleasePercentage / PERCENTAGE_FACTOR;\r\n        uint256 offeringTokenVestedAmount = offeringTokenAmount - offeringTokenInitialAmount;\r\n\r\n        // Setup refund amount\r\n        raisingTokenRefund = 0;\r\n        userTaxOverflow = 0;\r\n        if (!currentUserInfo.refunded) {\r\n            raisingTokenRefund = refundingTokenAmount;\r\n            userTaxOverflow = taxAmount;\r\n        }\r\n\r\n        // Setup initial harvest amount\r\n        offeringTokenInitialHarvest = 0;\r\n        if (!currentUserInfo.hasHarvestedInitial) {\r\n            offeringTokenInitialHarvest = offeringTokenInitialAmount;\r\n        }\r\n\r\n        // Setup harvestable vested token amount\r\n        offeringTokenVestedHarvest = 0;\r\n        offeringTokensVesting = 0;\r\n        // exclude initial\r\n        uint256 offeringTokenUnclaimed = offeringTokenAmount.sub(offeringTokenInitialHarvest).sub(currentUserInfo.offeringTokensClaimed);\r\n        if (currentTime >= currentPoolInfo.vestingEndTime) {\r\n            offeringTokenVestedHarvest = offeringTokenUnclaimed;\r\n        } else {\r\n            uint256 unlockEndTime = currentTime;\r\n            // endTime is the earliest time to harvest\r\n            uint256 lastHarvestTime = currentUserInfo.lastTimeHarvested < endTime ? endTime : currentUserInfo.lastTimeHarvested;\r\n            if (unlockEndTime > lastHarvestTime) {\r\n                uint256 totalVestingTime = currentPoolInfo.vestingEndTime - endTime;\r\n                uint256 unlockTime = unlockEndTime - lastHarvestTime;\r\n                offeringTokenVestedHarvest = (offeringTokenVestedAmount * unlockTime) / totalVestingTime;\r\n            }\r\n            offeringTokensVesting = offeringTokenUnclaimed.sub(offeringTokenVestedHarvest);\r\n        }\r\n        offeringTokenTotalHarvest = offeringTokenInitialHarvest + offeringTokenVestedHarvest;\r\n    }\r\n\r\n    /**\r\n     * @notice It calculates the tax overflow given the raisingAmountPool and the totalAmountPool.\r\n     * @dev 100,000,000,000 means 0.1 (10%) / 1 means 0.0000000000001 (0.0000001%) / 1,000,000,000,000 means 1 (100%)\r\n     * @return It returns the tax percentage\r\n     */\r\n    function _calculateTaxOverflow(uint256 _totalAmountPool, uint256 _raisingAmountPool)\r\n    internal\r\n    pure\r\n    returns (uint256)\r\n    {\r\n        uint256 ratioOverflow = _totalAmountPool.div(_raisingAmountPool);\r\n\r\n        if (ratioOverflow >= 1500) {\r\n            return 500000000;\r\n            // 0.05%\r\n        } else if (ratioOverflow >= 1000) {\r\n            return 1000000000;\r\n            // 0.1%\r\n        } else if (ratioOverflow >= 500) {\r\n            return 2000000000;\r\n            // 0.2%\r\n        } else if (ratioOverflow >= 250) {\r\n            return 2500000000;\r\n            // 0.25%\r\n        } else if (ratioOverflow >= 100) {\r\n            return 3000000000;\r\n            // 0.3%\r\n        } else if (ratioOverflow >= 50) {\r\n            return 5000000000;\r\n            // 0.5%\r\n        } else {\r\n            return 10000000000;\r\n            // 1%\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice It calculates the offering amount for a user and the number of raising tokens to transfer back.\r\n     * @param _user: user address\r\n     * @param _pid: pool id\r\n     * @return {uint256, uint256, uint256} It returns the offering amount, the refunding amount (in raising tokens),\r\n     * and the tax (if any, else 0)\r\n     */\r\n    function _calculateOfferingAndRefundingAmountsPool(address _user, uint8 _pid)\r\n    internal\r\n    view\r\n    returns (\r\n        uint256,\r\n        uint256,\r\n        uint256\r\n    )\r\n    {\r\n        uint256 userOfferingAmount;\r\n        uint256 userRefundingAmount;\r\n        uint256 taxAmount;\r\n\r\n        if (_poolInformation[_pid].totalAmountPool > _poolInformation[_pid].raisingAmountPool) {\r\n            // Calculate allocation for the user\r\n            uint256 allocation = _getUserAllocationPool(_user, _pid);\r\n\r\n            // Calculate the offering amount for the user based on the offeringAmount for the pool\r\n            userOfferingAmount = _poolInformation[_pid].offeringAmountPool.mul(allocation).div(1e12);\r\n\r\n            // Calculate the payAmount\r\n            uint256 payAmount = _poolInformation[_pid].raisingAmountPool.mul(allocation).div(1e12);\r\n\r\n            // Calculate the pre-tax refunding amount\r\n            userRefundingAmount = _userInfo[_user][_pid].amountPool.sub(payAmount);\r\n\r\n            // Retrieve the tax rate\r\n            if (_poolInformation[_pid].hasTax) {\r\n                uint256 taxOverflow = _calculateTaxOverflow(\r\n                    _poolInformation[_pid].totalAmountPool,\r\n                    _poolInformation[_pid].raisingAmountPool\r\n                );\r\n\r\n                // Calculate the final taxAmount\r\n                taxAmount = userRefundingAmount.mul(taxOverflow).div(1e12);\r\n\r\n                // Adjust the refunding amount\r\n                userRefundingAmount = userRefundingAmount.sub(taxAmount);\r\n            }\r\n        } else {\r\n            userRefundingAmount = 0;\r\n            taxAmount = 0;\r\n            // _userInfo[_user] / (raisingAmount / offeringAmount)\r\n            userOfferingAmount = _userInfo[_user][_pid].amountPool.mul(_poolInformation[_pid].offeringAmountPool).div(\r\n                _poolInformation[_pid].raisingAmountPool\r\n            );\r\n        }\r\n        return (userOfferingAmount, userRefundingAmount, taxAmount);\r\n    }\r\n\r\n    /**\r\n     * @notice It returns the user allocation for pool\r\n     * @dev 100,000,000,000 means 0.1 (10%) / 1 means 0.0000000000001 (0.0000001%) / 1,000,000,000,000 means 1 (100%)\r\n     * @param _user: user address\r\n     * @param _pid: pool id\r\n     * @return it returns the user's share of pool\r\n     */\r\n    function _getUserAllocationPool(address _user, uint8 _pid) internal view returns (uint256) {\r\n        if (_poolInformation[_pid].totalAmountPool > 0) {\r\n            return _userInfo[_user][_pid].amountPool.mul(1e18).div(_poolInformation[_pid].totalAmountPool.mul(1e6));\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Check if an address is a contract\r\n     */\r\n    function _isContract(address _addr) internal view returns (bool) {\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(_addr)\r\n        }\r\n        return size > 0;\r\n    }\r\n}\r\n"
    },
    "contracts/interfaces/IVotingEscrow.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.6.12;\r\n\r\ninterface IVotingEscrow {\r\n    function balanceOfT(address addr, uint256 _t) external view returns (uint256);\r\n\r\n    function decimals() external view returns (uint8);\r\n}\r\n"
    },
    "contracts/ifo/IFODeployer.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.6.12;\r\n\r\nimport \"./IFOInitializable.sol\";\r\n\r\n/**\r\n * @title IFODeployer\r\n */\r\ncontract IFODeployer is Ownable {\r\n    using SafeERC20 for IERC20;\r\n\r\n    uint256 public constant MAX_BUFFER_TIME_INTERVAL = 7 * 86400; // 1 week\r\n\r\n    event AdminTokenRecovery(address indexed tokenRecovered, uint256 amount);\r\n    event NewIFOContract(address indexed ifoAddress);\r\n\r\n    /**\r\n     * @notice Constructor\r\n     */\r\n    constructor() public {\r\n        //\r\n    }\r\n\r\n    /**\r\n     * @notice It deploy the IFO contract and initializes the contract.\r\n     * @param _offeringToken: the token that is offered for the IFO\r\n     * @param _startTime: the start timestamp for the IFO\r\n     * @param _endTime: the end timestamp for the IFO\r\n     * @param _adminAddress: the admin address for handling tokens\r\n     */\r\n    function deployIFO(\r\n        address _offeringToken,\r\n        uint256 _startTime,\r\n        uint256 _endTime,\r\n        address _adminAddress,\r\n        address _votingEscrowAddress,\r\n        address _burnAddress,\r\n        address _receiverAddress\r\n    ) external onlyOwner {\r\n        require(IERC20(_offeringToken).totalSupply() >= 0);\r\n        require(_endTime < (block.timestamp + MAX_BUFFER_TIME_INTERVAL), \"Operations: EndTime too far\");\r\n        require(_startTime < _endTime, \"Operations: StartTime must be inferior to endTime\");\r\n        require(_startTime > block.timestamp, \"Operations: StartTime must be greater than current timestamp\");\r\n\r\n        bytes memory bytecode = type(IFOInitializable).creationCode;\r\n        bytes32 salt = keccak256(abi.encodePacked(_offeringToken, _startTime, _endTime));\r\n        address ifoAddress;\r\n\r\n        assembly {\r\n            ifoAddress := create2(0, add(bytecode, 32), mload(bytecode), salt)\r\n        }\r\n\r\n        IFOInitializable(ifoAddress).initialize(\r\n            _offeringToken,\r\n            _startTime,\r\n            _endTime,\r\n            MAX_BUFFER_TIME_INTERVAL,\r\n            _adminAddress,\r\n            _votingEscrowAddress,\r\n            _burnAddress,\r\n            _receiverAddress\r\n        );\r\n\r\n        emit NewIFOContract(ifoAddress);\r\n    }\r\n\r\n    /**\r\n     * @notice It allows the admin to recover wrong tokens sent to the contract\r\n     * @param _tokenAddress: the address of the token to withdraw\r\n     * @dev This function is only callable by admin.\r\n     */\r\n    function recoverWrongTokens(address _tokenAddress) external onlyOwner {\r\n        uint256 balanceToRecover = IERC20(_tokenAddress).balanceOf(address(this));\r\n        require(balanceToRecover > 0, \"Operations: Balance must be > 0\");\r\n        IERC20(_tokenAddress).safeTransfer(address(msg.sender), balanceToRecover);\r\n\r\n        emit AdminTokenRecovery(_tokenAddress, balanceToRecover);\r\n    }\r\n}"
    },
    "contracts/gemo/Treasury.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.6.12;\n\n/*\n * EvmoSwap\n * App:             https://app.evmoswap.org/\n * Medium:          https://evmoswap.medium.com/\n * GitHub:          https://github.com/evmoswap/\n */\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\n/**\n * The Treasury contract holds Gem EMO that can be bought with EMO and later\n *  be redeemed for EMO.\n *\n * To buy a Gem EMO, a portion of the EMO used will be burned in the process,\n *  while the remaining EMO will be locked in the contract to be unlocked at any\n *  future time.\n */\ncontract Treasury is Ownable {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n\n    address constant burnAddress = address(0x000000000000000000000000000000000000dEaD);\n\n    // The TOKEN to buy\n    IERC20 public emo;\n    // The TOKEN to sell\n    IERC20 public gEmo;\n    // adminAddress\n    address public adminAddress;\n    // buyFee, if decimal is not 18, please reset it\n    uint256 public buyFee = 2857; // 28.57% or 0.2857 EMO\n    // maxBuyFee, if decimal is not 18, please reset it\n    uint256 public maxBuyFee = 6000; // 60% or 0.6 EMO\n\n    // =================================\n\n    event Buy(address indexed user, uint256 amount);\n    event Sell(address indexed user, uint256 amount);\n    event AdminTransferred(address indexed previousAdmin, address indexed newAdmin);\n    event EmergencyWithdraw(address indexed receiver, uint256 amount);\n    event UpdateBuyFee(uint256 previousBuyFee, uint256 newBuyFee);\n\n    constructor(\n        IERC20 _emo,\n        IERC20 _gEmo\n    ) public {\n        emo = _emo;\n        gEmo = _gEmo;\n        adminAddress = msg.sender;\n    }\n\n    modifier onlyAdmin() {\n        require(msg.sender == adminAddress, \"admin: wut?\");\n        _;\n    }\n\n    bool private unlocked = true;\n    modifier lock() {\n        require(unlocked == true, 'EvmoSwap: LOCKED');\n        unlocked = false;\n        _;\n        unlocked = true;\n    }\n\n    /// @dev Buy Gem EMO with EMO. A potion of the EMO will be burned in the process.\n    /// @param _amount Amount of Gem EMO to sell\n    function buy(uint256 _amount) external lock {\n        emo.safeTransferFrom(address(msg.sender), address(this), _amount);\n        uint256 emoToBurn = _amount.mul(buyFee).div(10000);\n        uint256 gEmoToSend = _amount.sub(emoToBurn);\n        gEmo.transfer(address(msg.sender), gEmoToSend);\n        _burnEMOs(emoToBurn);\n        emit Buy(msg.sender, _amount);\n    }\n\n    /// @dev Sell Gem EMO to redeem for EMO\n    /// @param _amount Amount of Gem EMO to sell\n    function sell(uint256 _amount) external lock {\n        uint256 preGemEMOReserves = gEmoReserves();\n        gEmo.safeTransferFrom(address(msg.sender), address(this), _amount);\n        // Because the Gem EMO is a reflect token, we need to find how much\n        //  was transferred AFTER the reflect fee.\n        uint256 amountIn = gEmoReserves().sub(preGemEMOReserves);\n        emo.transfer(address(msg.sender), amountIn);\n        emit Sell(msg.sender, _amount);\n    }\n\n    /// @dev Burns EMO by sending them to the burn address\n    /// @param _amount Amount of EMO to burn\n    function _burnEMOs(uint256 _amount) internal {\n        emo.transfer(burnAddress, _amount);\n    }\n\n    /// @dev Obtain the amount of EMO held by this contract\n    function emoReserves() public view returns (uint256) {\n        return emo.balanceOf(address(this));\n    }\n\n    /// @dev Obtain the amount of Gem EMO held by this contract\n    function gEmoReserves() public view returns (uint256) {\n        return gEmo.balanceOf(address(this));\n    }\n\n    /* Owner Functions */\n\n    /// @dev Use the owner address to update the admin\n    function setAdmin(address _adminAddress) external onlyOwner {\n        address previousAdmin = adminAddress;\n        adminAddress = _adminAddress;\n        emit AdminTransferred(previousAdmin, adminAddress);\n    }\n\n    /// @dev Incase of a problem with the treasury contract, the Gem EMO can be removed\n    ///  and sent to a new treasury contract\n    function emergencyWithdraw(uint256 _amount) external onlyOwner {\n        gEmo.transferFrom(address(this), address(msg.sender), _amount);\n        emit EmergencyWithdraw(msg.sender, _amount);\n    }\n\n    /* Admin Functions */\n\n    /// @dev Set the fee that will be used to burn EMO on purchases\n    /// @param _fee The fee used for burning. 10000 = 100%\n    function setBuyFee(uint256 _fee) external onlyAdmin {\n        require(_fee <= maxBuyFee, 'fee must be mess than maxBuyFee');\n        uint256 previousBuyFee = buyFee;\n        buyFee = _fee;\n        emit UpdateBuyFee(previousBuyFee, buyFee);\n    }\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}