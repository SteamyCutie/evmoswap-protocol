{
  "address": "0x2A36911C94d702e9Ea3dbc1a836ae49E3EdAe748",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeToSetter",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token1",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "PairCreated",
      "type": "event"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "INIT_CODE_PAIR_HASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allPairs",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "allPairsLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        }
      ],
      "name": "createPair",
      "outputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "feeTo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "feeToSetter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "getPair",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeTo",
          "type": "address"
        }
      ],
      "name": "setFeeTo",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeToSetter",
          "type": "address"
        }
      ],
      "name": "setFeeToSetter",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_pair",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_pairFee",
          "type": "uint32"
        }
      ],
      "name": "setPairFee",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xefada6183e4cfcd72624763cbe27d3c1b8e420fd2c8b0e4b8919ebae3bb28f8e",
  "receipt": {
    "to": null,
    "from": "0x0aA282136b3924ca6767C4D5B9aad6f83bD40A9c",
    "contractAddress": "0x2A36911C94d702e9Ea3dbc1a836ae49E3EdAe748",
    "transactionIndex": 5,
    "gasUsed": "2628407",
    "logsBloom": "0x
    "blockHash": "0x362a3f1ca6289e89244b83eac1c11e926ece91366356248a4dad3c08e3db274b",
    "transactionHash": "0xefada6183e4cfcd72624763cbe27d3c1b8e420fd2c8b0e4b8919ebae3bb28f8e",
    "logs": [],
    "blockNumber": 18403022,
    "cumulativeGasUsed": "3700359",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0aA282136b3924ca6767C4D5B9aad6f83bD40A9c"
  ],
  "solcInputHash": "d415c40211ed923561ce2df1de6659e7",
  "metadata": "{\"compiler\":{\"version\":\"0.5.16+commit.9c3226ce\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeToSetter\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"PairCreated\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"INIT_CODE_PAIR_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allPairs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allPairsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"createPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeToSetter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"getPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeTo\",\"type\":\"address\"}],\"name\":\"setFeeTo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeToSetter\",\"type\":\"address\"}],\"name\":\"setFeeToSetter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_pairFee\",\"type\":\"uint32\"}],\"name\":\"setPairFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"contracts/swap/EvmoSwapFactory.sol\":\"EvmoSwapFactory\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0;\\n\\ninterface IERC20 {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xa63544e16ecc98b70a2376713042456648be501986dad52c33b1450c4fc0a9cb\"},\"contracts/interfaces/IEvmoSwapCallee.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0;\\n\\ninterface IEvmoSwapCallee {\\n    function evmosCall(address sender, uint amount0, uint amount1, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0xf94b2a60926569fb612381c25848e5f63c2abd2f25843b74f31191e68ebbe123\"},\"contracts/interfaces/IEvmoSwapERC20.sol\":{\"content\":\"\\n// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0;\\n\\ninterface IEvmoSwapERC20 {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n}\\n\",\"keccak256\":\"0x6137acb9f27a8ab1f16ca254b627bafb39514d18c47161673a8f174390489cce\"},\"contracts/interfaces/IEvmoSwapFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0;\\n\\ninterface IEvmoSwapFactory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n    function setPairFee(address pair, uint32 pairFee) external;\\n}\",\"keccak256\":\"0xed95f604e850b1f7a591dab85a871406172437049b25e2666e3b0612eaac0e46\"},\"contracts/interfaces/IEvmoSwapPair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0;\\n\\ninterface IEvmoSwapPair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n    function pairFee() external view returns (uint32);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n    function setPairFee(uint32) external;\\n}\\n\",\"keccak256\":\"0x64c4b3fdb59e30dc7f54ea3e238ba93acb2d7db8570576bdc70d5fcda67b3d62\"},\"contracts/libraries/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.5.16;\\n\\n// a library for performing various math operations\\n\\nlibrary Math {\\n    function min(uint x, uint y) internal pure returns (uint z) {\\n        z = x < y ? x : y;\\n    }\\n\\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n    function sqrt(uint y) internal pure returns (uint z) {\\n        if (y > 3) {\\n            z = y;\\n            uint x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x70edc5691bb5d70b3495e72cfb0ec517eb827c9be5a6743fb1c2a2123a37fbdf\"},\"contracts/libraries/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.16;\\n\\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\\n\\nlibrary SafeMath {\\n    function add(uint x, uint y) internal pure returns (uint z) {\\n        require((z = x + y) >= x, 'ds-math-add-overflow');\\n    }\\n\\n    function sub(uint x, uint y) internal pure returns (uint z) {\\n        require((z = x - y) <= x, 'ds-math-sub-underflow');\\n    }\\n\\n    function mul(uint x, uint y) internal pure returns (uint z) {\\n        require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');\\n    }\\n}\\n\",\"keccak256\":\"0xd6b8ae651537ae47f0893269386917bf4a25c8c92ad5df84ce165bdf18e9a36f\"},\"contracts/libraries/UQ112x112.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.5.16;\\n\\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\\n\\n// range: [0, 2**112 - 1]\\n// resolution: 1 / 2**112\\n\\nlibrary UQ112x112 {\\n    uint224 constant Q112 = 2**112;\\n\\n    // encode a uint112 as a UQ112x112\\n    function encode(uint112 y) internal pure returns (uint224 z) {\\n        z = uint224(y) * Q112; // never overflows\\n    }\\n\\n    // divide a UQ112x112 by a uint112, returning a UQ112x112\\n    function uqdiv(uint224 x, uint112 y) internal pure returns (uint224 z) {\\n        z = x / uint224(y);\\n    }\\n}\\n\",\"keccak256\":\"0x1ec8f6b1f195f8dddd945e220ef45fbd003e4909478a91a2bf3acb89d948af0f\"},\"contracts/swap/EvmoSwapERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.5.16;\\n\\nimport '../libraries/SafeMath.sol';\\nimport '../interfaces/IEvmoSwapERC20.sol';\\n\\ncontract EvmoSwapERC20 is IEvmoSwapERC20 {\\n    using SafeMath for uint;\\n\\n    string public constant name = 'EvmoSwap LPs';\\n    string public constant symbol = 'EMO-LP';\\n    uint8 public constant decimals = 18;\\n    uint  public totalSupply;\\n    mapping(address => uint) public balanceOf;\\n    mapping(address => mapping(address => uint)) public allowance;\\n\\n    bytes32 public DOMAIN_SEPARATOR;\\n    // keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    bytes32 public constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\\n    mapping(address => uint) public nonces;\\n\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    constructor() public {\\n        uint chainId;\\n        assembly {\\n            chainId := chainid\\n        }\\n        DOMAIN_SEPARATOR = keccak256(\\n            abi.encode(\\n                keccak256('EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)'),\\n                keccak256(bytes(name)),\\n                keccak256(bytes('1')),\\n                chainId,\\n                address(this)\\n            )\\n        );\\n    }\\n\\n    function _mint(address to, uint value) internal {\\n        totalSupply = totalSupply.add(value);\\n        balanceOf[to] = balanceOf[to].add(value);\\n        emit Transfer(address(0), to, value);\\n    }\\n\\n    function _burn(address from, uint value) internal {\\n        balanceOf[from] = balanceOf[from].sub(value);\\n        totalSupply = totalSupply.sub(value);\\n        emit Transfer(from, address(0), value);\\n    }\\n\\n    function _approve(address owner, address spender, uint value) private {\\n        allowance[owner][spender] = value;\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function _transfer(address from, address to, uint value) private {\\n        balanceOf[from] = balanceOf[from].sub(value);\\n        balanceOf[to] = balanceOf[to].add(value);\\n        emit Transfer(from, to, value);\\n    }\\n\\n    function approve(address spender, uint value) external returns (bool) {\\n        _approve(msg.sender, spender, value);\\n        return true;\\n    }\\n\\n    function transfer(address to, uint value) external returns (bool) {\\n        _transfer(msg.sender, to, value);\\n        return true;\\n    }\\n\\n    function transferFrom(address from, address to, uint value) external returns (bool) {\\n        if (allowance[from][msg.sender] != uint(-1)) {\\n            allowance[from][msg.sender] = allowance[from][msg.sender].sub(value);\\n        }\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external {\\n        require(deadline >= block.timestamp, 'EvmoSwapERC20V2: EXPIRED');\\n        bytes32 digest = keccak256(\\n            abi.encodePacked(\\n                '\\\\x19\\\\x01',\\n                DOMAIN_SEPARATOR,\\n                keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))\\n            )\\n        );\\n        address recoveredAddress = ecrecover(digest, v, r, s);\\n        require(recoveredAddress != address(0) && recoveredAddress == owner, 'EvmoSwapERC20V2: INVALID_SIGNATURE');\\n        _approve(owner, spender, value);\\n    }\\n}\\n\",\"keccak256\":\"0xea02dcce9ffcd1972aedf481bc8a7228fb7b1e573313580332c17766ec07b2ce\"},\"contracts/swap/EvmoSwapFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.5.16;\\n\\nimport './EvmoSwapPair.sol';\\nimport '../interfaces/IEvmoSwapFactory.sol';\\n\\ncontract EvmoSwapFactory is IEvmoSwapFactory {\\n\\n    address public feeTo;\\n    address public feeToSetter;\\n\\n    address[] public allPairs;\\n    mapping(address => mapping(address => address)) public getPair;\\n\\n    bytes32 public constant INIT_CODE_PAIR_HASH = keccak256(abi.encodePacked(type(EvmoSwapPair).creationCode));\\n\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    constructor(address _feeToSetter) public {\\n        feeToSetter = _feeToSetter;\\n    }\\n\\n    function allPairsLength() external view returns (uint) {\\n        return allPairs.length;\\n    }\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair) {\\n        require(tokenA != tokenB, 'EvmoSwapFactory: IDENTICAL_ADDRESSES');\\n        (address token0, address token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n        require(token0 != address(0), 'EvmoSwapFactory: ZERO_ADDRESS');\\n        require(getPair[token0][token1] == address(0), 'EvmoSwapFactory: PAIR_EXISTS'); // single check is sufficient\\n        bytes memory bytecode = type(EvmoSwapPair).creationCode;\\n        bytes32 salt = keccak256(abi.encodePacked(token0, token1));\\n        assembly {\\n            pair := create2(0, add(bytecode, 32), mload(bytecode), salt)\\n        }\\n        IEvmoSwapPair(pair).initialize(token0, token1);\\n        getPair[token0][token1] = pair;\\n        getPair[token1][token0] = pair; // populate mapping in the reverse direction\\n        allPairs.push(pair);\\n        emit PairCreated(token0, token1, pair, allPairs.length);\\n    }\\n\\n    function setFeeTo(address _feeTo) external {\\n        require(msg.sender == feeToSetter, 'EvmoSwapFactory: FORBIDDEN');\\n        feeTo = _feeTo;\\n    }\\n\\n    function setFeeToSetter(address _feeToSetter) external {\\n        require(msg.sender == feeToSetter, 'EvmoSwapFactory: FORBIDDEN');\\n        feeToSetter = _feeToSetter;\\n    }\\n\\n    function setPairFee(address _pair, uint32 _pairFee) external {\\n        require(msg.sender == feeToSetter, 'EvmoSwapFactory: FORBIDDEN');\\n        IEvmoSwapPair(_pair).setPairFee(_pairFee);\\n    }\\n}\\n\",\"keccak256\":\"0xbe20b706cfe7ee30a04ae77026b7c492d7d976c4fa4a9bfd706f1c13d5f13fa4\"},\"contracts/swap/EvmoSwapPair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.5.16;\\n\\nimport './EvmoSwapERC20.sol';\\nimport '../libraries/Math.sol';\\nimport '../interfaces/IERC20.sol';\\nimport '../libraries/UQ112x112.sol';\\nimport '../interfaces/IEvmoSwapPair.sol';\\nimport '../interfaces/IEvmoSwapFactory.sol';\\nimport '../interfaces/IEvmoSwapCallee.sol';\\n\\ncontract EvmoSwapPair is IEvmoSwapPair, EvmoSwapERC20 {\\n    using SafeMath  for uint;\\n    using UQ112x112 for uint224;\\n\\n    uint public constant MINIMUM_LIQUIDITY = 10**3;\\n    bytes4 private constant SELECTOR = bytes4(keccak256(bytes('transfer(address,uint256)')));\\n\\n    address public factory;\\n    address public token0;\\n    address public token1;\\n\\n    uint112 private reserve0;           // uses single storage slot, accessible via getReserves\\n    uint112 private reserve1;           // uses single storage slot, accessible via getReserves\\n    uint32  private blockTimestampLast; // uses single storage slot, accessible via getReserves\\n\\n    uint public price0CumulativeLast;\\n    uint public price1CumulativeLast;\\n    uint public kLast; // reserve0 * reserve1, as of immediately after the most recent liquidity event\\n    uint32 public pairFee = 25; // uses 0.25% as default fee\\n\\n    uint private unlocked = 1;\\n    modifier lock() {\\n        require(unlocked == 1, 'EvmoSwapPair: LOCKED');\\n        unlocked = 0;\\n        _;\\n        unlocked = 1;\\n    }\\n\\n    function getReserves() public view returns (uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast) {\\n        _reserve0 = reserve0;\\n        _reserve1 = reserve1;\\n        _blockTimestampLast = blockTimestampLast;\\n    }\\n\\n    function _safeTransfer(address token, address to, uint value) private {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(SELECTOR, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'EvmoSwapPair: TRANSFER_FAILED');\\n    }\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    constructor() public {\\n        factory = msg.sender;\\n    }\\n\\n    // called once by the factory at time of deployment\\n    function initialize(address _token0, address _token1) external {\\n        require(msg.sender == factory, 'EvmoSwapPair: FORBIDDEN'); // sufficient check\\n        token0 = _token0;\\n        token1 = _token1;\\n    }\\n\\n    function setPairFee(uint32 _pairFee) external {\\n        require(_pairFee > 0, \\\"EvmoSwapPair: MUST GT 0\\\");\\n        require(msg.sender == factory, 'EvmoSwapPair: FORBIDDEN');\\n        require(_pairFee <= 1000, 'EvmoSwapPair: FORBIDDEN_FEE');\\n        pairFee = _pairFee;\\n    }\\n\\n    // update reserves and, on the first call per block, price accumulators\\n    function _update(uint balance0, uint balance1, uint112 _reserve0, uint112 _reserve1) private {\\n        require(balance0 <= uint112(-1) && balance1 <= uint112(-1), 'EvmoSwapPair: OVERFLOW');\\n        uint32 blockTimestamp = uint32(block.timestamp % 2**32);\\n        uint32 timeElapsed = blockTimestamp - blockTimestampLast; // overflow is desired\\n        if (timeElapsed > 0 && _reserve0 != 0 && _reserve1 != 0) {\\n            // * never overflows, and + overflow is desired\\n            price0CumulativeLast += uint(UQ112x112.encode(_reserve1).uqdiv(_reserve0)) * timeElapsed;\\n            price1CumulativeLast += uint(UQ112x112.encode(_reserve0).uqdiv(_reserve1)) * timeElapsed;\\n        }\\n        reserve0 = uint112(balance0);\\n        reserve1 = uint112(balance1);\\n        blockTimestampLast = blockTimestamp;\\n        emit Sync(reserve0, reserve1);\\n    }\\n\\n    // if fee is on, mint liquidity equivalent to 8/25 of the growth in sqrt(k)\\n    function _mintFee(uint112 _reserve0, uint112 _reserve1) private returns (bool feeOn) {\\n        address feeTo = IEvmoSwapFactory(factory).feeTo();\\n        feeOn = feeTo != address(0);\\n        uint _kLast = kLast; // gas savings\\n        if (feeOn) {\\n            if (_kLast != 0) {\\n                uint rootK = Math.sqrt(uint(_reserve0).mul(_reserve1));\\n                uint rootKLast = Math.sqrt(_kLast);\\n                if (rootK > rootKLast) {\\n                    uint numerator = totalSupply.mul(rootK.sub(rootKLast)).mul(8);\\n                    uint denominator = rootK.mul(17).add(rootKLast.mul(8));\\n                    uint liquidity = numerator / denominator;\\n                    if (liquidity > 0) _mint(feeTo, liquidity);\\n                }\\n            }\\n        } else if (_kLast != 0) {\\n            kLast = 0;\\n        }\\n    }\\n\\n    // this low-level function should be called from a contract which performs important safety checks\\n    function mint(address to) external lock returns (uint liquidity) {\\n        (uint112 _reserve0, uint112 _reserve1,) = getReserves(); // gas savings\\n        uint balance0 = IERC20(token0).balanceOf(address(this));\\n        uint balance1 = IERC20(token1).balanceOf(address(this));\\n        uint amount0 = balance0.sub(_reserve0);\\n        uint amount1 = balance1.sub(_reserve1);\\n\\n        bool feeOn = _mintFee(_reserve0, _reserve1);\\n        uint _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee\\n        if (_totalSupply == 0) {\\n            liquidity = Math.sqrt(amount0.mul(amount1)).sub(MINIMUM_LIQUIDITY);\\n           _mint(address(0), MINIMUM_LIQUIDITY); // permanently lock the first MINIMUM_LIQUIDITY tokens\\n        } else {\\n            liquidity = Math.min(amount0.mul(_totalSupply) / _reserve0, amount1.mul(_totalSupply) / _reserve1);\\n        }\\n        require(liquidity > 0, 'EvmoSwapPair: INSUFFICIENT_LIQUIDITY_MINTED');\\n        _mint(to, liquidity);\\n\\n        _update(balance0, balance1, _reserve0, _reserve1);\\n        if (feeOn) kLast = uint(reserve0).mul(reserve1); // reserve0 and reserve1 are up-to-date\\n        emit Mint(msg.sender, amount0, amount1);\\n    }\\n\\n    // this low-level function should be called from a contract which performs important safety checks\\n    function burn(address to) external lock returns (uint amount0, uint amount1) {\\n        (uint112 _reserve0, uint112 _reserve1,) = getReserves(); // gas savings\\n        address _token0 = token0;                                // gas savings\\n        address _token1 = token1;                                // gas savings\\n        uint balance0 = IERC20(_token0).balanceOf(address(this));\\n        uint balance1 = IERC20(_token1).balanceOf(address(this));\\n        uint liquidity = balanceOf[address(this)];\\n\\n        bool feeOn = _mintFee(_reserve0, _reserve1);\\n        uint _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee\\n        amount0 = liquidity.mul(balance0) / _totalSupply; // using balances ensures pro-rata distribution\\n        amount1 = liquidity.mul(balance1) / _totalSupply; // using balances ensures pro-rata distribution\\n        require(amount0 > 0 && amount1 > 0, 'EvmoSwapPair: INSUFFICIENT_LIQUIDITY_BURNED');\\n        _burn(address(this), liquidity);\\n        _safeTransfer(_token0, to, amount0);\\n        _safeTransfer(_token1, to, amount1);\\n        balance0 = IERC20(_token0).balanceOf(address(this));\\n        balance1 = IERC20(_token1).balanceOf(address(this));\\n\\n        _update(balance0, balance1, _reserve0, _reserve1);\\n        if (feeOn) kLast = uint(reserve0).mul(reserve1); // reserve0 and reserve1 are up-to-date\\n        emit Burn(msg.sender, amount0, amount1, to);\\n    }\\n\\n    // this low-level function should be called from a contract which performs important safety checks\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external lock {\\n        require(amount0Out > 0 || amount1Out > 0, 'EvmoSwapPair: INSUFFICIENT_OUTPUT_AMOUNT');\\n        (uint112 _reserve0, uint112 _reserve1,) = getReserves(); // gas savings\\n        require(amount0Out < _reserve0 && amount1Out < _reserve1, 'EvmoSwapPair: INSUFFICIENT_LIQUIDITY');\\n\\n        uint balance0;\\n        uint balance1;\\n        { // scope for _token{0,1}, avoids stack too deep errors\\n        address _token0 = token0;\\n        address _token1 = token1;\\n        require(to != _token0 && to != _token1, 'EvmoSwapPair: INVALID_TO');\\n        if (amount0Out > 0) _safeTransfer(_token0, to, amount0Out); // optimistically transfer tokens\\n        if (amount1Out > 0) _safeTransfer(_token1, to, amount1Out); // optimistically transfer tokens\\n        if (data.length > 0) IEvmoSwapCallee(to).evmosCall(msg.sender, amount0Out, amount1Out, data);\\n        balance0 = IERC20(_token0).balanceOf(address(this));\\n        balance1 = IERC20(_token1).balanceOf(address(this));\\n        }\\n        uint amount0In = balance0 > _reserve0 - amount0Out ? balance0 - (_reserve0 - amount0Out) : 0;\\n        uint amount1In = balance1 > _reserve1 - amount1Out ? balance1 - (_reserve1 - amount1Out) : 0;\\n        require(amount0In > 0 || amount1In > 0, 'EvmoSwapPair: INSUFFICIENT_INPUT_AMOUNT');\\n        { // scope for reserve{0,1}Adjusted, avoids stack too deep errors\\n        uint _pairFee = pairFee;\\n        uint balance0Adjusted = (balance0.mul(10000).sub(amount0In.mul(_pairFee)));\\n        uint balance1Adjusted = (balance1.mul(10000).sub(amount1In.mul(_pairFee)));\\n        require(balance0Adjusted.mul(balance1Adjusted) >= uint(_reserve0).mul(_reserve1).mul(10000**2), 'EvmoSwapPair: K');\\n        }\\n\\n        _update(balance0, balance1, _reserve0, _reserve1);\\n        emit Swap(msg.sender, amount0In, amount1In, amount0Out, amount1Out, to);\\n    }\\n\\n    // force balances to match reserves\\n    function skim(address to) external lock {\\n        address _token0 = token0; // gas savings\\n        address _token1 = token1; // gas savings\\n        _safeTransfer(_token0, to, IERC20(_token0).balanceOf(address(this)).sub(reserve0));\\n        _safeTransfer(_token1, to, IERC20(_token1).balanceOf(address(this)).sub(reserve1));\\n    }\\n\\n    // force reserves to match balances\\n    function sync() external lock {\\n        _update(IERC20(token0).balanceOf(address(this)), IERC20(token1).balanceOf(address(this)), reserve0, reserve1);\\n    }\\n}\\n\",\"keccak256\":\"0xb22e185cc118dc7de1932c524149d6b411e3f85ffcb659405a767aacf452b61c\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051612e90380380612e908339818101604052602081101561003357600080fd5b5051600180546001600160a01b0319166001600160a01b03909216919091179055612e2d806100636000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c80639b81ff48116100665780639b81ff481461010e578063a2e74af614610142578063c9c6539614610168578063e6a4390514610196578063f46901ed146101c45761009e565b8063017e7e58146100a3578063094b7415146100c75780631e3dd18b146100cf578063574f2ba3146100ec5780635855a25a14610106575b600080fd5b6100ab6101ea565b604080516001600160a01b039092168252519081900360200190f35b6100ab6101f9565b6100ab600480360360208110156100e557600080fd5b5035610208565b6100f461022f565b60408051918252519081900360200190f35b6100f4610235565b6101406004803603604081101561012457600080fd5b5080356001600160a01b0316906020013563ffffffff166102c8565b005b6101406004803603602081101561015857600080fd5b50356001600160a01b031661038d565b6100ab6004803603604081101561017e57600080fd5b506001600160a01b038135811691602001351661040b565b6100ab600480360360408110156101ac57600080fd5b506001600160a01b038135811691602001351661072d565b610140600480360360208110156101da57600080fd5b50356001600160a01b0316610753565b6000546001600160a01b031681565b6001546001600160a01b031681565b6002818154811061021557fe5b6000918252602090912001546001600160a01b0316905081565b60025490565b604051610244602082016107d1565b6020820181038252601f19601f820116604052506040516020018082805190602001908083835b6020831061028a5780518252601f19909201916020918201910161026b565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040528051906020012081565b6001546001600160a01b03163314610324576040805162461bcd60e51b815260206004820152601a60248201527922bb36b7a9bbb0b82330b1ba37b93c9d102327a92124a22222a760311b604482015290519081900360640190fd5b60408051637cca74f560e11b815263ffffffff8316600482015290516001600160a01b0384169163f994e9ea91602480830192600092919082900301818387803b15801561037157600080fd5b505af1158015610385573d6000803e3d6000fd5b505050505050565b6001546001600160a01b031633146103e9576040805162461bcd60e51b815260206004820152601a60248201527922bb36b7a9bbb0b82330b1ba37b93c9d102327a92124a22222a760311b604482015290519081900360640190fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6000816001600160a01b0316836001600160a01b0316141561045e5760405162461bcd60e51b8152600401808060200182810382526024815260200180612dd56024913960400191505060405180910390fd5b600080836001600160a01b0316856001600160a01b031610610481578385610484565b84845b90925090506001600160a01b0382166104e4576040805162461bcd60e51b815260206004820152601d60248201527f45766d6f53776170466163746f72793a205a45524f5f41444452455353000000604482015290519081900360640190fd5b6001600160a01b0382811660009081526003602090815260408083208585168452909152902054161561055e576040805162461bcd60e51b815260206004820152601c60248201527f45766d6f53776170466163746f72793a20504149525f45584953545300000000604482015290519081900360640190fd5b606060405180602001610570906107d1565b6020820181038252601f19601f8201166040525090506000838360405160200180836001600160a01b03166001600160a01b031660601b8152601401826001600160a01b03166001600160a01b031660601b815260140192505050604051602081830303815290604052805190602001209050808251602084016000f56040805163485cc95560e01b81526001600160a01b038781166004830152868116602483015291519297509087169163485cc9559160448082019260009290919082900301818387803b15801561064357600080fd5b505af1158015610657573d6000803e3d6000fd5b505050506001600160a01b0384811660008181526003602081815260408084208987168086529083528185208054978d166001600160a01b031998891681179091559383528185208686528352818520805488168517905560028054600181018255958190527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace90950180549097168417909655925483519283529082015281517f0d3648bd0f6ba80134a33ba9275ac585d9d315f0ad8355cddefde31afa28d0e9929181900390910190a35050505092915050565b60036020908152600092835260408084209091529082529020546001600160a01b031681565b6001546001600160a01b031633146107af576040805162461bcd60e51b815260206004820152601a60248201527922bb36b7a9bbb0b82330b1ba37b93c9d102327a92124a22222a760311b604482015290519081900360640190fd5b600080546001600160a01b0319166001600160a01b0392909216919091179055565b6125f6806107df8339019056fe6080604052600c805463ffffffff191660191790556001600d5534801561002557600080fd5b5060405146908060526125a48239604080519182900360520182208282018252600c83526b45766d6f53776170204c507360a01b6020938401528151808301835260018152603160f81b908401528151808401919091527feb4ea02042cc3fb250ac9f88daf000b2cac02b8a9558ececac39d7b957a40bae818301527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6606082015260808101949094523060a0808601919091528151808603909101815260c09094019052825192019190912060035550600580546001600160a01b0319163317905561248d806101176000396000f3fe608060405234801561001057600080fd5b50600436106101cf5760003560e01c80636a62784211610104578063ba9a7a56116100a2578063d505accf11610071578063d505accf14610583578063dd62ed3e146105d4578063f994e9ea14610602578063fff6cae914610625576101cf565b8063ba9a7a5614610545578063bc25cf771461054d578063c45a015514610573578063d21220a71461057b576101cf565b80637ecebe00116100de5780637ecebe00146104ac57806389afcb44146104d257806395d89b4114610511578063a9059cbb14610519576101cf565b80636a6278421461045857806370a082311461047e5780637464fc3d146104a4576101cf565b806323b872dd116101715780633644e5151161014b5780633644e51514610412578063485cc9551461041a5780635909c0d5146104485780635a3d549314610450576101cf565b806323b872dd146103b657806330adf81f146103ec578063313ce567146103f4576101cf565b8063095ea7b3116101ad578063095ea7b3146103175780630dfe16811461035757806318160ddd1461037b578063218cf69a14610395576101cf565b8063022c0d9f146101d457806306fdde03146102625780630902f1ac146102df575b600080fd5b610260600480360360808110156101ea57600080fd5b8135916020810135916001600160a01b03604083013516919081019060808101606082013564010000000081111561022157600080fd5b82018360208201111561023357600080fd5b8035906020019184600183028401116401000000008311171561025557600080fd5b50909250905061062d565b005b61026a610b82565b6040805160208082528351818301528351919283929083019185019080838360005b838110156102a457818101518382015260200161028c565b50505050905090810190601f1680156102d15780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6102e7610baa565b604080516001600160701b03948516815292909316602083015263ffffffff168183015290519081900360600190f35b6103436004803603604081101561032d57600080fd5b506001600160a01b038135169060200135610bd4565b604080519115158252519081900360200190f35b61035f610beb565b604080516001600160a01b039092168252519081900360200190f35b610383610bfa565b60408051918252519081900360200190f35b61039d610c00565b6040805163ffffffff9092168252519081900360200190f35b610343600480360360608110156103cc57600080fd5b506001600160a01b03813581169160208101359091169060400135610c0c565b610383610ca6565b6103fc610cca565b6040805160ff9092168252519081900360200190f35b610383610ccf565b6102606004803603604081101561043057600080fd5b506001600160a01b0381358116916020013516610cd5565b610383610d5c565b610383610d62565b6103836004803603602081101561046e57600080fd5b50356001600160a01b0316610d68565b6103836004803603602081101561049457600080fd5b50356001600160a01b031661106b565b61038361107d565b610383600480360360208110156104c257600080fd5b50356001600160a01b0316611083565b6104f8600480360360208110156104e857600080fd5b50356001600160a01b0316611095565b6040805192835260208301919091528051918290030190f35b61026a61143e565b6103436004803603604081101561052f57600080fd5b506001600160a01b038135169060200135611460565b61038361146d565b6102606004803603602081101561056357600080fd5b50356001600160a01b0316611473565b61035f6115e1565b61035f6115f0565b610260600480360360e081101561059957600080fd5b506001600160a01b03813581169160208101359091169060408101359060608101359060ff6080820135169060a08101359060c001356115ff565b610383600480360360408110156105ea57600080fd5b506001600160a01b03813581169160200135166117f6565b6102606004803603602081101561061857600080fd5b503563ffffffff16611813565b610260611940565b600d5460011461067b576040805162461bcd60e51b8152602060048201526014602482015273115d9b5bd4ddd85c14185a5c8e881313d0d2d15160621b604482015290519081900360640190fd5b6000600d558415158061068e5750600084115b6106c95760405162461bcd60e51b815260040180806020018281038252602881526020018061236e6028913960400191505060405180910390fd5b6000806106d4610baa565b5091509150816001600160701b0316871080156106f95750806001600160701b031686105b6107345760405162461bcd60e51b81526004018080602001828103825260248152602001806123e86024913960400191505060405180910390fd5b60065460075460009182916001600160a01b039182169190811690891682148015906107725750806001600160a01b0316896001600160a01b031614155b6107c3576040805162461bcd60e51b815260206004820152601860248201527f45766d6f53776170506169723a20494e56414c49445f544f0000000000000000604482015290519081900360640190fd5b8a156107d4576107d4828a8d611aa5565b89156107e5576107e5818a8c611aa5565b86156108a057886001600160a01b031663ceb7f1a0338d8d8c8c6040518663ffffffff1660e01b815260040180866001600160a01b03166001600160a01b03168152602001858152602001848152602001806020018281038252848482818152602001925080828437600081840152601f19601f8201169050808301925050509650505050505050600060405180830381600087803b15801561088757600080fd5b505af115801561089b573d6000803e3d6000fd5b505050505b604080516370a0823160e01b815230600482015290516001600160a01b038416916370a08231916024808301926020929190829003018186803b1580156108e657600080fd5b505afa1580156108fa573d6000803e3d6000fd5b505050506040513d602081101561091057600080fd5b5051604080516370a0823160e01b815230600482015290519195506001600160a01b038316916370a0823191602480820192602092909190829003018186803b15801561095c57600080fd5b505afa158015610970573d6000803e3d6000fd5b505050506040513d602081101561098657600080fd5b5051925060009150506001600160701b0385168a900383116109a95760006109b8565b89856001600160701b03160383035b9050600089856001600160701b03160383116109d55760006109e4565b89856001600160701b03160383035b905060008211806109f55750600081115b610a305760405162461bcd60e51b81526004018080602001828103825260278152602001806123c16027913960400191505060405180910390fd5b600c5463ffffffff90811690600090610a6f90610a519086908590611c3f16565b610a638861271063ffffffff611c3f16565b9063ffffffff611ca216565b90506000610a86610a51858563ffffffff611c3f16565b9050610ab86305f5e100610aac6001600160701b038c8116908c1663ffffffff611c3f16565b9063ffffffff611c3f16565b610ac8838363ffffffff611c3f16565b1015610b0d576040805162461bcd60e51b815260206004820152600f60248201526e45766d6f53776170506169723a204b60881b604482015290519081900360640190fd5b505050610b1c84848888611cf2565b60408051838152602081018390528082018d9052606081018c905290516001600160a01b038b169133917fd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d8229181900360800190a350506001600d55505050505050505050565b6040518060400160405280600c81526020016b45766d6f53776170204c507360a01b81525081565b6008546001600160701b0380821692600160701b830490911691600160e01b900463ffffffff1690565b6000610be1338484611eba565b5060015b92915050565b6006546001600160a01b031681565b60005481565b600c5463ffffffff1681565b6001600160a01b038316600090815260026020908152604080832033845290915281205460001914610c91576001600160a01b0384166000908152600260209081526040808320338452909152902054610c6c908363ffffffff611ca216565b6001600160a01b03851660009081526002602090815260408083203384529091529020555b610c9c848484611f1c565b5060019392505050565b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b601281565b60035481565b6005546001600160a01b03163314610d2e576040805162461bcd60e51b815260206004820152601760248201527622bb36b7a9bbb0b82830b4b91d102327a92124a22222a760491b604482015290519081900360640190fd5b600680546001600160a01b039384166001600160a01b03199182161790915560078054929093169116179055565b60095481565b600a5481565b6000600d54600114610db8576040805162461bcd60e51b8152602060048201526014602482015273115d9b5bd4ddd85c14185a5c8e881313d0d2d15160621b604482015290519081900360640190fd5b6000600d81905580610dc8610baa565b50600654604080516370a0823160e01b815230600482015290519395509193506000926001600160a01b03909116916370a08231916024808301926020929190829003018186803b158015610e1c57600080fd5b505afa158015610e30573d6000803e3d6000fd5b505050506040513d6020811015610e4657600080fd5b5051600754604080516370a0823160e01b815230600482015290519293506000926001600160a01b03909216916370a0823191602480820192602092909190829003018186803b158015610e9957600080fd5b505afa158015610ead573d6000803e3d6000fd5b505050506040513d6020811015610ec357600080fd5b505190506000610ee2836001600160701b03871663ffffffff611ca216565b90506000610eff836001600160701b03871663ffffffff611ca216565b90506000610f0d8787611fd6565b60005490915080610f4a57610f366103e8610a63610f31878763ffffffff611c3f16565b612149565b9850610f4560006103e861219b565b610f99565b610f966001600160701b038916610f67868463ffffffff611c3f16565b81610f6e57fe5b046001600160701b038916610f89868563ffffffff611c3f16565b81610f9057fe5b04612231565b98505b60008911610fd85760405162461bcd60e51b815260040180806020018281038252602b81526020018061240c602b913960400191505060405180910390fd5b610fe28a8a61219b565b610fee86868a8a611cf2565b811561101e5760085461101a906001600160701b0380821691600160701b90041663ffffffff611c3f16565b600b555b6040805185815260208101859052815133927f4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f928290030190a250506001600d5550949695505050505050565b60016020526000908152604090205481565b600b5481565b60046020526000908152604090205481565b600080600d546001146110e6576040805162461bcd60e51b8152602060048201526014602482015273115d9b5bd4ddd85c14185a5c8e881313d0d2d15160621b604482015290519081900360640190fd5b6000600d819055806110f6610baa565b50600654600754604080516370a0823160e01b815230600482015290519496509294506001600160a01b039182169391169160009184916370a08231916024808301926020929190829003018186803b15801561115257600080fd5b505afa158015611166573d6000803e3d6000fd5b505050506040513d602081101561117c57600080fd5b5051604080516370a0823160e01b815230600482015290519192506000916001600160a01b038516916370a08231916024808301926020929190829003018186803b1580156111ca57600080fd5b505afa1580156111de573d6000803e3d6000fd5b505050506040513d60208110156111f457600080fd5b5051306000908152600160205260408120549192506112138888611fd6565b6000549091508061122a848763ffffffff611c3f16565b8161123157fe5b049a5080611245848663ffffffff611c3f16565b8161124c57fe5b04995060008b11801561125f575060008a115b61129a5760405162461bcd60e51b815260040180806020018281038252602b815260200180612396602b913960400191505060405180910390fd5b6112a43084612249565b6112af878d8d611aa5565b6112ba868d8c611aa5565b604080516370a0823160e01b815230600482015290516001600160a01b038916916370a08231916024808301926020929190829003018186803b15801561130057600080fd5b505afa158015611314573d6000803e3d6000fd5b505050506040513d602081101561132a57600080fd5b5051604080516370a0823160e01b815230600482015290519196506001600160a01b038816916370a0823191602480820192602092909190829003018186803b15801561137657600080fd5b505afa15801561138a573d6000803e3d6000fd5b505050506040513d60208110156113a057600080fd5b505193506113b085858b8b611cf2565b81156113e0576008546113dc906001600160701b0380821691600160701b90041663ffffffff611c3f16565b600b555b604080518c8152602081018c905281516001600160a01b038f169233927fdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d81936496929081900390910190a35050505050505050506001600d81905550915091565b604051806040016040528060068152602001650454d4f2d4c560d41b81525081565b6000610be1338484611f1c565b6103e881565b600d546001146114c1576040805162461bcd60e51b8152602060048201526014602482015273115d9b5bd4ddd85c14185a5c8e881313d0d2d15160621b604482015290519081900360640190fd5b6000600d55600654600754600854604080516370a0823160e01b815230600482015290516001600160a01b039485169490931692611570928592879261156b926001600160701b03169185916370a0823191602480820192602092909190829003018186803b15801561153357600080fd5b505afa158015611547573d6000803e3d6000fd5b505050506040513d602081101561155d57600080fd5b50519063ffffffff611ca216565b611aa5565b600854604080516370a0823160e01b815230600482015290516115d7928492879261156b92600160701b90046001600160701b0316916001600160a01b038616916370a0823191602480820192602092909190829003018186803b15801561153357600080fd5b50506001600d5550565b6005546001600160a01b031681565b6007546001600160a01b031681565b42841015611654576040805162461bcd60e51b815260206004820152601860248201527f45766d6f53776170455243323056323a20455850495245440000000000000000604482015290519081900360640190fd5b6003546001600160a01b0380891660008181526004602090815260408083208054600180820190925582517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98186015280840196909652958d166060860152608085018c905260a085019590955260c08085018b90528151808603909101815260e08501825280519083012061190160f01b6101008601526101028501969096526101228085019690965280518085039096018652610142840180825286519683019690962095839052610162840180825286905260ff89166101828501526101a284018890526101c28401879052519193926101e280820193601f1981019281900390910190855afa15801561176f573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116158015906117a55750886001600160a01b0316816001600160a01b0316145b6117e05760405162461bcd60e51b81526004018080602001828103825260228152602001806124376022913960400191505060405180910390fd5b6117eb898989611eba565b505050505050505050565b600260209081526000928352604080842090915290825290205481565b60008163ffffffff161161186e576040805162461bcd60e51b815260206004820152601760248201527f45766d6f53776170506169723a204d5553542047542030000000000000000000604482015290519081900360640190fd5b6005546001600160a01b031633146118c7576040805162461bcd60e51b815260206004820152601760248201527622bb36b7a9bbb0b82830b4b91d102327a92124a22222a760491b604482015290519081900360640190fd5b6103e88163ffffffff161115611924576040805162461bcd60e51b815260206004820152601b60248201527f45766d6f53776170506169723a20464f5242494444454e5f4645450000000000604482015290519081900360640190fd5b600c805463ffffffff191663ffffffff92909216919091179055565b600d5460011461198e576040805162461bcd60e51b8152602060048201526014602482015273115d9b5bd4ddd85c14185a5c8e881313d0d2d15160621b604482015290519081900360640190fd5b6000600d55600654604080516370a0823160e01b81523060048201529051611a9e926001600160a01b0316916370a08231916024808301926020929190829003018186803b1580156119df57600080fd5b505afa1580156119f3573d6000803e3d6000fd5b505050506040513d6020811015611a0957600080fd5b5051600754604080516370a0823160e01b815230600482015290516001600160a01b03909216916370a0823191602480820192602092909190829003018186803b158015611a5657600080fd5b505afa158015611a6a573d6000803e3d6000fd5b505050506040513d6020811015611a8057600080fd5b50516008546001600160701b0380821691600160701b900416611cf2565b6001600d55565b604080518082018252601981527f7472616e7366657228616464726573732c75696e74323536290000000000000060209182015281516001600160a01b0385811660248301526044808301869052845180840390910181526064909201845291810180516001600160e01b031663a9059cbb60e01b1781529251815160009460609489169392918291908083835b60208310611b525780518252601f199092019160209182019101611b33565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114611bb4576040519150601f19603f3d011682016040523d82523d6000602084013e611bb9565b606091505b5091509150818015611be7575080511580611be75750808060200190516020811015611be457600080fd5b50515b611c38576040805162461bcd60e51b815260206004820152601d60248201527f45766d6f53776170506169723a205452414e534645525f4641494c4544000000604482015290519081900360640190fd5b5050505050565b6000811580611c5a57505080820282828281611c5757fe5b04145b610be5576040805162461bcd60e51b815260206004820152601460248201527364732d6d6174682d6d756c2d6f766572666c6f7760601b604482015290519081900360640190fd5b80820382811115610be5576040805162461bcd60e51b815260206004820152601560248201527464732d6d6174682d7375622d756e646572666c6f7760581b604482015290519081900360640190fd5b6001600160701b038411801590611d1057506001600160701b038311155b611d5a576040805162461bcd60e51b815260206004820152601660248201527545766d6f53776170506169723a204f564552464c4f5760501b604482015290519081900360640190fd5b60085463ffffffff42811691600160e01b90048116820390811615801590611d8a57506001600160701b03841615155b8015611d9e57506001600160701b03831615155b15611e0f578063ffffffff16611dcc85611db7866122e7565b6001600160e01b03169063ffffffff6122f916565b600980546001600160e01b03929092169290920201905563ffffffff8116611df784611db7876122e7565b600a80546001600160e01b0392909216929092020190555b600880546dffffffffffffffffffffffffffff19166001600160701b03888116919091176dffffffffffffffffffffffffffff60701b1916600160701b8883168102919091176001600160e01b0316600160e01b63ffffffff871602179283905560408051848416815291909304909116602082015281517f1c411e9a96e071241c2f21f7726b17ae89e3cab4c78be50e062b03a9fffbbad1929181900390910190a1505050505050565b6001600160a01b03808416600081815260026020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6001600160a01b038316600090815260016020526040902054611f45908263ffffffff611ca216565b6001600160a01b038085166000908152600160205260408082209390935590841681522054611f7a908263ffffffff61231e16565b6001600160a01b0380841660008181526001602090815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b600080600560009054906101000a90046001600160a01b03166001600160a01b031663017e7e586040518163ffffffff1660e01b815260040160206040518083038186803b15801561202757600080fd5b505afa15801561203b573d6000803e3d6000fd5b505050506040513d602081101561205157600080fd5b5051600b546001600160a01b038216158015945091925090612135578015612130576000612094610f316001600160701b0388811690881663ffffffff611c3f16565b905060006120a183612149565b90508082111561212d5760006120d46008610aac6120c5868663ffffffff611ca216565b6000549063ffffffff611c3f16565b905060006121096120ec84600863ffffffff611c3f16565b6120fd86601163ffffffff611c3f16565b9063ffffffff61231e16565b9050600081838161211657fe5b049050801561212957612129878261219b565b5050505b50505b612141565b8015612141576000600b555b505092915050565b6000600382111561218c575080600160028204015b818110156121865780915060028182858161217557fe5b04018161217e57fe5b04905061215e565b50612196565b8115612196575060015b919050565b6000546121ae908263ffffffff61231e16565b60009081556001600160a01b0383168152600160205260409020546121d9908263ffffffff61231e16565b6001600160a01b03831660008181526001602090815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b60008183106122405781612242565b825b9392505050565b6001600160a01b038216600090815260016020526040902054612272908263ffffffff611ca216565b6001600160a01b0383166000908152600160205260408120919091555461229f908263ffffffff611ca216565b60009081556040805183815290516001600160a01b038516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef919081900360200190a35050565b6001600160701b0316600160701b0290565b60006001600160701b0382166001600160e01b0384168161231657fe5b049392505050565b80820182811015610be5576040805162461bcd60e51b815260206004820152601460248201527364732d6d6174682d6164642d6f766572666c6f7760601b604482015290519081900360640190fdfe45766d6f53776170506169723a20494e53554646494349454e545f4f55545055545f414d4f554e5445766d6f53776170506169723a20494e53554646494349454e545f4c49515549444954595f4255524e454445766d6f53776170506169723a20494e53554646494349454e545f494e5055545f414d4f554e5445766d6f53776170506169723a20494e53554646494349454e545f4c495155494449545945766d6f53776170506169723a20494e53554646494349454e545f4c49515549444954595f4d494e54454445766d6f53776170455243323056323a20494e56414c49445f5349474e4154555245a265627a7a72315820dcce9cc6bbb83a843ec22e336c57cf90d5d2bafa7e5ef71045e505ca391f48b364736f6c63430005100032454950373132446f6d61696e28737472696e67206e616d652c737472696e672076657273696f6e2c75696e7432353620636861696e49642c6164647265737320766572696679696e67436f6e74726163742945766d6f53776170466163746f72793a204944454e544943414c5f414444524553534553a265627a7a723158205232c1c74361f84b3f2671c59beaff438825908c70ac8ae95693bd01d4972c6f64736f6c63430005100032",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061009e5760003560e01c80639b81ff48116100665780639b81ff481461010e578063a2e74af614610142578063c9c6539614610168578063e6a4390514610196578063f46901ed146101c45761009e565b8063017e7e58146100a3578063094b7415146100c75780631e3dd18b146100cf578063574f2ba3146100ec5780635855a25a14610106575b600080fd5b6100ab6101ea565b604080516001600160a01b039092168252519081900360200190f35b6100ab6101f9565b6100ab600480360360208110156100e557600080fd5b5035610208565b6100f461022f565b60408051918252519081900360200190f35b6100f4610235565b6101406004803603604081101561012457600080fd5b5080356001600160a01b0316906020013563ffffffff166102c8565b005b6101406004803603602081101561015857600080fd5b50356001600160a01b031661038d565b6100ab6004803603604081101561017e57600080fd5b506001600160a01b038135811691602001351661040b565b6100ab600480360360408110156101ac57600080fd5b506001600160a01b038135811691602001351661072d565b610140600480360360208110156101da57600080fd5b50356001600160a01b0316610753565b6000546001600160a01b031681565b6001546001600160a01b031681565b6002818154811061021557fe5b6000918252602090912001546001600160a01b0316905081565b60025490565b604051610244602082016107d1565b6020820181038252601f19601f820116604052506040516020018082805190602001908083835b6020831061028a5780518252601f19909201916020918201910161026b565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040528051906020012081565b6001546001600160a01b03163314610324576040805162461bcd60e51b815260206004820152601a60248201527922bb36b7a9bbb0b82330b1ba37b93c9d102327a92124a22222a760311b604482015290519081900360640190fd5b60408051637cca74f560e11b815263ffffffff8316600482015290516001600160a01b0384169163f994e9ea91602480830192600092919082900301818387803b15801561037157600080fd5b505af1158015610385573d6000803e3d6000fd5b505050505050565b6001546001600160a01b031633146103e9576040805162461bcd60e51b815260206004820152601a60248201527922bb36b7a9bbb0b82330b1ba37b93c9d102327a92124a22222a760311b604482015290519081900360640190fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6000816001600160a01b0316836001600160a01b0316141561045e5760405162461bcd60e51b8152600401808060200182810382526024815260200180612dd56024913960400191505060405180910390fd5b600080836001600160a01b0316856001600160a01b031610610481578385610484565b84845b90925090506001600160a01b0382166104e4576040805162461bcd60e51b815260206004820152601d60248201527f45766d6f53776170466163746f72793a205a45524f5f41444452455353000000604482015290519081900360640190fd5b6001600160a01b0382811660009081526003602090815260408083208585168452909152902054161561055e576040805162461bcd60e51b815260206004820152601c60248201527f45766d6f53776170466163746f72793a20504149525f45584953545300000000604482015290519081900360640190fd5b606060405180602001610570906107d1565b6020820181038252601f19601f8201166040525090506000838360405160200180836001600160a01b03166001600160a01b031660601b8152601401826001600160a01b03166001600160a01b031660601b815260140192505050604051602081830303815290604052805190602001209050808251602084016000f56040805163485cc95560e01b81526001600160a01b038781166004830152868116602483015291519297509087169163485cc9559160448082019260009290919082900301818387803b15801561064357600080fd5b505af1158015610657573d6000803e3d6000fd5b505050506001600160a01b0384811660008181526003602081815260408084208987168086529083528185208054978d166001600160a01b031998891681179091559383528185208686528352818520805488168517905560028054600181018255958190527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace90950180549097168417909655925483519283529082015281517f0d3648bd0f6ba80134a33ba9275ac585d9d315f0ad8355cddefde31afa28d0e9929181900390910190a35050505092915050565b60036020908152600092835260408084209091529082529020546001600160a01b031681565b6001546001600160a01b031633146107af576040805162461bcd60e51b815260206004820152601a60248201527922bb36b7a9bbb0b82330b1ba37b93c9d102327a92124a22222a760311b604482015290519081900360640190fd5b600080546001600160a01b0319166001600160a01b0392909216919091179055565b6125f6806107df8339019056fe6080604052600c805463ffffffff191660191790556001600d5534801561002557600080fd5b5060405146908060526125a48239604080519182900360520182208282018252600c83526b45766d6f53776170204c507360a01b6020938401528151808301835260018152603160f81b908401528151808401919091527feb4ea02042cc3fb250ac9f88daf000b2cac02b8a9558ececac39d7b957a40bae818301527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6606082015260808101949094523060a0808601919091528151808603909101815260c09094019052825192019190912060035550600580546001600160a01b0319163317905561248d806101176000396000f3fe608060405234801561001057600080fd5b50600436106101cf5760003560e01c80636a62784211610104578063ba9a7a56116100a2578063d505accf11610071578063d505accf14610583578063dd62ed3e146105d4578063f994e9ea14610602578063fff6cae914610625576101cf565b8063ba9a7a5614610545578063bc25cf771461054d578063c45a015514610573578063d21220a71461057b576101cf565b80637ecebe00116100de5780637ecebe00146104ac57806389afcb44146104d257806395d89b4114610511578063a9059cbb14610519576101cf565b80636a6278421461045857806370a082311461047e5780637464fc3d146104a4576101cf565b806323b872dd116101715780633644e5151161014b5780633644e51514610412578063485cc9551461041a5780635909c0d5146104485780635a3d549314610450576101cf565b806323b872dd146103b657806330adf81f146103ec578063313ce567146103f4576101cf565b8063095ea7b3116101ad578063095ea7b3146103175780630dfe16811461035757806318160ddd1461037b578063218cf69a14610395576101cf565b8063022c0d9f146101d457806306fdde03146102625780630902f1ac146102df575b600080fd5b610260600480360360808110156101ea57600080fd5b8135916020810135916001600160a01b03604083013516919081019060808101606082013564010000000081111561022157600080fd5b82018360208201111561023357600080fd5b8035906020019184600183028401116401000000008311171561025557600080fd5b50909250905061062d565b005b61026a610b82565b6040805160208082528351818301528351919283929083019185019080838360005b838110156102a457818101518382015260200161028c565b50505050905090810190601f1680156102d15780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6102e7610baa565b604080516001600160701b03948516815292909316602083015263ffffffff168183015290519081900360600190f35b6103436004803603604081101561032d57600080fd5b506001600160a01b038135169060200135610bd4565b604080519115158252519081900360200190f35b61035f610beb565b604080516001600160a01b039092168252519081900360200190f35b610383610bfa565b60408051918252519081900360200190f35b61039d610c00565b6040805163ffffffff9092168252519081900360200190f35b610343600480360360608110156103cc57600080fd5b506001600160a01b03813581169160208101359091169060400135610c0c565b610383610ca6565b6103fc610cca565b6040805160ff9092168252519081900360200190f35b610383610ccf565b6102606004803603604081101561043057600080fd5b506001600160a01b0381358116916020013516610cd5565b610383610d5c565b610383610d62565b6103836004803603602081101561046e57600080fd5b50356001600160a01b0316610d68565b6103836004803603602081101561049457600080fd5b50356001600160a01b031661106b565b61038361107d565b610383600480360360208110156104c257600080fd5b50356001600160a01b0316611083565b6104f8600480360360208110156104e857600080fd5b50356001600160a01b0316611095565b6040805192835260208301919091528051918290030190f35b61026a61143e565b6103436004803603604081101561052f57600080fd5b506001600160a01b038135169060200135611460565b61038361146d565b6102606004803603602081101561056357600080fd5b50356001600160a01b0316611473565b61035f6115e1565b61035f6115f0565b610260600480360360e081101561059957600080fd5b506001600160a01b03813581169160208101359091169060408101359060608101359060ff6080820135169060a08101359060c001356115ff565b610383600480360360408110156105ea57600080fd5b506001600160a01b03813581169160200135166117f6565b6102606004803603602081101561061857600080fd5b503563ffffffff16611813565b610260611940565b600d5460011461067b576040805162461bcd60e51b8152602060048201526014602482015273115d9b5bd4ddd85c14185a5c8e881313d0d2d15160621b604482015290519081900360640190fd5b6000600d558415158061068e5750600084115b6106c95760405162461bcd60e51b815260040180806020018281038252602881526020018061236e6028913960400191505060405180910390fd5b6000806106d4610baa565b5091509150816001600160701b0316871080156106f95750806001600160701b031686105b6107345760405162461bcd60e51b81526004018080602001828103825260248152602001806123e86024913960400191505060405180910390fd5b60065460075460009182916001600160a01b039182169190811690891682148015906107725750806001600160a01b0316896001600160a01b031614155b6107c3576040805162461bcd60e51b815260206004820152601860248201527f45766d6f53776170506169723a20494e56414c49445f544f0000000000000000604482015290519081900360640190fd5b8a156107d4576107d4828a8d611aa5565b89156107e5576107e5818a8c611aa5565b86156108a057886001600160a01b031663ceb7f1a0338d8d8c8c6040518663ffffffff1660e01b815260040180866001600160a01b03166001600160a01b03168152602001858152602001848152602001806020018281038252848482818152602001925080828437600081840152601f19601f8201169050808301925050509650505050505050600060405180830381600087803b15801561088757600080fd5b505af115801561089b573d6000803e3d6000fd5b505050505b604080516370a0823160e01b815230600482015290516001600160a01b038416916370a08231916024808301926020929190829003018186803b1580156108e657600080fd5b505afa1580156108fa573d6000803e3d6000fd5b505050506040513d602081101561091057600080fd5b5051604080516370a0823160e01b815230600482015290519195506001600160a01b038316916370a0823191602480820192602092909190829003018186803b15801561095c57600080fd5b505afa158015610970573d6000803e3d6000fd5b505050506040513d602081101561098657600080fd5b5051925060009150506001600160701b0385168a900383116109a95760006109b8565b89856001600160701b03160383035b9050600089856001600160701b03160383116109d55760006109e4565b89856001600160701b03160383035b905060008211806109f55750600081115b610a305760405162461bcd60e51b81526004018080602001828103825260278152602001806123c16027913960400191505060405180910390fd5b600c5463ffffffff90811690600090610a6f90610a519086908590611c3f16565b610a638861271063ffffffff611c3f16565b9063ffffffff611ca216565b90506000610a86610a51858563ffffffff611c3f16565b9050610ab86305f5e100610aac6001600160701b038c8116908c1663ffffffff611c3f16565b9063ffffffff611c3f16565b610ac8838363ffffffff611c3f16565b1015610b0d576040805162461bcd60e51b815260206004820152600f60248201526e45766d6f53776170506169723a204b60881b604482015290519081900360640190fd5b505050610b1c84848888611cf2565b60408051838152602081018390528082018d9052606081018c905290516001600160a01b038b169133917fd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d8229181900360800190a350506001600d55505050505050505050565b6040518060400160405280600c81526020016b45766d6f53776170204c507360a01b81525081565b6008546001600160701b0380821692600160701b830490911691600160e01b900463ffffffff1690565b6000610be1338484611eba565b5060015b92915050565b6006546001600160a01b031681565b60005481565b600c5463ffffffff1681565b6001600160a01b038316600090815260026020908152604080832033845290915281205460001914610c91576001600160a01b0384166000908152600260209081526040808320338452909152902054610c6c908363ffffffff611ca216565b6001600160a01b03851660009081526002602090815260408083203384529091529020555b610c9c848484611f1c565b5060019392505050565b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b601281565b60035481565b6005546001600160a01b03163314610d2e576040805162461bcd60e51b815260206004820152601760248201527622bb36b7a9bbb0b82830b4b91d102327a92124a22222a760491b604482015290519081900360640190fd5b600680546001600160a01b039384166001600160a01b03199182161790915560078054929093169116179055565b60095481565b600a5481565b6000600d54600114610db8576040805162461bcd60e51b8152602060048201526014602482015273115d9b5bd4ddd85c14185a5c8e881313d0d2d15160621b604482015290519081900360640190fd5b6000600d81905580610dc8610baa565b50600654604080516370a0823160e01b815230600482015290519395509193506000926001600160a01b03909116916370a08231916024808301926020929190829003018186803b158015610e1c57600080fd5b505afa158015610e30573d6000803e3d6000fd5b505050506040513d6020811015610e4657600080fd5b5051600754604080516370a0823160e01b815230600482015290519293506000926001600160a01b03909216916370a0823191602480820192602092909190829003018186803b158015610e9957600080fd5b505afa158015610ead573d6000803e3d6000fd5b505050506040513d6020811015610ec357600080fd5b505190506000610ee2836001600160701b03871663ffffffff611ca216565b90506000610eff836001600160701b03871663ffffffff611ca216565b90506000610f0d8787611fd6565b60005490915080610f4a57610f366103e8610a63610f31878763ffffffff611c3f16565b612149565b9850610f4560006103e861219b565b610f99565b610f966001600160701b038916610f67868463ffffffff611c3f16565b81610f6e57fe5b046001600160701b038916610f89868563ffffffff611c3f16565b81610f9057fe5b04612231565b98505b60008911610fd85760405162461bcd60e51b815260040180806020018281038252602b81526020018061240c602b913960400191505060405180910390fd5b610fe28a8a61219b565b610fee86868a8a611cf2565b811561101e5760085461101a906001600160701b0380821691600160701b90041663ffffffff611c3f16565b600b555b6040805185815260208101859052815133927f4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f928290030190a250506001600d5550949695505050505050565b60016020526000908152604090205481565b600b5481565b60046020526000908152604090205481565b600080600d546001146110e6576040805162461bcd60e51b8152602060048201526014602482015273115d9b5bd4ddd85c14185a5c8e881313d0d2d15160621b604482015290519081900360640190fd5b6000600d819055806110f6610baa565b50600654600754604080516370a0823160e01b815230600482015290519496509294506001600160a01b039182169391169160009184916370a08231916024808301926020929190829003018186803b15801561115257600080fd5b505afa158015611166573d6000803e3d6000fd5b505050506040513d602081101561117c57600080fd5b5051604080516370a0823160e01b815230600482015290519192506000916001600160a01b038516916370a08231916024808301926020929190829003018186803b1580156111ca57600080fd5b505afa1580156111de573d6000803e3d6000fd5b505050506040513d60208110156111f457600080fd5b5051306000908152600160205260408120549192506112138888611fd6565b6000549091508061122a848763ffffffff611c3f16565b8161123157fe5b049a5080611245848663ffffffff611c3f16565b8161124c57fe5b04995060008b11801561125f575060008a115b61129a5760405162461bcd60e51b815260040180806020018281038252602b815260200180612396602b913960400191505060405180910390fd5b6112a43084612249565b6112af878d8d611aa5565b6112ba868d8c611aa5565b604080516370a0823160e01b815230600482015290516001600160a01b038916916370a08231916024808301926020929190829003018186803b15801561130057600080fd5b505afa158015611314573d6000803e3d6000fd5b505050506040513d602081101561132a57600080fd5b5051604080516370a0823160e01b815230600482015290519196506001600160a01b038816916370a0823191602480820192602092909190829003018186803b15801561137657600080fd5b505afa15801561138a573d6000803e3d6000fd5b505050506040513d60208110156113a057600080fd5b505193506113b085858b8b611cf2565b81156113e0576008546113dc906001600160701b0380821691600160701b90041663ffffffff611c3f16565b600b555b604080518c8152602081018c905281516001600160a01b038f169233927fdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d81936496929081900390910190a35050505050505050506001600d81905550915091565b604051806040016040528060068152602001650454d4f2d4c560d41b81525081565b6000610be1338484611f1c565b6103e881565b600d546001146114c1576040805162461bcd60e51b8152602060048201526014602482015273115d9b5bd4ddd85c14185a5c8e881313d0d2d15160621b604482015290519081900360640190fd5b6000600d55600654600754600854604080516370a0823160e01b815230600482015290516001600160a01b039485169490931692611570928592879261156b926001600160701b03169185916370a0823191602480820192602092909190829003018186803b15801561153357600080fd5b505afa158015611547573d6000803e3d6000fd5b505050506040513d602081101561155d57600080fd5b50519063ffffffff611ca216565b611aa5565b600854604080516370a0823160e01b815230600482015290516115d7928492879261156b92600160701b90046001600160701b0316916001600160a01b038616916370a0823191602480820192602092909190829003018186803b15801561153357600080fd5b50506001600d5550565b6005546001600160a01b031681565b6007546001600160a01b031681565b42841015611654576040805162461bcd60e51b815260206004820152601860248201527f45766d6f53776170455243323056323a20455850495245440000000000000000604482015290519081900360640190fd5b6003546001600160a01b0380891660008181526004602090815260408083208054600180820190925582517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98186015280840196909652958d166060860152608085018c905260a085019590955260c08085018b90528151808603909101815260e08501825280519083012061190160f01b6101008601526101028501969096526101228085019690965280518085039096018652610142840180825286519683019690962095839052610162840180825286905260ff89166101828501526101a284018890526101c28401879052519193926101e280820193601f1981019281900390910190855afa15801561176f573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116158015906117a55750886001600160a01b0316816001600160a01b0316145b6117e05760405162461bcd60e51b81526004018080602001828103825260228152602001806124376022913960400191505060405180910390fd5b6117eb898989611eba565b505050505050505050565b600260209081526000928352604080842090915290825290205481565b60008163ffffffff161161186e576040805162461bcd60e51b815260206004820152601760248201527f45766d6f53776170506169723a204d5553542047542030000000000000000000604482015290519081900360640190fd5b6005546001600160a01b031633146118c7576040805162461bcd60e51b815260206004820152601760248201527622bb36b7a9bbb0b82830b4b91d102327a92124a22222a760491b604482015290519081900360640190fd5b6103e88163ffffffff161115611924576040805162461bcd60e51b815260206004820152601b60248201527f45766d6f53776170506169723a20464f5242494444454e5f4645450000000000604482015290519081900360640190fd5b600c805463ffffffff191663ffffffff92909216919091179055565b600d5460011461198e576040805162461bcd60e51b8152602060048201526014602482015273115d9b5bd4ddd85c14185a5c8e881313d0d2d15160621b604482015290519081900360640190fd5b6000600d55600654604080516370a0823160e01b81523060048201529051611a9e926001600160a01b0316916370a08231916024808301926020929190829003018186803b1580156119df57600080fd5b505afa1580156119f3573d6000803e3d6000fd5b505050506040513d6020811015611a0957600080fd5b5051600754604080516370a0823160e01b815230600482015290516001600160a01b03909216916370a0823191602480820192602092909190829003018186803b158015611a5657600080fd5b505afa158015611a6a573d6000803e3d6000fd5b505050506040513d6020811015611a8057600080fd5b50516008546001600160701b0380821691600160701b900416611cf2565b6001600d55565b604080518082018252601981527f7472616e7366657228616464726573732c75696e74323536290000000000000060209182015281516001600160a01b0385811660248301526044808301869052845180840390910181526064909201845291810180516001600160e01b031663a9059cbb60e01b1781529251815160009460609489169392918291908083835b60208310611b525780518252601f199092019160209182019101611b33565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114611bb4576040519150601f19603f3d011682016040523d82523d6000602084013e611bb9565b606091505b5091509150818015611be7575080511580611be75750808060200190516020811015611be457600080fd5b50515b611c38576040805162461bcd60e51b815260206004820152601d60248201527f45766d6f53776170506169723a205452414e534645525f4641494c4544000000604482015290519081900360640190fd5b5050505050565b6000811580611c5a57505080820282828281611c5757fe5b04145b610be5576040805162461bcd60e51b815260206004820152601460248201527364732d6d6174682d6d756c2d6f766572666c6f7760601b604482015290519081900360640190fd5b80820382811115610be5576040805162461bcd60e51b815260206004820152601560248201527464732d6d6174682d7375622d756e646572666c6f7760581b604482015290519081900360640190fd5b6001600160701b038411801590611d1057506001600160701b038311155b611d5a576040805162461bcd60e51b815260206004820152601660248201527545766d6f53776170506169723a204f564552464c4f5760501b604482015290519081900360640190fd5b60085463ffffffff42811691600160e01b90048116820390811615801590611d8a57506001600160701b03841615155b8015611d9e57506001600160701b03831615155b15611e0f578063ffffffff16611dcc85611db7866122e7565b6001600160e01b03169063ffffffff6122f916565b600980546001600160e01b03929092169290920201905563ffffffff8116611df784611db7876122e7565b600a80546001600160e01b0392909216929092020190555b600880546dffffffffffffffffffffffffffff19166001600160701b03888116919091176dffffffffffffffffffffffffffff60701b1916600160701b8883168102919091176001600160e01b0316600160e01b63ffffffff871602179283905560408051848416815291909304909116602082015281517f1c411e9a96e071241c2f21f7726b17ae89e3cab4c78be50e062b03a9fffbbad1929181900390910190a1505050505050565b6001600160a01b03808416600081815260026020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6001600160a01b038316600090815260016020526040902054611f45908263ffffffff611ca216565b6001600160a01b038085166000908152600160205260408082209390935590841681522054611f7a908263ffffffff61231e16565b6001600160a01b0380841660008181526001602090815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b600080600560009054906101000a90046001600160a01b03166001600160a01b031663017e7e586040518163ffffffff1660e01b815260040160206040518083038186803b15801561202757600080fd5b505afa15801561203b573d6000803e3d6000fd5b505050506040513d602081101561205157600080fd5b5051600b546001600160a01b038216158015945091925090612135578015612130576000612094610f316001600160701b0388811690881663ffffffff611c3f16565b905060006120a183612149565b90508082111561212d5760006120d46008610aac6120c5868663ffffffff611ca216565b6000549063ffffffff611c3f16565b905060006121096120ec84600863ffffffff611c3f16565b6120fd86601163ffffffff611c3f16565b9063ffffffff61231e16565b9050600081838161211657fe5b049050801561212957612129878261219b565b5050505b50505b612141565b8015612141576000600b555b505092915050565b6000600382111561218c575080600160028204015b818110156121865780915060028182858161217557fe5b04018161217e57fe5b04905061215e565b50612196565b8115612196575060015b919050565b6000546121ae908263ffffffff61231e16565b60009081556001600160a01b0383168152600160205260409020546121d9908263ffffffff61231e16565b6001600160a01b03831660008181526001602090815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b60008183106122405781612242565b825b9392505050565b6001600160a01b038216600090815260016020526040902054612272908263ffffffff611ca216565b6001600160a01b0383166000908152600160205260408120919091555461229f908263ffffffff611ca216565b60009081556040805183815290516001600160a01b038516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef919081900360200190a35050565b6001600160701b0316600160701b0290565b60006001600160701b0382166001600160e01b0384168161231657fe5b049392505050565b80820182811015610be5576040805162461bcd60e51b815260206004820152601460248201527364732d6d6174682d6164642d6f766572666c6f7760601b604482015290519081900360640190fdfe45766d6f53776170506169723a20494e53554646494349454e545f4f55545055545f414d4f554e5445766d6f53776170506169723a20494e53554646494349454e545f4c49515549444954595f4255524e454445766d6f53776170506169723a20494e53554646494349454e545f494e5055545f414d4f554e5445766d6f53776170506169723a20494e53554646494349454e545f4c495155494449545945766d6f53776170506169723a20494e53554646494349454e545f4c49515549444954595f4d494e54454445766d6f53776170455243323056323a20494e56414c49445f5349474e4154555245a265627a7a72315820dcce9cc6bbb83a843ec22e336c57cf90d5d2bafa7e5ef71045e505ca391f48b364736f6c63430005100032454950373132446f6d61696e28737472696e67206e616d652c737472696e672076657273696f6e2c75696e7432353620636861696e49642c6164647265737320766572696679696e67436f6e74726163742945766d6f53776170466163746f72793a204944454e544943414c5f414444524553534553a265627a7a723158205232c1c74361f84b3f2671c59beaff438825908c70ac8ae95693bd01d4972c6f64736f6c63430005100032",
  "devdoc": {
    "methods": {}
  },
  "userdoc": {
    "methods": {}
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1123,
        "contract": "contracts/swap/EvmoSwapFactory.sol:EvmoSwapFactory",
        "label": "feeTo",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1125,
        "contract": "contracts/swap/EvmoSwapFactory.sol:EvmoSwapFactory",
        "label": "feeToSetter",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 1128,
        "contract": "contracts/swap/EvmoSwapFactory.sol:EvmoSwapFactory",
        "label": "allPairs",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 1134,
        "contract": "contracts/swap/EvmoSwapFactory.sol:EvmoSwapFactory",
        "label": "getPair",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_address,t_address))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_mapping(t_address,t_address))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_address)"
      }
    }
  }
}