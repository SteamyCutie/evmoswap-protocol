{
  "address": "0x2be89b235825F9B1AB4B81d7a96875189A62b196",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_version",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "locktime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "actionType",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ts",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "error",
          "type": "bytes"
        }
      ],
      "name": "Error",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "prevSupply",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "supply",
          "type": "uint256"
        }
      ],
      "name": "Supply",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ts",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAXTIME",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MULTIPLIER",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WEEK",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_t",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_block",
          "type": "uint256"
        }
      ],
      "name": "balanceOfAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "checkpoint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_unlockTime",
          "type": "uint256"
        }
      ],
      "name": "createLock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_unlockTime",
          "type": "uint256"
        }
      ],
      "name": "createLockWithMc",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "depositFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "depositForWithMc",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emergency",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "epoch",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "getLastUserSlope",
      "outputs": [
        {
          "internalType": "int128",
          "name": "",
          "type": "int128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "increaseAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "increaseAmountWithMc",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_unlockTime",
          "type": "uint256"
        }
      ],
      "name": "increaseUnlockTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_unlockTime",
          "type": "uint256"
        }
      ],
      "name": "increaseUnlockTimeWithMc",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "locked",
      "outputs": [
        {
          "internalType": "int128",
          "name": "amount",
          "type": "int128"
        },
        {
          "internalType": "uint256",
          "name": "end",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "lockedEnd",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "masterchef",
      "outputs": [
        {
          "internalType": "contract IMasterChef",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pointHistory",
      "outputs": [
        {
          "internalType": "int128",
          "name": "bias",
          "type": "int128"
        },
        {
          "internalType": "int128",
          "name": "slope",
          "type": "int128"
        },
        {
          "internalType": "uint256",
          "name": "ts",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "blk",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardPool",
      "outputs": [
        {
          "internalType": "contract IRewardPool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setEmergency",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IMasterChef",
          "name": "_masterchef",
          "type": "address"
        }
      ],
      "name": "setMasterchef",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IRewardPool",
          "name": "_rewardPool",
          "type": "address"
        }
      ],
      "name": "setRewardPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_users",
          "type": "address[]"
        },
        {
          "internalType": "bool",
          "name": "_flag",
          "type": "bool"
        }
      ],
      "name": "setWhitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "slopeChanges",
      "outputs": [
        {
          "internalType": "int128",
          "name": "",
          "type": "int128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "supply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "t",
          "type": "uint256"
        }
      ],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_block",
          "type": "uint256"
        }
      ],
      "name": "totalSupplyAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userPointEpoch",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userPointHistory",
      "outputs": [
        {
          "internalType": "int128",
          "name": "bias",
          "type": "int128"
        },
        {
          "internalType": "int128",
          "name": "slope",
          "type": "int128"
        },
        {
          "internalType": "uint256",
          "name": "ts",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "blk",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_idx",
          "type": "uint256"
        }
      ],
      "name": "userPointHistoryTs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "whitelist",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawWithMc",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x1daef44e8ed447cd2e47ba9b808e63ed691554e05259b5121199d8734b20c402",
  "receipt": {
    "to": null,
    "from": "0x0aA282136b3924ca6767C4D5B9aad6f83bD40A9c",
    "contractAddress": "0x2be89b235825F9B1AB4B81d7a96875189A62b196",
    "transactionIndex": 4,
    "gasUsed": "3077397",
    "logsBloom": "0x00000000000000000000000000000000000400000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000020000000000040000000800000000000000000000000000000000400000000000000000000000000008000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000100020000000000000000000000000000000000",
    "blockHash": "0x102ff3194080658230506fc4712bdf12450374c3c0ea4921c24578e9d6baef69",
    "transactionHash": "0x1daef44e8ed447cd2e47ba9b808e63ed691554e05259b5121199d8734b20c402",
    "logs": [
      {
        "transactionIndex": 4,
        "blockNumber": 18403071,
        "transactionHash": "0x1daef44e8ed447cd2e47ba9b808e63ed691554e05259b5121199d8734b20c402",
        "address": "0x2be89b235825F9B1AB4B81d7a96875189A62b196",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000aa282136b3924ca6767c4d5b9aad6f83bd40a9c"
        ],
        "data": "0x",
        "logIndex": 6,
        "blockHash": "0x102ff3194080658230506fc4712bdf12450374c3c0ea4921c24578e9d6baef69"
      }
    ],
    "blockNumber": 18403071,
    "cumulativeGasUsed": "3645953",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xd41223b4Ed7e68275D3C567c237217Fbb2575568",
    "Vote Escrowed EMO",
    "veEMO",
    "veEMO_1.0.0"
  ],
  "solcInputHash": "3bc41652a2b989a3f25335a753feae44",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_version\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"locktime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"actionType\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ts\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"error\",\"type\":\"bytes\"}],\"name\":\"Error\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prevSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"}],\"name\":\"Supply\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ts\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAXTIME\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WEEK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_t\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"balanceOfAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkpoint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_unlockTime\",\"type\":\"uint256\"}],\"name\":\"createLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_unlockTime\",\"type\":\"uint256\"}],\"name\":\"createLockWithMc\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"depositFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"depositForWithMc\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergency\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getLastUserSlope\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"\",\"type\":\"int128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"increaseAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"increaseAmountWithMc\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_unlockTime\",\"type\":\"uint256\"}],\"name\":\"increaseUnlockTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_unlockTime\",\"type\":\"uint256\"}],\"name\":\"increaseUnlockTimeWithMc\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"locked\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"amount\",\"type\":\"int128\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"lockedEnd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"masterchef\",\"outputs\":[{\"internalType\":\"contract IMasterChef\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pointHistory\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"bias\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"slope\",\"type\":\"int128\"},{\"internalType\":\"uint256\",\"name\":\"ts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blk\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPool\",\"outputs\":[{\"internalType\":\"contract IRewardPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setEmergency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IMasterChef\",\"name\":\"_masterchef\",\"type\":\"address\"}],\"name\":\"setMasterchef\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRewardPool\",\"name\":\"_rewardPool\",\"type\":\"address\"}],\"name\":\"setRewardPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"_flag\",\"type\":\"bool\"}],\"name\":\"setWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"slopeChanges\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"\",\"type\":\"int128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"supply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"t\",\"type\":\"uint256\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"totalSupplyAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userPointEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userPointHistory\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"bias\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"slope\",\"type\":\"int128\"},{\"internalType\":\"uint256\",\"name\":\"ts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blk\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_idx\",\"type\":\"uint256\"}],\"name\":\"userPointHistoryTs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawWithMc\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"balanceOf(address)\":{\"params\":{\"addr\":\"User wallet address\"},\"returns\":{\"_0\":\"User voting power*\"}},\"balanceOf(address,uint256)\":{\"params\":{\"_t\":\"Epoch time to return voting power at\",\"addr\":\"User wallet address\"},\"returns\":{\"_0\":\"User voting power*\"}},\"balanceOfAt(address,uint256)\":{\"params\":{\"_block\":\"Block to calculate the voting power at\",\"addr\":\"User's wallet address\"},\"returns\":{\"_0\":\"Voting power*\"}},\"createLock(uint256,uint256)\":{\"params\":{\"_unlockTime\":\"Epoch time when tokens unlock, rounded down to whole weeks*\",\"_value\":\"Amount to deposit\"}},\"depositFor(address,uint256)\":{\"details\":\"Anyone (even a smart contract) can deposit for someone else, but cannot extend their locktime and deposit for a brand new user\",\"params\":{\"_addr\":\"User's wallet address\",\"_value\":\"Amount to add to user's lock*\"}},\"getLastUserSlope(address)\":{\"params\":{\"addr\":\"Address of the user wallet\"},\"returns\":{\"_0\":\"Value of the slope*\"}},\"increaseAmount(uint256)\":{\"params\":{\"_value\":\"Amount of tokens to deposit and add to the lock*\"}},\"increaseUnlockTime(uint256)\":{\"params\":{\"_unlockTime\":\"New epoch time for unlocking*\"}},\"lockedEnd(address)\":{\"params\":{\"_addr\":\"User wallet\"},\"returns\":{\"_0\":\"Epoch time of the lock end*\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setMasterchef(address)\":{\"params\":{\"_masterchef\":\"Address of masterchef\"}},\"setRewardPool(address)\":{\"params\":{\"_rewardPool\":\"Address of reward pool\"}},\"setWhitelist(address[],bool)\":{\"params\":{\"_flag\":\"True to allow or false to disallow\",\"_users\":\"A list of address\"}},\"totalSupply()\":{\"returns\":{\"_0\":\"Total voting power*\"}},\"totalSupply(uint256)\":{\"params\":{\"t\":\"Time to calculate the total voting power at\"},\"returns\":{\"_0\":\"Total voting power*\"}},\"totalSupplyAt(uint256)\":{\"params\":{\"_block\":\"Block to calculate the total voting power at\"},\"returns\":{\"_0\":\"Total voting power at `_block`*\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"userPointHistoryTs(address,uint256)\":{\"params\":{\"_addr\":\"User wallet address\",\"_idx\":\"User epoch number\"},\"returns\":{\"_0\":\"Epoch time of the checkpoint*\"}},\"withdraw()\":{\"details\":\"Only possible if the lock has expired*\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"balanceOf(address)\":{\"notice\":\"Get the current voting power for `msg.sender`\"},\"balanceOf(address,uint256)\":{\"notice\":\"Get the voting power for `msg.sender`\"},\"balanceOfAt(address,uint256)\":{\"notice\":\"Measure voting power of `addr` at block height `_block`\"},\"checkpoint()\":{\"notice\":\"Record global data to checkpoint*\"},\"createLock(uint256,uint256)\":{\"notice\":\"Deposit `_value` tokens for `msg.sender` and lock until `_unlock_time`\"},\"depositFor(address,uint256)\":{\"notice\":\"Deposit `_value` tokens for `_addr` and add to the lock\"},\"emergencyWithdraw()\":{\"notice\":\"Withdraw during emergency*\"},\"getLastUserSlope(address)\":{\"notice\":\"Get the most recently recorded rate of voting power decrease for `addr`\"},\"increaseAmount(uint256)\":{\"notice\":\"Deposit `_value` additional tokens for `msg.sender` without modifying the unlock time\"},\"increaseUnlockTime(uint256)\":{\"notice\":\"Extend the unlock time for `msg.sender` to `_unlock_time`\"},\"lockedEnd(address)\":{\"notice\":\"Get timestamp when `_addr`'s lock finishes\"},\"setEmergency()\":{\"notice\":\"Only set once\"},\"setMasterchef(address)\":{\"notice\":\"Only set once\"},\"setRewardPool(address)\":{\"notice\":\"Only set once\"},\"setWhitelist(address[],bool)\":{\"notice\":\"Sets a list of users who are allowed/denied to deposit\"},\"totalSupply()\":{\"notice\":\"Calculate current total voting power\"},\"totalSupply(uint256)\":{\"notice\":\"Calculate total voting power\"},\"totalSupplyAt(uint256)\":{\"notice\":\"Calculate total voting power at some point in the past\"},\"userPointHistoryTs(address,uint256)\":{\"notice\":\"Get the timestamp for checkpoint `_idx` for `_addr`\"},\"withdraw()\":{\"notice\":\"Withdraw all tokens for `msg.sender`\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/staking/VotingEscrow.sol\":\"VotingEscrow\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x15e2d5bd4c28a88548074c54d220e8086f638a71ed07e6b3ba5a70066fcf458d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0xca0c2396dbeb3503b51abf4248ebf77a1461edad513c01529df51850a012bee3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x8bbbc2f5c10065ee272592ae0a7a6ceb23de2fbd81564ee0bb015ecf404d5f61\",\"license\":\"MIT\"},\"contracts/interfaces/IMasterChef.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IOnwardIncentivesController.sol\\\";\\n\\ninterface IMasterChef {\\n    function owner() external view returns (address);\\n\\n    function emo() external view returns (address);\\n\\n    function startTime() external view returns (uint256);\\n\\n    function emoPerSecond() external view returns (uint256);\\n\\n    function poolLength() external view returns (uint256);\\n\\n    function totalAllocPoint() external view returns (uint256);\\n\\n    function TOKENLESS_PRODUCTION() external view returns (uint256);\\n\\n    function poolInfo(uint _pid) external view returns (\\n        address lpToken,\\n        uint256 workingSupply,\\n        bool boost,\\n        uint256 allocPoint,\\n        uint256 lastRewardTime,\\n        uint256 accEmoPerShare,\\n        address incentivesController);\\n\\n    function userInfo(uint _pid, address _user) external view returns (\\n        uint256 amount,\\n        uint256 workingAmount,\\n        uint256 rewardDebt);\\n\\n    // emo + bonus reward\\n    function pendingTokens(uint256 _pid, address _user) external view returns (address[] memory tokens, uint[] memory amounts);\\n\\n    // Transfers ownership of the contract to a new account (`newOwner`)\\n    function transferOwnership(address newOwner) external;\\n\\n    // Add a new lp to the pool. Can only be called by the owner.\\n    function add(uint256 _allocPoint, IERC20 _lpToken, IOnwardIncentivesController _incentivesController, bool _boost, bool _withUpdate) external;\\n\\n    // Update the given pool's EMO allocation point. Can only be called by the owner.\\n    function set(uint256 _pid, uint256 _allocPoint, IOnwardIncentivesController _incentivesController, bool _withUpdate) external;\\n\\n    // Update reward variables of the given pool to be up-to-date.\\n    function updatePool(uint256 _pid) external;\\n\\n    // Stake EMO tokens to MasterChef\\n    function enterStaking(uint256 _amount) external;\\n\\n    // Withdraw EMO tokens from STAKING.\\n    function leaveStaking(uint256 _amount) external;\\n\\n    // Deposit LP tokens to MasterChef for EMO allocation.\\n    function depositFor(address _user, uint256 _pid, uint256 _amount) external;\\n\\n    // Deposit LP tokens to MasterChef for EMO allocation.\\n    function deposit(uint _pid, uint _amount) external;\\n\\n    // Withdraw LP tokens from MasterChef.\\n    function withdraw(uint _pid, uint _amount) external;\\n\\n    function harvestAllRewards(address _user) external;\\n\\n    function emergencyWithdraw(uint256 _pid) external;\\n\\n    function setEmoPerSecond(uint256 _emoPerSecond) external;\\n}\",\"keccak256\":\"0x67d76c81ff3dfd358744e5c9a3aa634efd6335fe0309ef7255018ebb5ca85364\",\"license\":\"MIT\"},\"contracts/interfaces/IOnwardIncentivesController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IOnwardIncentivesController {\\n    function onReward(address user, uint256 newLpAmount) external;\\n\\n    function pendingTokens(address user) external view returns (uint256 pending);\\n\\n    function rewardToken() external view returns (IERC20);\\n\\n    function getNextIncentivesController() external view returns (address);\\n}\\n\",\"keccak256\":\"0x6671bd4d8674181b6c5d60076c6468fced9538a28c6ce5d85974a40610f1d3e4\",\"license\":\"MIT\"},\"contracts/interfaces/IRewardPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\ninterface IRewardPool {\\n    function depositFor(address _user, uint256 _amount) external returns(bool);\\n\\n    function withdrawFor(address _user, uint256 _principals) external returns(bool);\\n\\n    function emergencyWithdraw(address _user) external;\\n}\\n\",\"keccak256\":\"0x184ba86b6795f748d4e9d60e27d9f8e40149c1fac88bf449e43ee5b0640345e7\",\"license\":\"MIT\"},\"contracts/staking/VotingEscrow.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"../interfaces/IRewardPool.sol\\\";\\nimport \\\"../interfaces/IMasterChef.sol\\\";\\n\\ncontract VotingEscrow is Ownable, ReentrancyGuard {\\n    using SafeMath for uint256;\\n\\n    enum ActionType {DEPOSIT_FOR, CREATE_LOCK, INCREASE_LOCK_AMOUNT, INCREASE_UNLOCK_TIME}\\n\\n    uint256 public constant WEEK = 7 * 86400;\\n    uint256 public constant MAXTIME = 4 * 365 * 86400;  // 4 years\\n    uint256 public constant MULTIPLIER = 1e18;\\n\\n    struct Point {\\n        int128 bias;\\n        int128 slope;   // - dweight / dt\\n        uint256 ts;\\n        uint256 blk;    // block\\n    }\\n\\n    struct LockedBalance {\\n        int128 amount;\\n        uint256 end;\\n    }\\n\\n    string public name;\\n    string public symbol;\\n    string public version;\\n    uint8 public immutable decimals;\\n\\n    address public token;\\n    IRewardPool public rewardPool;\\n    uint256 public supply; // total amount of emo token\\n\\n    IMasterChef public masterchef;\\n\\n    mapping(address => LockedBalance) public locked;\\n\\n    bool public emergency;\\n\\n    uint256 public epoch;\\n    Point[100000000000000000000000000000] public pointHistory; // epoch -> point\\n    mapping(address => Point[1000000000]) public userPointHistory; // user -> Point[user_epoch]\\n    mapping(address => uint256) public userPointEpoch;\\n    mapping(uint256 => int128) public slopeChanges; // time -> slope change\\n\\n    mapping(address => bool) public whitelist; // Only EOA or contract whitelisted is allowed to deposit\\n\\n    event Deposit(address indexed provider, uint256 indexed locktime, uint256 value, uint actionType, uint256 ts);\\n    event Withdraw(address indexed provider, uint256 value, uint256 ts);\\n    event Supply(uint256 prevSupply, uint256 supply);\\n    event Error(bytes error);\\n\\n    modifier onlyEoaOrWhitelist(address addr) {\\n        require(tx.origin == msg.sender || whitelist[addr], \\\"Contract is not in the whitelist\\\");\\n        _;\\n    }\\n\\n    modifier notEmergency() {\\n        require(!emergency, \\\"In an emergency\\\");\\n        _;\\n    }\\n\\n    constructor(address _token, string memory _name, string memory _symbol, string memory _version) public {\\n        token = _token;\\n        pointHistory[0].blk = block.number;\\n        pointHistory[0].ts = block.timestamp;\\n\\n        decimals = ERC20(_token).decimals();\\n        name = _name;\\n        symbol = _symbol;\\n        version = _version;\\n    }\\n\\n    /**\\n    * @notice Sets a list of users who are allowed/denied to deposit\\n    * @param _users A list of address\\n    * @param _flag True to allow or false to disallow\\n    */\\n    function setWhitelist(address [] memory _users, bool _flag) external onlyOwner {\\n        for (uint i = 0; i < _users.length; i++) {\\n            whitelist[_users[i]] = _flag;\\n        }\\n    }\\n\\n    /**\\n    * @notice Only set once\\n    * @param _rewardPool Address of reward pool\\n    */\\n    function setRewardPool(IRewardPool _rewardPool) external onlyOwner {\\n        require(address(rewardPool) == address(0), \\\"RewardPool has been set\\\");\\n        rewardPool = _rewardPool;\\n        IERC20(token).approve(address(_rewardPool), uint256(~0));\\n    }\\n\\n    /**\\n    * @notice Only set once\\n    * @param _masterchef Address of masterchef\\n    */\\n    function setMasterchef(IMasterChef _masterchef) external onlyOwner {\\n        masterchef = _masterchef;\\n    }\\n\\n    /**\\n    * @notice Only set once\\n    */\\n    function setEmergency() external onlyOwner {\\n        emergency = true;\\n    }\\n\\n    /**\\n    * @notice Get the most recently recorded rate of voting power decrease for `addr`\\n    * @param addr Address of the user wallet\\n    * @return Value of the slope\\n    **/\\n    function getLastUserSlope(address addr) external view returns (int128) {\\n        uint256 uepoch = userPointEpoch[addr];\\n        return userPointHistory[addr][uepoch].slope;\\n    }\\n\\n    /**\\n    * @notice Get the timestamp for checkpoint `_idx` for `_addr`\\n    * @param _addr User wallet address\\n    * @param _idx User epoch number\\n    * @return Epoch time of the checkpoint\\n    **/\\n    function userPointHistoryTs(address _addr, uint256 _idx) external view returns (uint256) {\\n        return userPointHistory[_addr][_idx].ts;\\n    }\\n\\n    /**\\n    * @notice Get timestamp when `_addr`'s lock finishes\\n    * @param _addr User wallet\\n    * @return Epoch time of the lock end\\n    **/\\n    function lockedEnd(address _addr) external view returns (uint256) {\\n        return locked[_addr].end;\\n    }\\n\\n    /**\\n    * @notice Record global and per-user data to checkpoint\\n    * @param addr User's wallet address. No user checkpoint if 0x0\\n    * @param oldLocked Pevious locked amount / end lock time for the user\\n    * @param newLocked New locked amount / end lock time for the user\\n    **/\\n    function _checkpoint(address addr, LockedBalance memory oldLocked, LockedBalance memory newLocked) internal {\\n        Point memory uOld;\\n        Point memory uNew;\\n        int128 oldDslope = 0;\\n        int128 newDslope = 0;\\n        uint256 _epoch = epoch;\\n\\n        if (addr != address(0)) {\\n            if (oldLocked.end > block.timestamp && oldLocked.amount > 0) {\\n                uOld.slope = oldLocked.amount / int128(MAXTIME);\\n                uOld.bias = uOld.slope * (int128(oldLocked.end - block.timestamp));\\n            }\\n            if (newLocked.end > block.timestamp && newLocked.amount > 0) {\\n                uNew.slope = newLocked.amount / int128(MAXTIME);\\n                uNew.bias = uNew.slope * (int128(newLocked.end - block.timestamp));\\n            }\\n\\n            oldDslope = slopeChanges[oldLocked.end];\\n            if (newLocked.end != 0) {\\n                if (newLocked.end == oldLocked.end) {\\n                    newDslope = oldDslope;\\n                } else {\\n                    newDslope = slopeChanges[newLocked.end];\\n                }\\n            }\\n        }\\n\\n        Point memory lastPoint = Point({bias : 0, slope : 0, ts : block.timestamp, blk : block.number});\\n        if (_epoch > 0) {\\n            lastPoint = pointHistory[_epoch];\\n        }\\n        uint256 lastCheckpoint = lastPoint.ts;\\n\\n        Point memory initialLastPoint = Point({bias : lastPoint.bias, slope : lastPoint.slope, ts : lastPoint.ts, blk : lastPoint.blk});\\n        // dblock/dt\\n        uint256 blockSlope = 0;\\n        if (block.timestamp > lastPoint.ts) {\\n            blockSlope = MULTIPLIER * (block.number - lastPoint.blk) / (block.timestamp - lastPoint.ts);\\n        }\\n\\n        // Go over weeks to fill history and calculate what the current point is\\n        uint256 t_i = (lastCheckpoint / WEEK) * WEEK;\\n        for (uint i; i < 255; i++) {\\n            t_i += WEEK;\\n            int128 dSlope = 0;\\n            if (t_i > block.timestamp) {\\n                t_i = block.timestamp;\\n            } else {\\n                dSlope = slopeChanges[t_i];\\n            }\\n            lastPoint.bias -= (lastPoint.slope * (int128(t_i - lastCheckpoint)));\\n            lastPoint.slope += dSlope;\\n            if (lastPoint.bias < 0) {\\n                lastPoint.bias = 0;\\n            }\\n            // It will never happen,just in case\\n            if (lastPoint.slope < 0) {\\n                lastPoint.slope = 0;\\n            }\\n            lastCheckpoint = t_i;\\n            lastPoint.ts = t_i;\\n            lastPoint.blk = initialLastPoint.blk.add(blockSlope.mul(t_i.sub(initialLastPoint.ts)).div(MULTIPLIER));\\n            _epoch += 1;\\n            if (t_i == block.timestamp) {\\n                lastPoint.blk = block.number;\\n                break;\\n            } else {\\n                pointHistory[_epoch] = lastPoint;\\n            }\\n        }\\n\\n        epoch = _epoch;\\n\\n        if (addr != address(0)) {\\n            // If last point was in this block, the slope change has been applied already\\n            lastPoint.slope += (uNew.slope - uOld.slope);\\n            lastPoint.bias += (uNew.bias - uOld.bias);\\n            if (lastPoint.slope < 0) {\\n                lastPoint.slope = 0;\\n            }\\n            if (lastPoint.bias < 0) {\\n                lastPoint.bias = 0;\\n            }\\n        }\\n\\n        // Record the changed point into history\\n        pointHistory[_epoch] = lastPoint;\\n\\n        // avoid stack too deep\\n        address _addr = addr;\\n        if (_addr != address(0)) {\\n            // Schedule the slope changes (slope is going down)\\n            // We subtract new_user_slope from [newLocked.end]\\n            // and add old_user_slope to [oldLocked.end]\\n            if (oldLocked.end > block.timestamp) {\\n                oldDslope += uOld.slope;\\n                if (newLocked.end == oldLocked.end) {\\n                    oldDslope -= uNew.slope;\\n                }\\n                slopeChanges[oldLocked.end] = oldDslope;\\n            }\\n\\n            if (newLocked.end > block.timestamp) {\\n                if (newLocked.end > oldLocked.end) {\\n                    // old slope disappeared at this point\\n                    newDslope -= uNew.slope;\\n                    slopeChanges[newLocked.end] = newDslope;\\n                }\\n            }\\n\\n            // Now handle user history\\n            uint256 userEpoch = userPointEpoch[_addr] + 1;\\n\\n            userPointEpoch[_addr] = userEpoch;\\n            uNew.ts = block.timestamp;\\n            uNew.blk = block.number;\\n            userPointHistory[_addr][userEpoch] = uNew;\\n        }\\n    }\\n\\n    /**\\n    * @notice Deposit and lock tokens for a user\\n    * @param _addr User's wallet address\\n    * @param _value Amount to deposit\\n    * @param unlockTime New time when to unlock the tokens, or 0 if unchanged\\n    * @param lockedBalance Previous locked amount / timestamp\\n    **/\\n    function _depositFor(address _addr, uint256 _value, uint256 unlockTime, LockedBalance memory lockedBalance, ActionType actionType) internal {\\n        LockedBalance memory _locked = lockedBalance;\\n        uint256 supplyBefore = supply;\\n\\n        supply = supplyBefore.add(_value);\\n        LockedBalance memory oldLocked = LockedBalance({amount : _locked.amount, end : _locked.end});\\n        _locked.amount += int128(_value);\\n        if (unlockTime != 0) {\\n            _locked.end = unlockTime;\\n        }\\n        locked[_addr] = _locked;\\n\\n        // Possibilities:\\n        // Both old_locked.end could be current or expired (>/< block.timestamp)\\n        // value == 0 (extend lock) or value > 0 (add to lock or extend lock)\\n        // _locked.end > block.timestamp (always)\\n        _checkpoint(_addr, oldLocked, _locked);\\n\\n        if (_value != 0) {\\n            require(ERC20(token).transferFrom(_addr, address(this), _value), \\\"Transfer failed!\\\");\\n            require(rewardPool.depositFor(_addr, _value), \\\"Deposit into reward pool failed.\\\");\\n        }\\n\\n        emit Deposit(_addr, _locked.end, _value, uint(actionType), block.timestamp);\\n        emit Supply(supplyBefore, supplyBefore + _value);\\n    }\\n\\n    /**\\n    * @notice Record global data to checkpoint\\n    **/\\n    function checkpoint() external notEmergency {\\n        _checkpoint(address(0), LockedBalance({amount : 0, end : 0}), LockedBalance({amount : 0, end : 0}));\\n    }\\n\\n    /**\\n    * @notice Deposit `_value` tokens for `_addr` and add to the lock\\n    * @dev Anyone (even a smart contract) can deposit for someone else, but\\n    * cannot extend their locktime and deposit for a brand new user\\n    * @param _addr User's wallet address\\n    * @param _value Amount to add to user's lock\\n    **/\\n    function depositFor(address _addr, uint256 _value) public nonReentrant notEmergency {\\n        require(_value > 0, \\\"Need non-zero value\\\");\\n        LockedBalance memory _locked = locked[_addr];\\n        require(_locked.amount > 0, \\\"No existing lock found\\\");\\n        require(_locked.end > block.timestamp, \\\"Cannot add to expired lock. Withdraw\\\");\\n\\n        _depositFor(_addr, _value, 0, _locked, ActionType.DEPOSIT_FOR);\\n    }\\n\\n    function depositForWithMc(address _addr, uint256 _value) external {\\n        depositFor(_addr, _value);\\n        masterchef.harvestAllRewards(_addr);\\n    }\\n\\n    /**\\n    * @notice Deposit `_value` tokens for `msg.sender` and lock until `_unlock_time`\\n    * @param _value Amount to deposit\\n    * @param _unlockTime Epoch time when tokens unlock, rounded down to whole weeks\\n    **/\\n    function createLock(uint256 _value, uint256 _unlockTime) public nonReentrant notEmergency onlyEoaOrWhitelist(msg.sender) {\\n        require(_value > 0, \\\"Need non-zero value\\\");\\n\\n        // Locktime is rounded down to weeks\\n        uint256 unlockTime = (_unlockTime / WEEK) * WEEK;\\n        LockedBalance memory _locked = locked[msg.sender];\\n        require(_locked.amount == 0, \\\"Withdraw old tokens first\\\");\\n        require(unlockTime > block.timestamp, \\\"Can only lock until time in the future\\\");\\n        require(unlockTime <= block.timestamp + MAXTIME, \\\"Voting lock can be 4 years max\\\");\\n\\n        _depositFor(msg.sender, _value, unlockTime, _locked, ActionType.CREATE_LOCK);\\n    }\\n\\n    function createLockWithMc(uint256 _value, uint256 _unlockTime) external {\\n        createLock(_value, _unlockTime);\\n        masterchef.harvestAllRewards(msg.sender);\\n    }\\n\\n    /**\\n    * @notice Deposit `_value` additional tokens for `msg.sender`\\n    * without modifying the unlock time\\n    * @param _value Amount of tokens to deposit and add to the lock\\n    **/\\n    function increaseAmount(uint256 _value) public nonReentrant notEmergency onlyEoaOrWhitelist(msg.sender) {\\n        require(_value > 0, \\\"Need non-zero value\\\");\\n        LockedBalance memory _locked = locked[msg.sender];\\n        require(_locked.amount > 0, \\\"No existing lock found\\\");\\n        require(_locked.end > block.timestamp, \\\"Cannot add to expired lock. Withdraw\\\");\\n\\n        _depositFor(msg.sender, _value, 0, _locked, ActionType.INCREASE_LOCK_AMOUNT);\\n    }\\n\\n    function increaseAmountWithMc(uint256 _value) external {\\n        increaseAmount(_value);\\n        masterchef.harvestAllRewards(msg.sender);\\n    }\\n\\n    /**\\n    * @notice Extend the unlock time for `msg.sender` to `_unlock_time`\\n    * @param _unlockTime New epoch time for unlocking\\n    **/\\n    function increaseUnlockTime(uint256 _unlockTime) public nonReentrant notEmergency onlyEoaOrWhitelist(msg.sender) {\\n        LockedBalance memory _locked = locked[msg.sender];\\n        uint256 unlockTime = (_unlockTime / WEEK) * WEEK;\\n\\n        require(_locked.end > block.timestamp, \\\"Lock expired\\\");\\n        require(_locked.amount > 0, \\\"Nothing is locked\\\");\\n        require(unlockTime > _locked.end, \\\"Can only increase lock duration\\\");\\n        require(unlockTime <= block.timestamp + MAXTIME, \\\"Voting lock can be 4 years max\\\");\\n\\n        _depositFor(msg.sender, 0, unlockTime, _locked, ActionType.INCREASE_UNLOCK_TIME);\\n    }\\n\\n    function increaseUnlockTimeWithMc(uint256 _unlockTime) external {\\n        increaseUnlockTime(_unlockTime);\\n        masterchef.harvestAllRewards(msg.sender);\\n    }\\n\\n    /**\\n    * @notice Withdraw all tokens for `msg.sender`\\n    * @dev Only possible if the lock has expired\\n    **/\\n    function withdraw() public nonReentrant notEmergency {\\n        LockedBalance memory _locked = locked[msg.sender];\\n        require(block.timestamp >= _locked.end, \\\"The lock didn't expire\\\");\\n\\n        uint256 value = uint256(_locked.amount);\\n        LockedBalance memory oldLocked = locked[msg.sender];\\n        _locked.end = 0;\\n        _locked.amount = 0;\\n        locked[msg.sender] = _locked;\\n\\n        uint256 supplyBefore = supply;\\n        supply = supplyBefore.sub(value);\\n\\n        // oldLocked can have either expired <= timestamp or zero end\\n        // _locked has only 0 end\\n        // Both can have >= 0 amount\\n        _checkpoint(msg.sender, oldLocked, _locked);\\n        require(rewardPool.withdrawFor(msg.sender, value), \\\"Withdraw from reward pool failed.\\\");\\n        require(ERC20(token).transfer(msg.sender, value), \\\"Transfer failed!\\\");\\n\\n        emit Withdraw(msg.sender, value, block.timestamp);\\n        emit Supply(supplyBefore, supplyBefore - value);\\n    }\\n\\n    /**\\n    * @notice Withdraw during emergency\\n    **/\\n    function emergencyWithdraw() external {\\n        require(emergency, \\\"Only can be called in an emergency\\\");\\n\\n        LockedBalance storage _locked = locked[msg.sender];\\n        uint256 value = uint256(_locked.amount);\\n        try rewardPool.emergencyWithdraw(msg.sender) {\\n        } catch (bytes memory error) {\\n            emit Error(error);\\n        }\\n\\n        _locked.end = 0;\\n        _locked.amount = 0;\\n        if (supply >= value) {\\n            supply = supply - value;\\n        } else {\\n            supply = 0;\\n        }\\n        ERC20(token).transfer(msg.sender, value);\\n    }\\n\\n    function withdrawWithMc() external {\\n        withdraw();\\n        masterchef.harvestAllRewards(msg.sender);\\n    }\\n\\n    /**\\n    * The following ERC20/minime-compatible methods are not real balanceOf and supply!\\n    * They measure the weights for the purpose of voting, so they don't represent\\n    * real coins.\\n    **/\\n\\n    /**\\n    * @notice Binary search to estimate timestamp for block number\\n    * @param _block Block to find\\n    * @param maxEpoch Don't go beyond this epoch\\n    * @return Approximate timestamp for block\\n    **/\\n    function findBlockEpoch(uint256 _block, uint256 maxEpoch) internal view returns (uint256){\\n        // binary search\\n        uint256 _min = 0;\\n        uint256 _max = maxEpoch;\\n        for (uint i; i < 128; i++) {\\n            if (_min >= _max) {\\n                break;\\n            }\\n            uint256 _mid = (_min + _max + 1) / 2;\\n            if (pointHistory[_mid].blk <= _block) {\\n                _min = _mid;\\n            } else {\\n                _max = _mid - 1;\\n            }\\n        }\\n        return _min;\\n    }\\n\\n    /**\\n    * @notice Get the voting power for `msg.sender`\\n    * @param addr User wallet address\\n    * @param _t Epoch time to return voting power at\\n    * @return User voting power\\n    **/\\n    function balanceOf(address addr, uint256 _t) public view returns (uint256) {\\n        uint256 _epoch = userPointEpoch[addr];\\n        if (_epoch == 0) {\\n            return 0;\\n        } else {\\n            Point memory lastPoint = userPointHistory[addr][_epoch];\\n            lastPoint.bias -= lastPoint.slope * (int128(_t - lastPoint.ts));\\n            if (lastPoint.bias < 0) {\\n                lastPoint.bias = 0;\\n            }\\n            return uint256(lastPoint.bias);\\n        }\\n    }\\n\\n    /**\\n    * @notice Get the current voting power for `msg.sender`\\n    * @param addr User wallet address\\n    * @return User voting power\\n    **/\\n    function balanceOf(address addr) external view returns (uint256) {\\n        return balanceOf(addr, block.timestamp);\\n    }\\n\\n    /**\\n    * @notice Measure voting power of `addr` at block height `_block`\\n    * @param addr User's wallet address\\n    * @param _block Block to calculate the voting power at\\n    * @return Voting power\\n    **/\\n    function balanceOfAt(address addr, uint256 _block) external view returns (uint256) {\\n        require(_block <= block.number, \\\"Block should not be greater than current block!\\\");\\n\\n        uint256 _min = 0;\\n        uint256 _max = userPointEpoch[addr];\\n        for (uint i; i < 128; i++) {\\n            if (_min >= _max) {\\n                break;\\n            }\\n            uint256 _mid = (_min + _max + 1) / 2;\\n            if (userPointHistory[addr][_mid].blk <= _block) {\\n                _min = _mid;\\n            } else {\\n                _max = _mid - 1;\\n            }\\n        }\\n\\n        Point memory upoint = userPointHistory[addr][_min];\\n\\n        uint256 maxEpoch = epoch;\\n        uint256 _epoch = findBlockEpoch(_block, maxEpoch);\\n        Point memory point0 = pointHistory[_epoch];\\n        uint256 dBlock = 0;\\n        uint256 dT = 0;\\n        if (_epoch < maxEpoch) {\\n            Point memory point1 = pointHistory[_epoch + 1];\\n            dBlock = point1.blk.sub(point0.blk);\\n            dT = point1.ts.sub(point0.ts);\\n        } else {\\n            dBlock = block.number.sub(point0.blk);\\n            dT = block.timestamp.sub(point0.ts);\\n        }\\n        uint256 blockTime = point0.ts;\\n        if (dBlock != 0) {\\n            blockTime += dT * (_block.sub(point0.blk)) / dBlock;\\n        }\\n\\n        upoint.bias -= upoint.slope * int128(blockTime - upoint.ts);\\n        if (upoint.bias >= 0) {\\n            return uint256(upoint.bias);\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    /**\\n    * @notice Calculate total voting power at some point in the past\\n    * @param point The point (bias/slope) to start search from\\n    * @param t Time to calculate the total voting power at\\n    * @return Total voting power at that time\\n    **/\\n    function supplyAt(Point memory point, uint256 t) internal view returns (uint256) {\\n        Point memory lastPoint = point;\\n        uint256 t_i = (lastPoint.ts / WEEK) * WEEK;\\n        for (uint i; i < 255; i++) {\\n            t_i += WEEK;\\n            int128 dSlope = 0;\\n            if (t_i > t) {\\n                t_i = t;\\n            } else {\\n                dSlope = slopeChanges[t_i];\\n            }\\n            lastPoint.bias -= lastPoint.slope * int128(t_i - lastPoint.ts);\\n            if (t_i == t) {\\n                break;\\n            }\\n            lastPoint.slope += dSlope;\\n            lastPoint.ts = t_i;\\n        }\\n\\n        if (lastPoint.bias < 0) {\\n            lastPoint.bias = 0;\\n        }\\n        return uint256(lastPoint.bias);\\n    }\\n\\n    /**\\n    * @notice Calculate total voting power\\n    * @param t Time to calculate the total voting power at\\n    * @return Total voting power\\n    **/\\n    function totalSupply(uint256 t) public view returns (uint256) {\\n        Point memory lastPoint = pointHistory[epoch];\\n        return supplyAt(lastPoint, t);\\n    }\\n\\n    /**\\n    * @notice Calculate current total voting power\\n    * @return Total voting power\\n    **/\\n    function totalSupply() external view returns (uint256) {\\n        return totalSupply(block.timestamp);\\n    }\\n\\n    /**\\n    * @notice Calculate total voting power at some point in the past\\n    * @param _block Block to calculate the total voting power at\\n    * @return Total voting power at `_block`\\n    **/\\n    function totalSupplyAt(uint256 _block) external view returns (uint256) {\\n        require(_block <= block.number, \\\"Block should not be greater than current block!\\\");\\n        uint256 _epoch = epoch;\\n        uint256 targetEpoch = findBlockEpoch(_block, _epoch);\\n\\n        Point memory point = pointHistory[targetEpoch];\\n        uint256 dt = 0;\\n        if (targetEpoch < _epoch) {\\n            Point memory nextPoint = pointHistory[targetEpoch + 1];\\n            if (point.blk != nextPoint.blk) {\\n                dt = (_block - point.blk) * (nextPoint.ts - point.ts) / (nextPoint.blk - point.blk);\\n            }\\n        } else {\\n            if (point.blk != block.number) {\\n                dt = (_block - point.blk) * (block.timestamp - point.ts) / (block.number - point.blk);\\n            }\\n        }\\n\\n        // Now dt contains info on how far are we beyond point\\n        return supplyAt(point, point.ts + dt);\\n    }\\n}\",\"keccak256\":\"0x44449dd35fe9ba6892acb2e51087065a76f3ba9804165dea74090fe6eda0a592\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b5060405162003728380380620037288339810160408190526200003491620002e1565b6000620000406200019a565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35060018055600580546001600160a01b0319166001600160a01b03861690811790915543600e5542600d556040805163313ce56760e01b8152905163313ce56791600480820192602092909190829003018186803b158015620000eb57600080fd5b505afa15801562000100573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200012691906200038e565b60f81b7fff00000000000000000000000000000000000000000000000000000000000000166080528251620001639060029060208601906200019e565b508151620001799060039060208501906200019e565b5080516200018f9060049060208401906200019e565b5050505050620003b8565b3390565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620001e157805160ff191683800117855562000211565b8280016001018555821562000211579182015b8281111562000211578251825591602001919060010190620001f4565b506200021f92915062000223565b5090565b5b808211156200021f576000815560010162000224565b600082601f8301126200024b578081fd5b81516001600160401b038082111562000262578283fd5b6040516020601f8401601f191682018101838111838210171562000284578586fd5b80604052508194508382528681858801011115620002a157600080fd5b600092505b83831015620002c55785830181015182840182015291820191620002a6565b83831115620002d75760008185840101525b5050505092915050565b60008060008060808587031215620002f7578384fd5b84516001600160a01b03811681146200030e578485fd5b60208601519094506001600160401b03808211156200032b578485fd5b62000339888389016200023a565b945060408701519150808211156200034f578384fd5b6200035d888389016200023a565b9350606087015191508082111562000373578283fd5b5062000382878288016200023a565b91505092959194509250565b600060208284031215620003a0578081fd5b815160ff81168114620003b1578182fd5b9392505050565b60805160f81c613352620003d660003980610a1252506133526000f3fe608060405234801561001057600080fd5b50600436106102945760003560e01c80638ad4c44711610167578063caa6fea4116100ce578063f2fde38b11610087578063f2fde38b14610548578063f3a6d6081461055b578063f4359ce51461057b578063f52a36f714610583578063fb1db27814610596578063fc0c546a1461059e57610294565b8063caa6fea4146104e9578063cbf9fe5f146104f1578063db2e21bc14610512578063dd8683221461051a578063eac6a6671461052d578063ee00ef3a1461054057610294565b80639b19251a116101205780639b19251a14610475578063a7095e8114610495578063b52c05fe146104a8578063bd85b039146104bb578063bdc36ac9146104ce578063c2c4c5c1146104e157610294565b80638ad4c447146104245780638da5cb5b14610437578063900cf0cf1461043f578063933baa861461044757806395d89b411461045a578063981b24d01461046257610294565b80633ccfd60b1161020b57806370a08231116101c457806370a08231146103c8578063715018a6146103db5780637805e700146103e357806378238c37146103eb5780637c616fe6146103fe57806381fc83bb1461041157610294565b80633ccfd60b146103755780634deafcae1461037d5780634ee2cd7e1461039057806354fd4d50146103a357806358afefcc146103ab57806366666aa9146103b357610294565b806315456eba1161025d57806315456eba146102fc57806318160ddd1461030f5780632f4f21e214610317578063313ce5671461032a57806334d901a41461033f5780633c271a051461036257610294565b8062fdd58e14610299578063047fc9aa146102c2578063059f8b16146102ca57806306fdde03146102d257806309e1c897146102e7575b600080fd5b6102ac6102a7366004612aec565b6105a6565b6040516102b99190613294565b60405180910390f35b6102ac610691565b6102ac610697565b6102da6106a3565b6040516102b99190612cd2565b6102fa6102f5366004612aec565b61072e565b005b6102fa61030a366004612bf2565b61079e565b6102ac6108fb565b6102fa610325366004612aec565b61090b565b610332610a10565b6040516102b991906132c1565b61035261034d366004612aec565b610a34565b6040516102b99493929190612cf3565b6102fa610370366004612b17565b610a84565b6102fa610b2b565b6102ac61038b366004612ad0565b610e28565b6102ac61039e366004612aec565b610e46565b6102da611165565b6102fa6111c0565b6103bb61120e565b6040516102b99190612c76565b6102ac6103d6366004612ad0565b61121d565b6102fa611229565b6102fa6112b2565b6102fa6103f9366004612ad0565b61131e565b6102fa61040c366004612bf2565b611427565b6102ac61041f366004612ad0565b6115ac565b610352610432366004612bf2565b6115ca565b6103bb61160a565b6102ac611619565b6102fa610455366004612ad0565b61161f565b6102da611680565b6102ac610470366004612bf2565b6116db565b610488610483366004612ad0565b611876565b6040516102b99190612cc7565b6102fa6104a3366004612c0a565b611897565b6102fa6104b6366004612c0a565b6118d1565b6102ac6104c9366004612bf2565b611a4f565b6102fa6104dc366004612bf2565b611ad1565b6102fa611b3f565b610488611ba2565b6105046104ff366004612ad0565b611bab565b6040516102b9929190612d16565b6102fa611bcb565b6102fa610528366004612bf2565b611d84565b6102ac61053b366004612aec565b611d8d565b6102ac611dcf565b6102fa610556366004612ad0565b611dd7565b61056e610569366004612ad0565b611e97565b6040516102b99190612ce5565b6102ac611ef6565b61056e610591366004612bf2565b611efd565b6103bb611f1e565b6103bb611f2d565b6001600160a01b03821660009081526c03c95a2f0b4856475fe000000d6020526040812054806105da57600091505061068b565b6105e2612a75565b6001600160a01b03851660009081526c03c95a2f0b4856475fe000000c6020526040902082633b9aca00811061061457fe5b60408051608081018252600392909202929092018054600160801b8104600f90810b810b810b602085018190526001840154958501869052600290930154606085015293880390910290830b830b830b03820b820b8082529092506000910b121561067e57600081525b51600f0b915061068b9050565b92915050565b60075481565b670de0b6b3a764000081565b6002805460408051602060018416156101000260001901909316849004601f810184900484028201840190925281815292918301828280156107265780601f106106fb57610100808354040283529160200191610726565b820191906000526020600020905b81548152906001019060200180831161070957829003601f168201915b505050505081565b610738828261090b565b600854604051637df367b560e11b81526001600160a01b039091169063fbe6cf6a90610768908590600401612c76565b600060405180830381600087803b15801561078257600080fd5b505af1158015610796573d6000803e3d6000fd5b505050505050565b600260015414156107ca5760405162461bcd60e51b81526004016107c19061322d565b60405180910390fd5b6002600155600a5460ff16156107f25760405162461bcd60e51b81526004016107c190612f30565b333281148061082557506001600160a01b03811660009081526c03c95a2f0b4856475fe000000f602052604090205460ff165b6108415760405162461bcd60e51b81526004016107c190612d29565b600082116108615760405162461bcd60e51b81526004016107c190613164565b610869612aa3565b5033600090815260096020908152604080832081518083019092528054600f90810b810b810b808452600190920154938301939093529092910b136108c05760405162461bcd60e51b81526004016107c1906131fd565b428160200151116108e35760405162461bcd60e51b81526004016107c190612da4565b6108f233846000846002611f3c565b50506001805550565b600061090642611a4f565b905090565b6002600154141561092e5760405162461bcd60e51b81526004016107c19061322d565b6002600155600a5460ff16156109565760405162461bcd60e51b81526004016107c190612f30565b600081116109765760405162461bcd60e51b81526004016107c190613164565b61097e612aa3565b506001600160a01b038216600090815260096020908152604080832081518083019092528054600f90810b810b810b808452600190920154938301939093529092910b136109de5760405162461bcd60e51b81526004016107c1906131fd565b42816020015111610a015760405162461bcd60e51b81526004016107c190612da4565b6108f283836000846000611f3c565b7f000000000000000000000000000000000000000000000000000000000000000081565b6c03c95a2f0b4856475fe000000c60205281600052604060002081633b9aca008110610a5c57fe5b6003020180546001820154600290920154600f82810b9550600160801b90920490910b925084565b610a8c6121c9565b6001600160a01b0316610a9d61160a565b6001600160a01b031614610ac35760405162461bcd60e51b81526004016107c1906130b7565b60005b8251811015610b2657816c03c95a2f0b4856475fe000000f6000858481518110610aec57fe5b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff1916911515919091179055600101610ac6565b505050565b60026001541415610b4e5760405162461bcd60e51b81526004016107c19061322d565b6002600155600a5460ff1615610b765760405162461bcd60e51b81526004016107c190612f30565b610b7e612aa3565b503360009081526009602090815260409182902082518084019093528054600f90810b810b900b835260010154908201819052421015610bd05760405162461bcd60e51b81526004016107c190613264565b8051600f0b610bdd612aa3565b5033600081815260096020818152604080842081518083019092528054600f81810b810b810b8452600183018054858701528a8601888152888c529890975294909352875190930b6001600160801b03166001600160801b03199092169190911790915591519055600754610c5281846121cd565b600755610c603383866121f5565b600654604051636da8c6d960e11b81526001600160a01b039091169063db518db290610c929033908790600401612c8a565b602060405180830381600087803b158015610cac57600080fd5b505af1158015610cc0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ce49190612bd6565b610d005760405162461bcd60e51b81526004016107c1906130ec565b60055460405163a9059cbb60e01b81526001600160a01b039091169063a9059cbb90610d329033908790600401612c8a565b602060405180830381600087803b158015610d4c57600080fd5b505af1158015610d60573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d849190612bd6565b610da05760405162461bcd60e51b81526004016107c190613015565b336001600160a01b03167ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b5688442604051610ddb92919061329d565b60405180910390a27f5e2aa66efd74cce82b21852e317e5490d9ecc9e6bb953ae24d90851258cc2f5c81848303604051610e1692919061329d565b60405180910390a15050600180555050565b6001600160a01b031660009081526009602052604090206001015490565b600043821115610e685760405162461bcd60e51b81526004016107c190612f9b565b6001600160a01b03831660009081526c03c95a2f0b4856475fe000000d6020526040812054815b6080811015610f0757818310610ea457610f07565b6001600160a01b03861660009081526c03c95a2f0b4856475fe000000c6020526040902060028385016001010490869082633b9aca008110610ee257fe5b600302016002015411610ef757809350610efe565b6001810392505b50600101610e8f565b50610f10612a75565b6001600160a01b03861660009081526c03c95a2f0b4856475fe000000c6020526040902083633b9aca008110610f4257fe5b60408051608081018252600392909202929092018054600f81810b810b810b8452600160801b909104810b810b900b60208301526001810154928201929092526002909101546060820152600b549091506000610f9f87836128a2565b9050610fa9612a75565b600c82680a18f07d736b90be55601d1b8110610fc157fe5b60408051608081018252600392909202929092018054600f81810b810b810b8452600160801b909104810b810b900b602083015260018101549282019290925260029091015460608201529050600080848410156110be57611021612a75565b600c85600101680a18f07d736b90be55601d1b811061103c57fe5b60408051608081018252600392909202929092018054600f81810b810b810b8452600160801b909104810b810b900b60208301526001810154928201929092526002909101546060808301829052860151919250611099916121cd565b92506110b6846040015182604001516121cd90919063ffffffff16565b9150506110ea565b60608301516110ce9043906121cd565b91506110e78360400151426121cd90919063ffffffff16565b90505b60408301518215611119578261110d85606001518d6121cd90919063ffffffff16565b83028161111657fe5b04015b604087015160208801518851918303029003600f90810b810b8089526000910b126111535750509351600f0b965061068b95505050505050565b6000995050505050505050505061068b565b6004805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156107265780601f106106fb57610100808354040283529160200191610726565b6111c86121c9565b6001600160a01b03166111d961160a565b6001600160a01b0316146111ff5760405162461bcd60e51b81526004016107c1906130b7565b600a805460ff19166001179055565b6006546001600160a01b031681565b600061068b82426105a6565b6112316121c9565b6001600160a01b031661124261160a565b6001600160a01b0316146112685760405162461bcd60e51b81526004016107c1906130b7565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6112ba610b2b565b600854604051637df367b560e11b81526001600160a01b039091169063fbe6cf6a906112ea903390600401612c76565b600060405180830381600087803b15801561130457600080fd5b505af1158015611318573d6000803e3d6000fd5b50505050565b6113266121c9565b6001600160a01b031661133761160a565b6001600160a01b03161461135d5760405162461bcd60e51b81526004016107c1906130b7565b6006546001600160a01b0316156113865760405162461bcd60e51b81526004016107c190612de8565b600680546001600160a01b0319166001600160a01b038381169190911790915560055460405163095ea7b360e01b815291169063095ea7b3906113d190849060001990600401612c8a565b602060405180830381600087803b1580156113eb57600080fd5b505af11580156113ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114239190612bd6565b5050565b6002600154141561144a5760405162461bcd60e51b81526004016107c19061322d565b6002600155600a5460ff16156114725760405162461bcd60e51b81526004016107c190612f30565b33328114806114a557506001600160a01b03811660009081526c03c95a2f0b4856475fe000000f602052604090205460ff165b6114c15760405162461bcd60e51b81526004016107c190612d29565b6114c9612aa3565b503360009081526009602090815260409182902082518084019093528054600f90810b810b900b83526001015490820181905262093a80808504029042106115235760405162461bcd60e51b81526004016107c1906131d7565b60008260000151600f0b1361154a5760405162461bcd60e51b81526004016107c190612fea565b8160200151811161156d5760405162461bcd60e51b81526004016107c190612e56565b630784ce0042018111156115935760405162461bcd60e51b81526004016107c190613080565b6115a233600083856003611f3c565b5050600180555050565b6c03c95a2f0b4856475fe000000d6020526000908152604090205481565b600c81680a18f07d736b90be55601d1b81106115e257fe5b6003020180546001820154600290920154600f82810b9450600160801b90920490910b919084565b6000546001600160a01b031690565b600b5481565b6116276121c9565b6001600160a01b031661163861160a565b6001600160a01b03161461165e5760405162461bcd60e51b81526004016107c1906130b7565b600880546001600160a01b0319166001600160a01b0392909216919091179055565b6003805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156107265780601f106106fb57610100808354040283529160200191610726565b6000438211156116fd5760405162461bcd60e51b81526004016107c190612f9b565b600b54600061170c84836128a2565b9050611716612a75565b600c82680a18f07d736b90be55601d1b811061172e57fe5b60408051608081018252600392909202929092018054600f81810b810b810b8452600160801b909104810b810b900b6020830152600181015492820192909252600290910154606082015290506000838310156118305761178d612a75565b600c84600101680a18f07d736b90be55601d1b81106117a857fe5b60408051608081018252600392909202929092018054600f81810b810b810b8452600160801b909104810b810b900b602083015260018101549282019290925260029091015460608083018290528501519192501461182a578260600151816060015103836040015182604001510384606001518903028161182657fe5b0491505b5061185c565b4382606001511461185c57816060015143038260400151420383606001518803028161185857fe5b0490505b61186c828284604001510161290e565b9695505050505050565b6c03c95a2f0b4856475fe000000f6020526000908152604090205460ff1681565b6118a182826118d1565b600854604051637df367b560e11b81526001600160a01b039091169063fbe6cf6a90610768903390600401612c76565b600260015414156118f45760405162461bcd60e51b81526004016107c19061322d565b6002600155600a5460ff161561191c5760405162461bcd60e51b81526004016107c190612f30565b333281148061194f57506001600160a01b03811660009081526c03c95a2f0b4856475fe000000f602052604090205460ff165b61196b5760405162461bcd60e51b81526004016107c190612d29565b6000831161198b5760405162461bcd60e51b81526004016107c190613164565b62093a808083040261199b612aa3565b503360009081526009602090815260409182902082518084019093528054600f90810b810b810b80855260019092015492840192909252900b156119f15760405162461bcd60e51b81526004016107c19061312d565b428211611a105760405162461bcd60e51b81526004016107c190613191565b630784ce004201821115611a365760405162461bcd60e51b81526004016107c190613080565b611a44338684846001611f3c565b505060018055505050565b6000611a59612a75565b600c600b54680a18f07d736b90be55601d1b8110611a7357fe5b60408051608081018252600392909202929092018054600f81810b810b810b8452600160801b909104810b810b900b602083015260018101549282019290925260029091015460608201529050611aca818461290e565b9392505050565b611ada8161079e565b600854604051637df367b560e11b81526001600160a01b039091169063fbe6cf6a90611b0a903390600401612c76565b600060405180830381600087803b158015611b2457600080fd5b505af1158015611b38573d6000803e3d6000fd5b5050505050565b600a5460ff1615611b625760405162461bcd60e51b81526004016107c190612f30565b611ba0600060405180604001604052806000600f0b8152602001600081525060405180604001604052806000600f0b815260200160008152506121f5565b565b600a5460ff1681565b60096020526000908152604090208054600190910154600f9190910b9082565b600a5460ff16611bed5760405162461bcd60e51b81526004016107c190612f59565b336000818152600960205260409081902080546006549251631bfc726f60e21b81529193600f91820b90910b926001600160a01b031691636ff1c9bc91611c3691600401612c76565b600060405180830381600087803b158015611c5057600080fd5b505af1925050508015611c61575060015b611cce573d808015611c8f576040519150601f19603f3d011682016040523d82523d6000602084013e611c94565b606091505b507fc75fb740d515c4fc862cc5c8f95343266e804872e7206e24f75751db41c4bcdc81604051611cc49190612cd2565b60405180910390a1505b6000600183015581546001600160801b03191682556007548111611cfa57600780548290039055611d00565b60006007555b60055460405163a9059cbb60e01b81526001600160a01b039091169063a9059cbb90611d329033908590600401612c8a565b602060405180830381600087803b158015611d4c57600080fd5b505af1158015611d60573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b269190612bd6565b611ada81611427565b6001600160a01b03821660009081526c03c95a2f0b4856475fe000000c6020526040812082633b9aca008110611dbf57fe5b6003020160010154905092915050565b630784ce0081565b611ddf6121c9565b6001600160a01b0316611df061160a565b6001600160a01b031614611e165760405162461bcd60e51b81526004016107c1906130b7565b6001600160a01b038116611e3c5760405162461bcd60e51b81526004016107c190612d5e565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b03811660009081526c03c95a2f0b4856475fe000000d60209081526040808320546c03c95a2f0b4856475fe000000c909252822081633b9aca008110611ee057fe5b6003020154600160801b9004600f0b9392505050565b62093a8081565b6c03c95a2f0b4856475fe000000e60205260009081526040902054600f0b81565b6008546001600160a01b031681565b6005546001600160a01b031681565b611f44612aa3565b506007548290611f5481876129e4565b600755611f5f612aa3565b50604080518082019091528251600f90810b82526020808501519083015283518801810b900b83528515611f9557602083018690525b6001600160a01b038816600090815260096020908152604090912084518154600f9190910b6001600160801b03166001600160801b031990911617815590840151600190910155611fe78882856121f5565b861561212f576005546040516323b872dd60e01b81526001600160a01b03909116906323b872dd90612021908b9030908c90600401612ca3565b602060405180830381600087803b15801561203b57600080fd5b505af115801561204f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120739190612bd6565b61208f5760405162461bcd60e51b81526004016107c190613015565b6006546040516317a790f160e11b81526001600160a01b0390911690632f4f21e2906120c1908b908b90600401612c8a565b602060405180830381600087803b1580156120db57600080fd5b505af11580156120ef573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121139190612bd6565b61212f5760405162461bcd60e51b81526004016107c190612efb565b8260200151886001600160a01b03167f7162984403f6c73c8639375d45a9187dfd04602231bd8e587c415718b5f7e5f98987600381111561216c57fe5b4260405161217c939291906132ab565b60405180910390a37f5e2aa66efd74cce82b21852e317e5490d9ecc9e6bb953ae24d90851258cc2f5c828884016040516121b792919061329d565b60405180910390a15050505050505050565b3390565b6000828211156121ef5760405162461bcd60e51b81526004016107c190612e8d565b50900390565b6121fd612a75565b612205612a75565b600b5460009081906001600160a01b0388161561231857428760200151118015612236575060008760000151600f0b135b15612262578651630784ce00600f91820b05810b810b602087810182905289015142900302810b900b85525b42866020015111801561227c575060008660000151600f0b135b156122a8578551630784ce00600f91820b05810b810b602086810182905288015142900302810b900b84525b60208088015160009081526c03c95a2f0b4856475fe000000e8252604090205490870151600f9190910b935015612318578660200151866020015114156122f157829150612318565b60208087015160009081526c03c95a2f0b4856475fe000000e9091526040902054600f0b91505b612320612a75565b506040805160808101825260008082526020820152429181019190915243606082015281156123af57600c82680a18f07d736b90be55601d1b811061236157fe5b60408051608081018252600392909202929092018054600f81810b810b810b8452600160801b909104810b810b900b6020830152600181015492820192909252600290910154606082015290505b60408101516123bc612a75565b60405180608001604052808460000151600f0b81526020018460200151600f0b8152602001846040015181526020018460600151815250905060008360400151421115612426578360400151420384606001514303670de0b6b3a7640000028161242257fe5b0490505b62093a808084040260005b60ff8110156125aa5762093a808201915060004283111561245457429250612474565b5060008281526c03c95a2f0b4856475fe000000e6020526040902054600f0b5b602087018051885188860382029003600f90810b810b808b52918401810b810b9092526000910b12156124a657600087525b60008760200151600f0b12156124be57600060208801525b8295508287604001818152505061250c612501670de0b6b3a76400006124fb6124f48960400151886121cd90919063ffffffff16565b8890612a09565b90612a43565b6060870151906129e4565b6060880152600197909701964283141561252c57504360608701526125aa565b86600c89680a18f07d736b90be55601d1b811061254557fe5b82516003919091029190910180546020840151600f90810b6001600160801b03908116600160801b029490910b81166001600160801b031990921691909117169190911781556040820151600182015560609091015160029091015550600101612431565b50600b8690556001600160a01b038d1615612616576020808b01518a82015191870180519190920301600f90810b810b918290528b518b51885191900301810b810b8752600091900b121561260157600060208601525b60008560000151600f0b121561261657600085525b84600c87680a18f07d736b90be55601d1b811061262f57fe5b82516003919091029190910180546020840151600f90810b6001600160801b03908116600160801b029490910b81166001600160801b03199092169190911716919091178155604082015160018201556060909101516002909101558c6001600160a01b0381161561289257428d602001511115612708578a60200151890198508c602001518c6020015114156126ca578960200151890398505b60208d81015160009081526c03c95a2f0b4856475fe000000e9091526040902080546001600160801b0319166001600160801b03600f8c900b161790555b428c602001511115612771578c602001518c602001511115612771576020808b01518d82015160009081526c03c95a2f0b4856475fe000000e9092526040909120805491909903600f81900b6001600160801b03166001600160801b0319909216919091179098555b60006c03c95a2f0b4856475fe000000d6000836001600160a01b03166001600160a01b03168152602001908152602001600020546001019050806c03c95a2f0b4856475fe000000d6000846001600160a01b03166001600160a01b0316815260200190815260200160002081905550428b6040018181525050438b60600181815250508a6c03c95a2f0b4856475fe000000c6000846001600160a01b03166001600160a01b0316815260200190815260200160002082633b9aca00811061283457fe5b82516003919091029190910180546020840151600f90810b6001600160801b03908116600160801b029490910b81166001600160801b0319909216919091171691909117815560408201516001820155606090910151600290910155505b5050505050505050505050505050565b60008082815b6080811015612904578183106128bd57612904565b60028284016001010486600c82680a18f07d736b90be55601d1b81106128df57fe5b6003020160020154116128f4578093506128fb565b6001810392505b506001016128a8565b5090949350505050565b6000612918612a75565b839050600062093a808083604001518161292e57fe5b0402905060005b60ff8110156129c25762093a808201915060008583111561295857859250612978565b5060008281526c03c95a2f0b4856475fe000000e6020526040902054600f0b5b604084015160208501518551918503029003600f90810b900b8452858314156129a157506129c2565b602084018051909101600f90810b900b905260408301829052600101612935565b5060008260000151600f0b12156129d857600082525b5051600f0b9392505050565b600082820183811015611aca5760405162461bcd60e51b81526004016107c190612e1f565b600082612a185750600061068b565b82820282848281612a2557fe5b0414611aca5760405162461bcd60e51b81526004016107c19061303f565b6000808211612a645760405162461bcd60e51b81526004016107c190612ec4565b818381612a6d57fe5b049392505050565b60405180608001604052806000600f0b81526020016000600f0b815260200160008152602001600081525090565b604080518082019091526000808252602082015290565b803561068b816132f6565b803561068b8161330e565b600060208284031215612ae1578081fd5b8135611aca816132f6565b60008060408385031215612afe578081fd5b8235612b09816132f6565b946020939093013593505050565b60008060408385031215612b29578182fd5b823567ffffffffffffffff80821115612b40578384fd5b818501915085601f830112612b53578384fd5b813581811115612b61578485fd5b60209150818102612b738382016132cf565b8281528381019085850183870186018b1015612b8d578889fd5b8896505b84871015612bb757612ba38b82612aba565b835260019690960195918501918501612b91565b5080975050505050612bcb86828701612ac5565b925050509250929050565b600060208284031215612be7578081fd5b8151611aca8161330e565b600060208284031215612c03578081fd5b5035919050565b60008060408385031215612c1c578182fd5b50508035926020909101359150565b60008151808452815b81811015612c5057602081850181015186830182015201612c34565b81811115612c615782602083870101525b50601f01601f19169290920160200192915050565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b901515815260200190565b600060208252611aca6020830184612c2b565b600f9190910b815260200190565b600f94850b81529290930b60208301526040820152606081019190915260800190565b600f9290920b8252602082015260400190565b6020808252818101527f436f6e7472616374206973206e6f7420696e207468652077686974656c697374604082015260600190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b60208082526024908201527f43616e6e6f742061646420746f2065787069726564206c6f636b2e20576974686040820152636472617760e01b606082015260800190565b60208082526017908201527f526577617264506f6f6c20686173206265656e20736574000000000000000000604082015260600190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b6020808252601f908201527f43616e206f6e6c7920696e637265617365206c6f636b206475726174696f6e00604082015260600190565b6020808252601e908201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604082015260600190565b6020808252601a908201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604082015260600190565b6020808252818101527f4465706f73697420696e746f2072657761726420706f6f6c206661696c65642e604082015260600190565b6020808252600f908201526e496e20616e20656d657267656e637960881b604082015260600190565b60208082526022908201527f4f6e6c792063616e2062652063616c6c656420696e20616e20656d657267656e604082015261637960f01b606082015260800190565b6020808252602f908201527f426c6f636b2073686f756c64206e6f742062652067726561746572207468616e60408201526e2063757272656e7420626c6f636b2160881b606082015260800190565b602080825260119082015270139bdd1a1a5b99c81a5cc81b1bd8dad959607a1b604082015260600190565b60208082526010908201526f5472616e73666572206661696c65642160801b604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b6020808252601e908201527f566f74696e67206c6f636b2063616e2062652034207965617273206d61780000604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526021908201527f57697468647261772066726f6d2072657761726420706f6f6c206661696c65646040820152601760f91b606082015260800190565b60208082526019908201527f5769746864726177206f6c6420746f6b656e7320666972737400000000000000604082015260600190565b6020808252601390820152724e656564206e6f6e2d7a65726f2076616c756560681b604082015260600190565b60208082526026908201527f43616e206f6e6c79206c6f636b20756e74696c2074696d6520696e207468652060408201526566757475726560d01b606082015260800190565b6020808252600c908201526b131bd8dac8195e1c1a5c995960a21b604082015260600190565b602080825260169082015275139bc8195e1a5cdd1a5b99c81b1bd8dac8199bdd5b9960521b604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b602080825260169082015275546865206c6f636b206469646e27742065787069726560501b604082015260600190565b90815260200190565b918252602082015260400190565b9283526020830191909152604082015260600190565b60ff91909116815260200190565b60405181810167ffffffffffffffff811182821017156132ee57600080fd5b604052919050565b6001600160a01b038116811461330b57600080fd5b50565b801515811461330b57600080fdfea2646970667358221220bbebc53a3871ac40712bfe3fb34b0edb29f86ecb9f4b13cb6e59130e63b9042e64736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102945760003560e01c80638ad4c44711610167578063caa6fea4116100ce578063f2fde38b11610087578063f2fde38b14610548578063f3a6d6081461055b578063f4359ce51461057b578063f52a36f714610583578063fb1db27814610596578063fc0c546a1461059e57610294565b8063caa6fea4146104e9578063cbf9fe5f146104f1578063db2e21bc14610512578063dd8683221461051a578063eac6a6671461052d578063ee00ef3a1461054057610294565b80639b19251a116101205780639b19251a14610475578063a7095e8114610495578063b52c05fe146104a8578063bd85b039146104bb578063bdc36ac9146104ce578063c2c4c5c1146104e157610294565b80638ad4c447146104245780638da5cb5b14610437578063900cf0cf1461043f578063933baa861461044757806395d89b411461045a578063981b24d01461046257610294565b80633ccfd60b1161020b57806370a08231116101c457806370a08231146103c8578063715018a6146103db5780637805e700146103e357806378238c37146103eb5780637c616fe6146103fe57806381fc83bb1461041157610294565b80633ccfd60b146103755780634deafcae1461037d5780634ee2cd7e1461039057806354fd4d50146103a357806358afefcc146103ab57806366666aa9146103b357610294565b806315456eba1161025d57806315456eba146102fc57806318160ddd1461030f5780632f4f21e214610317578063313ce5671461032a57806334d901a41461033f5780633c271a051461036257610294565b8062fdd58e14610299578063047fc9aa146102c2578063059f8b16146102ca57806306fdde03146102d257806309e1c897146102e7575b600080fd5b6102ac6102a7366004612aec565b6105a6565b6040516102b99190613294565b60405180910390f35b6102ac610691565b6102ac610697565b6102da6106a3565b6040516102b99190612cd2565b6102fa6102f5366004612aec565b61072e565b005b6102fa61030a366004612bf2565b61079e565b6102ac6108fb565b6102fa610325366004612aec565b61090b565b610332610a10565b6040516102b991906132c1565b61035261034d366004612aec565b610a34565b6040516102b99493929190612cf3565b6102fa610370366004612b17565b610a84565b6102fa610b2b565b6102ac61038b366004612ad0565b610e28565b6102ac61039e366004612aec565b610e46565b6102da611165565b6102fa6111c0565b6103bb61120e565b6040516102b99190612c76565b6102ac6103d6366004612ad0565b61121d565b6102fa611229565b6102fa6112b2565b6102fa6103f9366004612ad0565b61131e565b6102fa61040c366004612bf2565b611427565b6102ac61041f366004612ad0565b6115ac565b610352610432366004612bf2565b6115ca565b6103bb61160a565b6102ac611619565b6102fa610455366004612ad0565b61161f565b6102da611680565b6102ac610470366004612bf2565b6116db565b610488610483366004612ad0565b611876565b6040516102b99190612cc7565b6102fa6104a3366004612c0a565b611897565b6102fa6104b6366004612c0a565b6118d1565b6102ac6104c9366004612bf2565b611a4f565b6102fa6104dc366004612bf2565b611ad1565b6102fa611b3f565b610488611ba2565b6105046104ff366004612ad0565b611bab565b6040516102b9929190612d16565b6102fa611bcb565b6102fa610528366004612bf2565b611d84565b6102ac61053b366004612aec565b611d8d565b6102ac611dcf565b6102fa610556366004612ad0565b611dd7565b61056e610569366004612ad0565b611e97565b6040516102b99190612ce5565b6102ac611ef6565b61056e610591366004612bf2565b611efd565b6103bb611f1e565b6103bb611f2d565b6001600160a01b03821660009081526c03c95a2f0b4856475fe000000d6020526040812054806105da57600091505061068b565b6105e2612a75565b6001600160a01b03851660009081526c03c95a2f0b4856475fe000000c6020526040902082633b9aca00811061061457fe5b60408051608081018252600392909202929092018054600160801b8104600f90810b810b810b602085018190526001840154958501869052600290930154606085015293880390910290830b830b830b03820b820b8082529092506000910b121561067e57600081525b51600f0b915061068b9050565b92915050565b60075481565b670de0b6b3a764000081565b6002805460408051602060018416156101000260001901909316849004601f810184900484028201840190925281815292918301828280156107265780601f106106fb57610100808354040283529160200191610726565b820191906000526020600020905b81548152906001019060200180831161070957829003601f168201915b505050505081565b610738828261090b565b600854604051637df367b560e11b81526001600160a01b039091169063fbe6cf6a90610768908590600401612c76565b600060405180830381600087803b15801561078257600080fd5b505af1158015610796573d6000803e3d6000fd5b505050505050565b600260015414156107ca5760405162461bcd60e51b81526004016107c19061322d565b60405180910390fd5b6002600155600a5460ff16156107f25760405162461bcd60e51b81526004016107c190612f30565b333281148061082557506001600160a01b03811660009081526c03c95a2f0b4856475fe000000f602052604090205460ff165b6108415760405162461bcd60e51b81526004016107c190612d29565b600082116108615760405162461bcd60e51b81526004016107c190613164565b610869612aa3565b5033600090815260096020908152604080832081518083019092528054600f90810b810b810b808452600190920154938301939093529092910b136108c05760405162461bcd60e51b81526004016107c1906131fd565b428160200151116108e35760405162461bcd60e51b81526004016107c190612da4565b6108f233846000846002611f3c565b50506001805550565b600061090642611a4f565b905090565b6002600154141561092e5760405162461bcd60e51b81526004016107c19061322d565b6002600155600a5460ff16156109565760405162461bcd60e51b81526004016107c190612f30565b600081116109765760405162461bcd60e51b81526004016107c190613164565b61097e612aa3565b506001600160a01b038216600090815260096020908152604080832081518083019092528054600f90810b810b810b808452600190920154938301939093529092910b136109de5760405162461bcd60e51b81526004016107c1906131fd565b42816020015111610a015760405162461bcd60e51b81526004016107c190612da4565b6108f283836000846000611f3c565b7f000000000000000000000000000000000000000000000000000000000000000081565b6c03c95a2f0b4856475fe000000c60205281600052604060002081633b9aca008110610a5c57fe5b6003020180546001820154600290920154600f82810b9550600160801b90920490910b925084565b610a8c6121c9565b6001600160a01b0316610a9d61160a565b6001600160a01b031614610ac35760405162461bcd60e51b81526004016107c1906130b7565b60005b8251811015610b2657816c03c95a2f0b4856475fe000000f6000858481518110610aec57fe5b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff1916911515919091179055600101610ac6565b505050565b60026001541415610b4e5760405162461bcd60e51b81526004016107c19061322d565b6002600155600a5460ff1615610b765760405162461bcd60e51b81526004016107c190612f30565b610b7e612aa3565b503360009081526009602090815260409182902082518084019093528054600f90810b810b900b835260010154908201819052421015610bd05760405162461bcd60e51b81526004016107c190613264565b8051600f0b610bdd612aa3565b5033600081815260096020818152604080842081518083019092528054600f81810b810b810b8452600183018054858701528a8601888152888c529890975294909352875190930b6001600160801b03166001600160801b03199092169190911790915591519055600754610c5281846121cd565b600755610c603383866121f5565b600654604051636da8c6d960e11b81526001600160a01b039091169063db518db290610c929033908790600401612c8a565b602060405180830381600087803b158015610cac57600080fd5b505af1158015610cc0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ce49190612bd6565b610d005760405162461bcd60e51b81526004016107c1906130ec565b60055460405163a9059cbb60e01b81526001600160a01b039091169063a9059cbb90610d329033908790600401612c8a565b602060405180830381600087803b158015610d4c57600080fd5b505af1158015610d60573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d849190612bd6565b610da05760405162461bcd60e51b81526004016107c190613015565b336001600160a01b03167ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b5688442604051610ddb92919061329d565b60405180910390a27f5e2aa66efd74cce82b21852e317e5490d9ecc9e6bb953ae24d90851258cc2f5c81848303604051610e1692919061329d565b60405180910390a15050600180555050565b6001600160a01b031660009081526009602052604090206001015490565b600043821115610e685760405162461bcd60e51b81526004016107c190612f9b565b6001600160a01b03831660009081526c03c95a2f0b4856475fe000000d6020526040812054815b6080811015610f0757818310610ea457610f07565b6001600160a01b03861660009081526c03c95a2f0b4856475fe000000c6020526040902060028385016001010490869082633b9aca008110610ee257fe5b600302016002015411610ef757809350610efe565b6001810392505b50600101610e8f565b50610f10612a75565b6001600160a01b03861660009081526c03c95a2f0b4856475fe000000c6020526040902083633b9aca008110610f4257fe5b60408051608081018252600392909202929092018054600f81810b810b810b8452600160801b909104810b810b900b60208301526001810154928201929092526002909101546060820152600b549091506000610f9f87836128a2565b9050610fa9612a75565b600c82680a18f07d736b90be55601d1b8110610fc157fe5b60408051608081018252600392909202929092018054600f81810b810b810b8452600160801b909104810b810b900b602083015260018101549282019290925260029091015460608201529050600080848410156110be57611021612a75565b600c85600101680a18f07d736b90be55601d1b811061103c57fe5b60408051608081018252600392909202929092018054600f81810b810b810b8452600160801b909104810b810b900b60208301526001810154928201929092526002909101546060808301829052860151919250611099916121cd565b92506110b6846040015182604001516121cd90919063ffffffff16565b9150506110ea565b60608301516110ce9043906121cd565b91506110e78360400151426121cd90919063ffffffff16565b90505b60408301518215611119578261110d85606001518d6121cd90919063ffffffff16565b83028161111657fe5b04015b604087015160208801518851918303029003600f90810b810b8089526000910b126111535750509351600f0b965061068b95505050505050565b6000995050505050505050505061068b565b6004805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156107265780601f106106fb57610100808354040283529160200191610726565b6111c86121c9565b6001600160a01b03166111d961160a565b6001600160a01b0316146111ff5760405162461bcd60e51b81526004016107c1906130b7565b600a805460ff19166001179055565b6006546001600160a01b031681565b600061068b82426105a6565b6112316121c9565b6001600160a01b031661124261160a565b6001600160a01b0316146112685760405162461bcd60e51b81526004016107c1906130b7565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6112ba610b2b565b600854604051637df367b560e11b81526001600160a01b039091169063fbe6cf6a906112ea903390600401612c76565b600060405180830381600087803b15801561130457600080fd5b505af1158015611318573d6000803e3d6000fd5b50505050565b6113266121c9565b6001600160a01b031661133761160a565b6001600160a01b03161461135d5760405162461bcd60e51b81526004016107c1906130b7565b6006546001600160a01b0316156113865760405162461bcd60e51b81526004016107c190612de8565b600680546001600160a01b0319166001600160a01b038381169190911790915560055460405163095ea7b360e01b815291169063095ea7b3906113d190849060001990600401612c8a565b602060405180830381600087803b1580156113eb57600080fd5b505af11580156113ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114239190612bd6565b5050565b6002600154141561144a5760405162461bcd60e51b81526004016107c19061322d565b6002600155600a5460ff16156114725760405162461bcd60e51b81526004016107c190612f30565b33328114806114a557506001600160a01b03811660009081526c03c95a2f0b4856475fe000000f602052604090205460ff165b6114c15760405162461bcd60e51b81526004016107c190612d29565b6114c9612aa3565b503360009081526009602090815260409182902082518084019093528054600f90810b810b900b83526001015490820181905262093a80808504029042106115235760405162461bcd60e51b81526004016107c1906131d7565b60008260000151600f0b1361154a5760405162461bcd60e51b81526004016107c190612fea565b8160200151811161156d5760405162461bcd60e51b81526004016107c190612e56565b630784ce0042018111156115935760405162461bcd60e51b81526004016107c190613080565b6115a233600083856003611f3c565b5050600180555050565b6c03c95a2f0b4856475fe000000d6020526000908152604090205481565b600c81680a18f07d736b90be55601d1b81106115e257fe5b6003020180546001820154600290920154600f82810b9450600160801b90920490910b919084565b6000546001600160a01b031690565b600b5481565b6116276121c9565b6001600160a01b031661163861160a565b6001600160a01b03161461165e5760405162461bcd60e51b81526004016107c1906130b7565b600880546001600160a01b0319166001600160a01b0392909216919091179055565b6003805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156107265780601f106106fb57610100808354040283529160200191610726565b6000438211156116fd5760405162461bcd60e51b81526004016107c190612f9b565b600b54600061170c84836128a2565b9050611716612a75565b600c82680a18f07d736b90be55601d1b811061172e57fe5b60408051608081018252600392909202929092018054600f81810b810b810b8452600160801b909104810b810b900b6020830152600181015492820192909252600290910154606082015290506000838310156118305761178d612a75565b600c84600101680a18f07d736b90be55601d1b81106117a857fe5b60408051608081018252600392909202929092018054600f81810b810b810b8452600160801b909104810b810b900b602083015260018101549282019290925260029091015460608083018290528501519192501461182a578260600151816060015103836040015182604001510384606001518903028161182657fe5b0491505b5061185c565b4382606001511461185c57816060015143038260400151420383606001518803028161185857fe5b0490505b61186c828284604001510161290e565b9695505050505050565b6c03c95a2f0b4856475fe000000f6020526000908152604090205460ff1681565b6118a182826118d1565b600854604051637df367b560e11b81526001600160a01b039091169063fbe6cf6a90610768903390600401612c76565b600260015414156118f45760405162461bcd60e51b81526004016107c19061322d565b6002600155600a5460ff161561191c5760405162461bcd60e51b81526004016107c190612f30565b333281148061194f57506001600160a01b03811660009081526c03c95a2f0b4856475fe000000f602052604090205460ff165b61196b5760405162461bcd60e51b81526004016107c190612d29565b6000831161198b5760405162461bcd60e51b81526004016107c190613164565b62093a808083040261199b612aa3565b503360009081526009602090815260409182902082518084019093528054600f90810b810b810b80855260019092015492840192909252900b156119f15760405162461bcd60e51b81526004016107c19061312d565b428211611a105760405162461bcd60e51b81526004016107c190613191565b630784ce004201821115611a365760405162461bcd60e51b81526004016107c190613080565b611a44338684846001611f3c565b505060018055505050565b6000611a59612a75565b600c600b54680a18f07d736b90be55601d1b8110611a7357fe5b60408051608081018252600392909202929092018054600f81810b810b810b8452600160801b909104810b810b900b602083015260018101549282019290925260029091015460608201529050611aca818461290e565b9392505050565b611ada8161079e565b600854604051637df367b560e11b81526001600160a01b039091169063fbe6cf6a90611b0a903390600401612c76565b600060405180830381600087803b158015611b2457600080fd5b505af1158015611b38573d6000803e3d6000fd5b5050505050565b600a5460ff1615611b625760405162461bcd60e51b81526004016107c190612f30565b611ba0600060405180604001604052806000600f0b8152602001600081525060405180604001604052806000600f0b815260200160008152506121f5565b565b600a5460ff1681565b60096020526000908152604090208054600190910154600f9190910b9082565b600a5460ff16611bed5760405162461bcd60e51b81526004016107c190612f59565b336000818152600960205260409081902080546006549251631bfc726f60e21b81529193600f91820b90910b926001600160a01b031691636ff1c9bc91611c3691600401612c76565b600060405180830381600087803b158015611c5057600080fd5b505af1925050508015611c61575060015b611cce573d808015611c8f576040519150601f19603f3d011682016040523d82523d6000602084013e611c94565b606091505b507fc75fb740d515c4fc862cc5c8f95343266e804872e7206e24f75751db41c4bcdc81604051611cc49190612cd2565b60405180910390a1505b6000600183015581546001600160801b03191682556007548111611cfa57600780548290039055611d00565b60006007555b60055460405163a9059cbb60e01b81526001600160a01b039091169063a9059cbb90611d329033908590600401612c8a565b602060405180830381600087803b158015611d4c57600080fd5b505af1158015611d60573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b269190612bd6565b611ada81611427565b6001600160a01b03821660009081526c03c95a2f0b4856475fe000000c6020526040812082633b9aca008110611dbf57fe5b6003020160010154905092915050565b630784ce0081565b611ddf6121c9565b6001600160a01b0316611df061160a565b6001600160a01b031614611e165760405162461bcd60e51b81526004016107c1906130b7565b6001600160a01b038116611e3c5760405162461bcd60e51b81526004016107c190612d5e565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b03811660009081526c03c95a2f0b4856475fe000000d60209081526040808320546c03c95a2f0b4856475fe000000c909252822081633b9aca008110611ee057fe5b6003020154600160801b9004600f0b9392505050565b62093a8081565b6c03c95a2f0b4856475fe000000e60205260009081526040902054600f0b81565b6008546001600160a01b031681565b6005546001600160a01b031681565b611f44612aa3565b506007548290611f5481876129e4565b600755611f5f612aa3565b50604080518082019091528251600f90810b82526020808501519083015283518801810b900b83528515611f9557602083018690525b6001600160a01b038816600090815260096020908152604090912084518154600f9190910b6001600160801b03166001600160801b031990911617815590840151600190910155611fe78882856121f5565b861561212f576005546040516323b872dd60e01b81526001600160a01b03909116906323b872dd90612021908b9030908c90600401612ca3565b602060405180830381600087803b15801561203b57600080fd5b505af115801561204f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120739190612bd6565b61208f5760405162461bcd60e51b81526004016107c190613015565b6006546040516317a790f160e11b81526001600160a01b0390911690632f4f21e2906120c1908b908b90600401612c8a565b602060405180830381600087803b1580156120db57600080fd5b505af11580156120ef573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121139190612bd6565b61212f5760405162461bcd60e51b81526004016107c190612efb565b8260200151886001600160a01b03167f7162984403f6c73c8639375d45a9187dfd04602231bd8e587c415718b5f7e5f98987600381111561216c57fe5b4260405161217c939291906132ab565b60405180910390a37f5e2aa66efd74cce82b21852e317e5490d9ecc9e6bb953ae24d90851258cc2f5c828884016040516121b792919061329d565b60405180910390a15050505050505050565b3390565b6000828211156121ef5760405162461bcd60e51b81526004016107c190612e8d565b50900390565b6121fd612a75565b612205612a75565b600b5460009081906001600160a01b0388161561231857428760200151118015612236575060008760000151600f0b135b15612262578651630784ce00600f91820b05810b810b602087810182905289015142900302810b900b85525b42866020015111801561227c575060008660000151600f0b135b156122a8578551630784ce00600f91820b05810b810b602086810182905288015142900302810b900b84525b60208088015160009081526c03c95a2f0b4856475fe000000e8252604090205490870151600f9190910b935015612318578660200151866020015114156122f157829150612318565b60208087015160009081526c03c95a2f0b4856475fe000000e9091526040902054600f0b91505b612320612a75565b506040805160808101825260008082526020820152429181019190915243606082015281156123af57600c82680a18f07d736b90be55601d1b811061236157fe5b60408051608081018252600392909202929092018054600f81810b810b810b8452600160801b909104810b810b900b6020830152600181015492820192909252600290910154606082015290505b60408101516123bc612a75565b60405180608001604052808460000151600f0b81526020018460200151600f0b8152602001846040015181526020018460600151815250905060008360400151421115612426578360400151420384606001514303670de0b6b3a7640000028161242257fe5b0490505b62093a808084040260005b60ff8110156125aa5762093a808201915060004283111561245457429250612474565b5060008281526c03c95a2f0b4856475fe000000e6020526040902054600f0b5b602087018051885188860382029003600f90810b810b808b52918401810b810b9092526000910b12156124a657600087525b60008760200151600f0b12156124be57600060208801525b8295508287604001818152505061250c612501670de0b6b3a76400006124fb6124f48960400151886121cd90919063ffffffff16565b8890612a09565b90612a43565b6060870151906129e4565b6060880152600197909701964283141561252c57504360608701526125aa565b86600c89680a18f07d736b90be55601d1b811061254557fe5b82516003919091029190910180546020840151600f90810b6001600160801b03908116600160801b029490910b81166001600160801b031990921691909117169190911781556040820151600182015560609091015160029091015550600101612431565b50600b8690556001600160a01b038d1615612616576020808b01518a82015191870180519190920301600f90810b810b918290528b518b51885191900301810b810b8752600091900b121561260157600060208601525b60008560000151600f0b121561261657600085525b84600c87680a18f07d736b90be55601d1b811061262f57fe5b82516003919091029190910180546020840151600f90810b6001600160801b03908116600160801b029490910b81166001600160801b03199092169190911716919091178155604082015160018201556060909101516002909101558c6001600160a01b0381161561289257428d602001511115612708578a60200151890198508c602001518c6020015114156126ca578960200151890398505b60208d81015160009081526c03c95a2f0b4856475fe000000e9091526040902080546001600160801b0319166001600160801b03600f8c900b161790555b428c602001511115612771578c602001518c602001511115612771576020808b01518d82015160009081526c03c95a2f0b4856475fe000000e9092526040909120805491909903600f81900b6001600160801b03166001600160801b0319909216919091179098555b60006c03c95a2f0b4856475fe000000d6000836001600160a01b03166001600160a01b03168152602001908152602001600020546001019050806c03c95a2f0b4856475fe000000d6000846001600160a01b03166001600160a01b0316815260200190815260200160002081905550428b6040018181525050438b60600181815250508a6c03c95a2f0b4856475fe000000c6000846001600160a01b03166001600160a01b0316815260200190815260200160002082633b9aca00811061283457fe5b82516003919091029190910180546020840151600f90810b6001600160801b03908116600160801b029490910b81166001600160801b0319909216919091171691909117815560408201516001820155606090910151600290910155505b5050505050505050505050505050565b60008082815b6080811015612904578183106128bd57612904565b60028284016001010486600c82680a18f07d736b90be55601d1b81106128df57fe5b6003020160020154116128f4578093506128fb565b6001810392505b506001016128a8565b5090949350505050565b6000612918612a75565b839050600062093a808083604001518161292e57fe5b0402905060005b60ff8110156129c25762093a808201915060008583111561295857859250612978565b5060008281526c03c95a2f0b4856475fe000000e6020526040902054600f0b5b604084015160208501518551918503029003600f90810b900b8452858314156129a157506129c2565b602084018051909101600f90810b900b905260408301829052600101612935565b5060008260000151600f0b12156129d857600082525b5051600f0b9392505050565b600082820183811015611aca5760405162461bcd60e51b81526004016107c190612e1f565b600082612a185750600061068b565b82820282848281612a2557fe5b0414611aca5760405162461bcd60e51b81526004016107c19061303f565b6000808211612a645760405162461bcd60e51b81526004016107c190612ec4565b818381612a6d57fe5b049392505050565b60405180608001604052806000600f0b81526020016000600f0b815260200160008152602001600081525090565b604080518082019091526000808252602082015290565b803561068b816132f6565b803561068b8161330e565b600060208284031215612ae1578081fd5b8135611aca816132f6565b60008060408385031215612afe578081fd5b8235612b09816132f6565b946020939093013593505050565b60008060408385031215612b29578182fd5b823567ffffffffffffffff80821115612b40578384fd5b818501915085601f830112612b53578384fd5b813581811115612b61578485fd5b60209150818102612b738382016132cf565b8281528381019085850183870186018b1015612b8d578889fd5b8896505b84871015612bb757612ba38b82612aba565b835260019690960195918501918501612b91565b5080975050505050612bcb86828701612ac5565b925050509250929050565b600060208284031215612be7578081fd5b8151611aca8161330e565b600060208284031215612c03578081fd5b5035919050565b60008060408385031215612c1c578182fd5b50508035926020909101359150565b60008151808452815b81811015612c5057602081850181015186830182015201612c34565b81811115612c615782602083870101525b50601f01601f19169290920160200192915050565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b901515815260200190565b600060208252611aca6020830184612c2b565b600f9190910b815260200190565b600f94850b81529290930b60208301526040820152606081019190915260800190565b600f9290920b8252602082015260400190565b6020808252818101527f436f6e7472616374206973206e6f7420696e207468652077686974656c697374604082015260600190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b60208082526024908201527f43616e6e6f742061646420746f2065787069726564206c6f636b2e20576974686040820152636472617760e01b606082015260800190565b60208082526017908201527f526577617264506f6f6c20686173206265656e20736574000000000000000000604082015260600190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b6020808252601f908201527f43616e206f6e6c7920696e637265617365206c6f636b206475726174696f6e00604082015260600190565b6020808252601e908201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604082015260600190565b6020808252601a908201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604082015260600190565b6020808252818101527f4465706f73697420696e746f2072657761726420706f6f6c206661696c65642e604082015260600190565b6020808252600f908201526e496e20616e20656d657267656e637960881b604082015260600190565b60208082526022908201527f4f6e6c792063616e2062652063616c6c656420696e20616e20656d657267656e604082015261637960f01b606082015260800190565b6020808252602f908201527f426c6f636b2073686f756c64206e6f742062652067726561746572207468616e60408201526e2063757272656e7420626c6f636b2160881b606082015260800190565b602080825260119082015270139bdd1a1a5b99c81a5cc81b1bd8dad959607a1b604082015260600190565b60208082526010908201526f5472616e73666572206661696c65642160801b604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b6020808252601e908201527f566f74696e67206c6f636b2063616e2062652034207965617273206d61780000604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526021908201527f57697468647261772066726f6d2072657761726420706f6f6c206661696c65646040820152601760f91b606082015260800190565b60208082526019908201527f5769746864726177206f6c6420746f6b656e7320666972737400000000000000604082015260600190565b6020808252601390820152724e656564206e6f6e2d7a65726f2076616c756560681b604082015260600190565b60208082526026908201527f43616e206f6e6c79206c6f636b20756e74696c2074696d6520696e207468652060408201526566757475726560d01b606082015260800190565b6020808252600c908201526b131bd8dac8195e1c1a5c995960a21b604082015260600190565b602080825260169082015275139bc8195e1a5cdd1a5b99c81b1bd8dac8199bdd5b9960521b604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b602080825260169082015275546865206c6f636b206469646e27742065787069726560501b604082015260600190565b90815260200190565b918252602082015260400190565b9283526020830191909152604082015260600190565b60ff91909116815260200190565b60405181810167ffffffffffffffff811182821017156132ee57600080fd5b604052919050565b6001600160a01b038116811461330b57600080fd5b50565b801515811461330b57600080fdfea2646970667358221220bbebc53a3871ac40712bfe3fb34b0edb29f86ecb9f4b13cb6e59130e63b9042e64736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "balanceOf(address)": {
        "params": {
          "addr": "User wallet address"
        },
        "returns": {
          "_0": "User voting power*"
        }
      },
      "balanceOf(address,uint256)": {
        "params": {
          "_t": "Epoch time to return voting power at",
          "addr": "User wallet address"
        },
        "returns": {
          "_0": "User voting power*"
        }
      },
      "balanceOfAt(address,uint256)": {
        "params": {
          "_block": "Block to calculate the voting power at",
          "addr": "User's wallet address"
        },
        "returns": {
          "_0": "Voting power*"
        }
      },
      "createLock(uint256,uint256)": {
        "params": {
          "_unlockTime": "Epoch time when tokens unlock, rounded down to whole weeks*",
          "_value": "Amount to deposit"
        }
      },
      "depositFor(address,uint256)": {
        "details": "Anyone (even a smart contract) can deposit for someone else, but cannot extend their locktime and deposit for a brand new user",
        "params": {
          "_addr": "User's wallet address",
          "_value": "Amount to add to user's lock*"
        }
      },
      "getLastUserSlope(address)": {
        "params": {
          "addr": "Address of the user wallet"
        },
        "returns": {
          "_0": "Value of the slope*"
        }
      },
      "increaseAmount(uint256)": {
        "params": {
          "_value": "Amount of tokens to deposit and add to the lock*"
        }
      },
      "increaseUnlockTime(uint256)": {
        "params": {
          "_unlockTime": "New epoch time for unlocking*"
        }
      },
      "lockedEnd(address)": {
        "params": {
          "_addr": "User wallet"
        },
        "returns": {
          "_0": "Epoch time of the lock end*"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setMasterchef(address)": {
        "params": {
          "_masterchef": "Address of masterchef"
        }
      },
      "setRewardPool(address)": {
        "params": {
          "_rewardPool": "Address of reward pool"
        }
      },
      "setWhitelist(address[],bool)": {
        "params": {
          "_flag": "True to allow or false to disallow",
          "_users": "A list of address"
        }
      },
      "totalSupply()": {
        "returns": {
          "_0": "Total voting power*"
        }
      },
      "totalSupply(uint256)": {
        "params": {
          "t": "Time to calculate the total voting power at"
        },
        "returns": {
          "_0": "Total voting power*"
        }
      },
      "totalSupplyAt(uint256)": {
        "params": {
          "_block": "Block to calculate the total voting power at"
        },
        "returns": {
          "_0": "Total voting power at `_block`*"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "userPointHistoryTs(address,uint256)": {
        "params": {
          "_addr": "User wallet address",
          "_idx": "User epoch number"
        },
        "returns": {
          "_0": "Epoch time of the checkpoint*"
        }
      },
      "withdraw()": {
        "details": "Only possible if the lock has expired*"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "balanceOf(address)": {
        "notice": "Get the current voting power for `msg.sender`"
      },
      "balanceOf(address,uint256)": {
        "notice": "Get the voting power for `msg.sender`"
      },
      "balanceOfAt(address,uint256)": {
        "notice": "Measure voting power of `addr` at block height `_block`"
      },
      "checkpoint()": {
        "notice": "Record global data to checkpoint*"
      },
      "createLock(uint256,uint256)": {
        "notice": "Deposit `_value` tokens for `msg.sender` and lock until `_unlock_time`"
      },
      "depositFor(address,uint256)": {
        "notice": "Deposit `_value` tokens for `_addr` and add to the lock"
      },
      "emergencyWithdraw()": {
        "notice": "Withdraw during emergency*"
      },
      "getLastUserSlope(address)": {
        "notice": "Get the most recently recorded rate of voting power decrease for `addr`"
      },
      "increaseAmount(uint256)": {
        "notice": "Deposit `_value` additional tokens for `msg.sender` without modifying the unlock time"
      },
      "increaseUnlockTime(uint256)": {
        "notice": "Extend the unlock time for `msg.sender` to `_unlock_time`"
      },
      "lockedEnd(address)": {
        "notice": "Get timestamp when `_addr`'s lock finishes"
      },
      "setEmergency()": {
        "notice": "Only set once"
      },
      "setMasterchef(address)": {
        "notice": "Only set once"
      },
      "setRewardPool(address)": {
        "notice": "Only set once"
      },
      "setWhitelist(address[],bool)": {
        "notice": "Sets a list of users who are allowed/denied to deposit"
      },
      "totalSupply()": {
        "notice": "Calculate current total voting power"
      },
      "totalSupply(uint256)": {
        "notice": "Calculate total voting power"
      },
      "totalSupplyAt(uint256)": {
        "notice": "Calculate total voting power at some point in the past"
      },
      "userPointHistoryTs(address,uint256)": {
        "notice": "Get the timestamp for checkpoint `_idx` for `_addr`"
      },
      "withdraw()": {
        "notice": "Withdraw all tokens for `msg.sender`"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/staking/VotingEscrow.sol:VotingEscrow",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2172,
        "contract": "contracts/staking/VotingEscrow.sol:VotingEscrow",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 12773,
        "contract": "contracts/staking/VotingEscrow.sol:VotingEscrow",
        "label": "name",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 12775,
        "contract": "contracts/staking/VotingEscrow.sol:VotingEscrow",
        "label": "symbol",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 12777,
        "contract": "contracts/staking/VotingEscrow.sol:VotingEscrow",
        "label": "version",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 12781,
        "contract": "contracts/staking/VotingEscrow.sol:VotingEscrow",
        "label": "token",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 12783,
        "contract": "contracts/staking/VotingEscrow.sol:VotingEscrow",
        "label": "rewardPool",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(IRewardPool)4057"
      },
      {
        "astId": 12785,
        "contract": "contracts/staking/VotingEscrow.sol:VotingEscrow",
        "label": "supply",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 12787,
        "contract": "contracts/staking/VotingEscrow.sol:VotingEscrow",
        "label": "masterchef",
        "offset": 0,
        "slot": "8",
        "type": "t_contract(IMasterChef)3991"
      },
      {
        "astId": 12791,
        "contract": "contracts/staking/VotingEscrow.sol:VotingEscrow",
        "label": "locked",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_struct(LockedBalance)12771_storage)"
      },
      {
        "astId": 12793,
        "contract": "contracts/staking/VotingEscrow.sol:VotingEscrow",
        "label": "emergency",
        "offset": 0,
        "slot": "10",
        "type": "t_bool"
      },
      {
        "astId": 12795,
        "contract": "contracts/staking/VotingEscrow.sol:VotingEscrow",
        "label": "epoch",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 12799,
        "contract": "contracts/staking/VotingEscrow.sol:VotingEscrow",
        "label": "pointHistory",
        "offset": 0,
        "slot": "12",
        "type": "t_array(t_struct(Point)12766_storage)100000000000000000000000000000_storage"
      },
      {
        "astId": 12805,
        "contract": "contracts/staking/VotingEscrow.sol:VotingEscrow",
        "label": "userPointHistory",
        "offset": 0,
        "slot": "300000000000000000000000000012",
        "type": "t_mapping(t_address,t_array(t_struct(Point)12766_storage)1000000000_storage)"
      },
      {
        "astId": 12809,
        "contract": "contracts/staking/VotingEscrow.sol:VotingEscrow",
        "label": "userPointEpoch",
        "offset": 0,
        "slot": "300000000000000000000000000013",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 12813,
        "contract": "contracts/staking/VotingEscrow.sol:VotingEscrow",
        "label": "slopeChanges",
        "offset": 0,
        "slot": "300000000000000000000000000014",
        "type": "t_mapping(t_uint256,t_int128)"
      },
      {
        "astId": 12817,
        "contract": "contracts/staking/VotingEscrow.sol:VotingEscrow",
        "label": "whitelist",
        "offset": 0,
        "slot": "300000000000000000000000000015",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Point)12766_storage)100000000000000000000000000000_storage": {
        "base": "t_struct(Point)12766_storage",
        "encoding": "inplace",
        "label": "struct VotingEscrow.Point[100000000000000000000000000000]",
        "numberOfBytes": "9600000000000000000000000000000"
      },
      "t_array(t_struct(Point)12766_storage)1000000000_storage": {
        "base": "t_struct(Point)12766_storage",
        "encoding": "inplace",
        "label": "struct VotingEscrow.Point[1000000000]",
        "numberOfBytes": "96000000000"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IMasterChef)3991": {
        "encoding": "inplace",
        "label": "contract IMasterChef",
        "numberOfBytes": "20"
      },
      "t_contract(IRewardPool)4057": {
        "encoding": "inplace",
        "label": "contract IRewardPool",
        "numberOfBytes": "20"
      },
      "t_int128": {
        "encoding": "inplace",
        "label": "int128",
        "numberOfBytes": "16"
      },
      "t_mapping(t_address,t_array(t_struct(Point)12766_storage)1000000000_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct VotingEscrow.Point[1000000000])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(Point)12766_storage)1000000000_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(LockedBalance)12771_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct VotingEscrow.LockedBalance)",
        "numberOfBytes": "32",
        "value": "t_struct(LockedBalance)12771_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_int128)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => int128)",
        "numberOfBytes": "32",
        "value": "t_int128"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(LockedBalance)12771_storage": {
        "encoding": "inplace",
        "label": "struct VotingEscrow.LockedBalance",
        "members": [
          {
            "astId": 12768,
            "contract": "contracts/staking/VotingEscrow.sol:VotingEscrow",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_int128"
          },
          {
            "astId": 12770,
            "contract": "contracts/staking/VotingEscrow.sol:VotingEscrow",
            "label": "end",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Point)12766_storage": {
        "encoding": "inplace",
        "label": "struct VotingEscrow.Point",
        "members": [
          {
            "astId": 12759,
            "contract": "contracts/staking/VotingEscrow.sol:VotingEscrow",
            "label": "bias",
            "offset": 0,
            "slot": "0",
            "type": "t_int128"
          },
          {
            "astId": 12761,
            "contract": "contracts/staking/VotingEscrow.sol:VotingEscrow",
            "label": "slope",
            "offset": 16,
            "slot": "0",
            "type": "t_int128"
          },
          {
            "astId": 12763,
            "contract": "contracts/staking/VotingEscrow.sol:VotingEscrow",
            "label": "ts",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 12765,
            "contract": "contracts/staking/VotingEscrow.sol:VotingEscrow",
            "label": "blk",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}