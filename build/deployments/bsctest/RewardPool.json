{
  "address": "0xC5fC6cC99f0Ca15c2E4778BF2b070baBe3327868",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_stakingToken",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_rewardToken",
          "type": "address"
        },
        {
          "internalType": "contract IMasterChef",
          "name": "_masterchef",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "EmergencyWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "t",
          "type": "uint256"
        }
      ],
      "name": "Harvest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "depositFor",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "harvest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "masterchef",
      "outputs": [
        {
          "internalType": "contract IMasterChef",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "operator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "pendingTokens",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardPerTokenStored",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IOnwardIncentivesController",
          "name": "_incentivesController",
          "type": "address"
        }
      ],
      "name": "setIncentivesController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakingToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardDebt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawFor",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x08cad235049b234d7cded10206bf29be7c7d2dd4b2c942e7620e18cd4db3d3c8",
  "receipt": {
    "to": null,
    "from": "0x0aA282136b3924ca6767C4D5B9aad6f83bD40A9c",
    "contractAddress": "0xC5fC6cC99f0Ca15c2E4778BF2b070baBe3327868",
    "transactionIndex": 15,
    "gasUsed": "1843674",
    "logsBloom": "0x
    "blockHash": "0x1ec8562ee34e215abb82030dee3d2cb8752e011a7193f318da3b1d56cd3fcdfa",
    "transactionHash": "0x08cad235049b234d7cded10206bf29be7c7d2dd4b2c942e7620e18cd4db3d3c8",
    "logs": [
      {
        "transactionIndex": 15,
        "blockNumber": 19157670,
        "transactionHash": "0x08cad235049b234d7cded10206bf29be7c7d2dd4b2c942e7620e18cd4db3d3c8",
        "address": "0xC5fC6cC99f0Ca15c2E4778BF2b070baBe3327868",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000aa282136b3924ca6767c4d5b9aad6f83bd40a9c"
        ],
        "data": "0x",
        "logIndex": 18,
        "blockHash": "0x1ec8562ee34e215abb82030dee3d2cb8752e011a7193f318da3b1d56cd3fcdfa"
      },
      {
        "transactionIndex": 15,
        "blockNumber": 19157670,
        "transactionHash": "0x08cad235049b234d7cded10206bf29be7c7d2dd4b2c942e7620e18cd4db3d3c8",
        "address": "0xd41223b4Ed7e68275D3C567c237217Fbb2575568",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000c5fc6cc99f0ca15c2e4778bf2b070babe3327868",
          "0x000000000000000000000000d3930575cf356f5cba89dd7cdb06668e6c00f4a9"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 19,
        "blockHash": "0x1ec8562ee34e215abb82030dee3d2cb8752e011a7193f318da3b1d56cd3fcdfa"
      }
    ],
    "blockNumber": 19157670,
    "cumulativeGasUsed": "8097873",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xd41223b4Ed7e68275D3C567c237217Fbb2575568",
    "0xd41223b4Ed7e68275D3C567c237217Fbb2575568",
    "0xD3930575cf356f5cba89DD7Cdb06668e6C00F4a9",
    "0x371F03EfC2c8EcC94e4B230425719e330879A7BD"
  ],
  "solcInputHash": "b0191412d6db60d2913615e97999bbd0",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_stakingToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"contract IMasterChef\",\"name\":\"_masterchef\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"t\",\"type\":\"uint256\"}],\"name\":\"Harvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositFor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"masterchef\",\"outputs\":[{\"internalType\":\"contract IMasterChef\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerTokenStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IOnwardIncentivesController\",\"name\":\"_incentivesController\",\"type\":\"address\"}],\"name\":\"setIncentivesController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_masterchef\":\": MasterChef contract\",\"_operator\":\": address of the operator\",\"_rewardToken\":\": Rewarding token contract\",\"_stakingToken\":\": Staking token contract\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":\"Constructor\"},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/staking/RewardPool.sol\":\"RewardPool\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x15e2d5bd4c28a88548074c54d220e8086f638a71ed07e6b3ba5a70066fcf458d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor () internal {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x212fb1b1d4beaf74354dad9bc329f44ee3c5375ef1c32acff76b4ecefc10f1d8\",\"license\":\"MIT\"},\"contracts/interfaces/IMasterChef.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IOnwardIncentivesController.sol\\\";\\n\\ninterface IMasterChef {\\n    function owner() external view returns (address);\\n\\n    function emo() external view returns (address);\\n\\n    function startTime() external view returns (uint256);\\n\\n    function emoPerSecond() external view returns (uint256);\\n\\n    function poolLength() external view returns (uint256);\\n\\n    function totalAllocPoint() external view returns (uint256);\\n\\n    function TOKENLESS_PRODUCTION() external view returns (uint256);\\n\\n    function poolInfo(uint _pid) external view returns (\\n        address lpToken,\\n        uint256 workingSupply,\\n        bool boost,\\n        uint256 allocPoint,\\n        uint256 lastRewardTime,\\n        uint256 accEmoPerShare,\\n        address incentivesController);\\n\\n    function userInfo(uint _pid, address _user) external view returns (\\n        uint256 amount,\\n        uint256 workingAmount,\\n        uint256 rewardDebt);\\n\\n    // emo + bonus reward\\n    function pendingTokens(uint256 _pid, address _user) external view returns (address[] memory tokens, uint[] memory amounts);\\n\\n    // Transfers ownership of the contract to a new account (`newOwner`)\\n    function transferOwnership(address newOwner) external;\\n\\n    // Add a new lp to the pool. Can only be called by the owner.\\n    function add(uint256 _allocPoint, uint256 _depositFeePercent, IERC20 _lpToken, IOnwardIncentivesController _incentivesController, bool _boost, bool _withUpdate) external;\\n\\n    // Update the given pool's EMO allocation point. Can only be called by the owner.\\n    function set(uint256 _pid, uint256 _allocPoint, uint256 _depositFeePercent, IOnwardIncentivesController _incentivesController, bool _withUpdate) external;\\n\\n    // Update reward variables of the given pool to be up-to-date.\\n    function updatePool(uint256 _pid) external;\\n\\n    // Stake EMO tokens to MasterChef\\n    function enterStaking(uint256 _amount) external;\\n\\n    // Withdraw EMO tokens from STAKING.\\n    function leaveStaking(uint256 _amount) external;\\n\\n    // Deposit LP tokens to MasterChef for EMO allocation.\\n    function depositFor(address _user, uint256 _pid, uint256 _amount) external;\\n\\n    // Deposit LP tokens to MasterChef for EMO allocation.\\n    function deposit(uint _pid, uint _amount) external;\\n\\n    // Withdraw LP tokens from MasterChef.\\n    function withdraw(uint _pid, uint _amount) external;\\n\\n    function harvestAllRewards(address _user) external;\\n\\n    function emergencyWithdraw(uint256 _pid) external;\\n\\n    function setEmoPerSecond(uint256 _emoPerSecond) external;\\n}\",\"keccak256\":\"0x2960bbd1fde7beb4b4486150c9ea9f88c81bc37e320232163262112ad25c37ab\",\"license\":\"MIT\"},\"contracts/interfaces/IOnwardIncentivesController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IOnwardIncentivesController {\\n    function onReward(address user, uint256 newLpAmount) external;\\n\\n    function pendingTokens(address user) external view returns (uint256 pending);\\n\\n    function rewardToken() external view returns (IERC20);\\n\\n    function getNextIncentivesController() external view returns (address);\\n}\\n\",\"keccak256\":\"0x6671bd4d8674181b6c5d60076c6468fced9538a28c6ce5d85974a40610f1d3e4\",\"license\":\"MIT\"},\"contracts/staking/RewardPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"../interfaces/IMasterChef.sol\\\";\\nimport \\\"../interfaces/IOnwardIncentivesController.sol\\\";\\n\\ncontract RewardPool is Ownable {\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n\\n    struct UserInfo {\\n        uint256 amount;\\n        uint256 rewardDebt;\\n    }\\n\\n    IMasterChef public immutable masterchef;\\n\\n    // Staking token\\n    IERC20 public immutable stakingToken;\\n    // Reward token\\n    IERC20 public immutable rewardToken;\\n    uint256 public rewardPerTokenStored;\\n    // Info of each user that stakes LP tokens.\\n    mapping(address => UserInfo) public userInfo;\\n    // address of votingEscrow\\n    address public immutable operator;\\n    // bonus reward\\n    IOnwardIncentivesController incentivesController;\\n\\n    event Deposit(address indexed user, uint256 amount);\\n    event Withdraw(address indexed user, uint256 amount);\\n    event EmergencyWithdraw(address indexed user, uint256 amount);\\n    event Harvest(address indexed from, address indexed to, uint256 t);\\n\\n    /**\\n     * @notice Constructor\\n     * @param _stakingToken: Staking token contract\\n     * @param _rewardToken: Rewarding token contract\\n     * @param _masterchef: MasterChef contract\\n     * @param _operator: address of the operator\\n     */\\n    constructor(\\n        IERC20 _stakingToken,\\n        IERC20 _rewardToken,\\n        IMasterChef _masterchef,\\n        address _operator\\n    ) public {\\n        stakingToken = _stakingToken;\\n        rewardToken = _rewardToken;\\n        masterchef = _masterchef;\\n        operator = _operator;\\n\\n        // Infinite approve\\n        IERC20(_stakingToken).safeApprove(address(_masterchef), uint256(~0));\\n    }\\n\\n    // only votingEscrow\\n    modifier onlyOperator() {\\n        require(msg.sender == operator, \\\"!operator\\\");\\n        _;\\n    }\\n\\n    function setIncentivesController(IOnwardIncentivesController _incentivesController) external onlyOwner {\\n        incentivesController = _incentivesController;\\n    }\\n\\n    function depositFor(address _user, uint256 _amount) external onlyOperator returns (bool) {\\n        UserInfo storage user = userInfo[_user];\\n\\n        // reward balance before deposit\\n        uint256 rewardBalanceBefore = rewardToken.balanceOf(address(this));\\n\\n        // deposit\\n        (uint256 poolAmountBeforeDeposit,,) = masterchef.userInfo(0, address(this));\\n        uint _userAmountBeforeDeposit = user.amount;\\n        if (_amount > 0) {\\n            stakingToken.safeTransferFrom(msg.sender, address(this), _amount);\\n            user.amount = _userAmountBeforeDeposit.add(_amount);\\n        }\\n        masterchef.enterStaking(_amount);\\n\\n        // reward token received\\n        uint256 rewardTokenReceived = rewardToken.balanceOf(address(this)).sub(rewardBalanceBefore);\\n\\n        // update reward info\\n        uint _rewardPerTokenStored = rewardPerTokenStored;\\n        if (rewardTokenReceived != 0 && poolAmountBeforeDeposit != 0) {\\n            _rewardPerTokenStored = _rewardPerTokenStored.add(rewardTokenReceived.mul(1e12).div(poolAmountBeforeDeposit));\\n        }\\n\\n        // send reward\\n        uint _rewardAmount = _rewardPerTokenStored * _userAmountBeforeDeposit / 1e12 - user.rewardDebt;\\n        if (_rewardAmount > 0) {\\n            rewardToken.safeTransfer(_user, _rewardAmount);\\n        }\\n        user.rewardDebt = _rewardPerTokenStored * (_userAmountBeforeDeposit + _amount) / 1e12;\\n        rewardPerTokenStored = _rewardPerTokenStored;\\n\\n        // bonus\\n        if (address(incentivesController) != address(0)) {\\n            incentivesController.onReward(_user, user.amount);\\n        }\\n\\n        emit Deposit(_user, _amount);\\n        return true;\\n    }\\n\\n    function withdrawFor(address _user, uint256 _amount) external onlyOperator returns (bool) {\\n        return _withdraw(_user, msg.sender, _amount);\\n    }\\n\\n    function harvest(address _user) external {\\n        _withdraw(_user, operator, 0);\\n        emit Harvest(msg.sender, _user, block.timestamp);\\n    }\\n\\n    function emergencyWithdraw(address _user) external onlyOperator {\\n        masterchef.emergencyWithdraw(0);\\n        UserInfo storage user = userInfo[_user];\\n        stakingToken.safeTransfer(address(msg.sender), user.amount);\\n        emit EmergencyWithdraw(_user, user.amount);\\n        user.amount = 0;\\n        user.rewardDebt = 0;\\n    }\\n\\n    function _withdraw(address from, address to, uint256 _amount) internal returns (bool) {\\n        require(to != address(this), \\\"!To\\\");\\n        UserInfo storage user = userInfo[from];\\n\\n        // reward balance before deposit\\n        uint256 rewardBalanceBefore = rewardToken.balanceOf(address(this));\\n\\n        // withdraw\\n        (uint256 poolAmountBeforeWithdraw,,) = masterchef.userInfo(0, address(this));\\n        uint _userAmountBeforeWithdraw = user.amount;\\n        // adjust amount\\n        _amount = _amount > _userAmountBeforeWithdraw ? _userAmountBeforeWithdraw : _amount;\\n        masterchef.enterStaking(_amount);\\n        if (_amount > 0) {\\n            stakingToken.safeTransfer(to, _amount);\\n            user.amount = _userAmountBeforeWithdraw - _amount;\\n        }\\n\\n        // reward token received\\n        uint256 rewardTokenReceived = rewardToken.balanceOf(address(this)).sub(rewardBalanceBefore);\\n\\n        // update reward info\\n        uint _rewardPerTokenStored = rewardPerTokenStored;\\n        if (rewardTokenReceived != 0 && poolAmountBeforeWithdraw != 0) {\\n            _rewardPerTokenStored = _rewardPerTokenStored.add(rewardTokenReceived.mul(1e12).div(poolAmountBeforeWithdraw));\\n        }\\n\\n        // send reward\\n        uint _rewardAmount = _rewardPerTokenStored * _userAmountBeforeWithdraw / 1e12 - user.rewardDebt;\\n        if (_rewardAmount > 0) {\\n            rewardToken.safeTransfer(from, _rewardAmount);\\n        }\\n        user.rewardDebt = _rewardPerTokenStored * (_userAmountBeforeWithdraw - _amount) / 1e12;\\n        rewardPerTokenStored = _rewardPerTokenStored;\\n\\n        // bonus\\n        if (address(incentivesController) != address(0)) {\\n            incentivesController.onReward(from, user.amount);\\n        }\\n\\n        emit Withdraw(from, _amount);\\n        return true;\\n    }\\n\\n    function pendingTokens(address _user) external view returns (address[] memory tokens, uint[] memory amounts) {\\n        uint incentives = 0;\\n        address _incentivesControllerAddr = address(incentivesController);\\n        while (_incentivesControllerAddr != address(0)) {\\n            incentives++;\\n            _incentivesControllerAddr = IOnwardIncentivesController(_incentivesControllerAddr).getNextIncentivesController();\\n        }\\n\\n        tokens = new address[](incentives + 1);\\n        amounts = new uint[](incentives + 1);\\n\\n        // 0 -> rewardToken\\n        (uint256 poolAmount,,) = masterchef.userInfo(0, address(this));\\n        (, uint[] memory _amounts) = masterchef.pendingTokens(0, address(this));\\n        uint _rewardPerTokenStored = rewardPerTokenStored;\\n        if (_amounts[0] != 0 && poolAmount != 0) {\\n            _rewardPerTokenStored = _rewardPerTokenStored.add(_amounts[0].mul(1e12).div(poolAmount));\\n        }\\n        tokens[0] = address(rewardToken);\\n        amounts[0] = _rewardPerTokenStored * userInfo[_user].amount / 1e12 - userInfo[_user].rewardDebt;\\n\\n        // bonus\\n        uint i = 1;\\n        IOnwardIncentivesController _incentivesController = incentivesController;\\n        while (address(_incentivesController) != address(0)) {\\n            tokens[i] = address(_incentivesController.rewardToken());\\n            amounts[i] = _incentivesController.pendingTokens(_user);\\n            _incentivesController = IOnwardIncentivesController(_incentivesController.getNextIncentivesController());\\n            i++;\\n        }\\n    }\\n}\",\"keccak256\":\"0x69e65046ccc6a134de62a5e830858fb4537b236b38693d18b5070b7d6bb0fc17\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100f55760003560e01c80638da5cb5b11610097578063e655dbd811610066578063e655dbd814610308578063f2fde38b1461032e578063f7c618c114610354578063fb1db2781461035c576100f5565b80638da5cb5b146101fb578063c031a66f14610203578063db518db2146102c2578063df136d65146102ee576100f5565b8063570ca735116100d3578063570ca735146101a15780636ff1c9bc146101c5578063715018a6146101eb57806372f702f3146101f3576100f5565b80630e5c011e146100fa5780631959a002146101225780632f4f21e214610161575b600080fd5b6101206004803603602081101561011057600080fd5b50356001600160a01b0316610364565b005b6101486004803603602081101561013857600080fd5b50356001600160a01b03166103d4565b6040805192835260208301919091528051918290030190f35b61018d6004803603604081101561017757600080fd5b506001600160a01b0381351690602001356103ed565b604080519115158252519081900360200190f35b6101a9610889565b604080516001600160a01b039092168252519081900360200190f35b610120600480360360208110156101db57600080fd5b50356001600160a01b03166108ad565b610120610a2e565b6101a9610aec565b6101a9610b10565b6102296004803603602081101561021957600080fd5b50356001600160a01b0316610b1f565b604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b8381101561026d578181015183820152602001610255565b50505050905001838103825284818151815260200191508051906020019060200280838360005b838110156102ac578181015183820152602001610294565b5050505090500194505050505060405180910390f35b61018d600480360360408110156102d857600080fd5b506001600160a01b03813516906020013561115d565b6102f66111da565b60408051918252519081900360200190f35b6101206004803603602081101561031e57600080fd5b50356001600160a01b03166111e0565b6101206004803603602081101561034457600080fd5b50356001600160a01b0316611276565b6101a961138a565b6101a96113ae565b610390817f00000000000000000000000000000000000000000000000000000000000000006000611501565b506040805142815290516001600160a01b0383169133917fa0306f61d3fafe13787b78e276cb6b644382854a66cb46daae14227d3ec267979181900360200190a350565b6002602052600090815260409020805460019091015482565b6000336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610458576040805162461bcd60e51b815260206004820152600960248201526810b7b832b930ba37b960b91b604482015290519081900360640190fd5b6001600160a01b03808416600090815260026020908152604080832081516370a0823160e01b8152306004820152915190947f000000000000000000000000000000000000000000000000000000000000000016926370a082319260248082019391829003018186803b1580156104ce57600080fd5b505afa1580156104e2573d6000803e3d6000fd5b505050506040513d60208110156104f857600080fd5b5051604080516393f1a40b60e01b8152600060048201819052306024830152915192935090916001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016916393f1a40b916044808301926060929190829003018186803b15801561056e57600080fd5b505afa158015610582573d6000803e3d6000fd5b505050506040513d606081101561059857600080fd5b5051835490915085156105e7576105da6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016333089611944565b6105e481876119a4565b84555b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166341441d3b876040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b15801561064d57600080fd5b505af1158015610661573d6000803e3d6000fd5b50505050600061070a847f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156106d857600080fd5b505afa1580156106ec573d6000803e3d6000fd5b505050506040513d602081101561070257600080fd5b5051906119fe565b600154909150811580159061071e57508315155b156107495761074661073f856107398564e8d4a51000611a5b565b90611ab4565b82906119a4565b90505b6000866001015464e8d4a510008584028161076057fe5b04039050801561079e5761079e6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168b83611b1b565b64e8d4a51000848a018302046001808901919091558290556003546001600160a01b0316156108385760035487546040805163186e465160e31b81526001600160a01b038e8116600483015260248201939093529051919092169163c372328891604480830192600092919082900301818387803b15801561081f57600080fd5b505af1158015610833573d6000803e3d6000fd5b505050505b604080518a815290516001600160a01b038c16917fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c919081900360200190a260019750505050505050505b92915050565b7f000000000000000000000000000000000000000000000000000000000000000081565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610916576040805162461bcd60e51b815260206004820152600960248201526810b7b832b930ba37b960b91b604482015290519081900360640190fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316635312ea8e60006040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b15801561097d57600080fd5b505af1158015610991573d6000803e3d6000fd5b5050506001600160a01b03808316600090815260026020526040902080549092506109e0917f000000000000000000000000000000000000000000000000000000000000000016903390611b1b565b805460408051918252516001600160a01b038416917f5fafa99d0643513820be26656b45130b01e1c03062e1266bf36f88cbd3bd9695919081900360200190a2600080825560019091015550565b610a36611b6d565b6001600160a01b0316610a47610b10565b6001600160a01b031614610aa2576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000546001600160a01b031690565b60035460609081906000906001600160a01b03165b6001600160a01b03811615610bb7578180600101925050806001600160a01b0316633fdb343e6040518163ffffffff1660e01b815260040160206040518083038186803b158015610b8457600080fd5b505afa158015610b98573d6000803e3d6000fd5b505050506040513d6020811015610bae57600080fd5b50519050610b34565b8160010167ffffffffffffffff81118015610bd157600080fd5b50604051908082528060200260200182016040528015610bfb578160200160208202803683370190505b5093508160010167ffffffffffffffff81118015610c1857600080fd5b50604051908082528060200260200182016040528015610c42578160200160208202803683370190505b50925060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166393f1a40b6000306040518363ffffffff1660e01b815260040180838152602001826001600160a01b031681526020019250505060606040518083038186803b158015610cbd57600080fd5b505afa158015610cd1573d6000803e3d6000fd5b505050506040513d6060811015610ce757600080fd5b50516040805160016232bd9d60e01b0319815260006004820181905230602483015291519293506060926001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169263ffcd42639260448082019391829003018186803b158015610d5d57600080fd5b505afa158015610d71573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040908152811015610d9a57600080fd5b8101908080516040519392919084640100000000821115610dba57600080fd5b908301906020820185811115610dcf57600080fd5b8251866020820283011164010000000082111715610dec57600080fd5b82525081516020918201928201910280838360005b83811015610e19578181015183820152602001610e01565b5050505090500160405260200180516040519392919084640100000000821115610e4257600080fd5b908301906020820185811115610e5757600080fd5b8251866020820283011164010000000082111715610e7457600080fd5b82525081516020918201928201910280838360005b83811015610ea1578181015183820152602001610e89565b505050509050016040525050509150506000600154905081600081518110610ec557fe5b6020026020010151600014158015610edc57508215155b15610f1757610f1461073f8461073964e8d4a5100086600081518110610efe57fe5b6020026020010151611a5b90919063ffffffff16565b90505b7f000000000000000000000000000000000000000000000000000000000000000087600081518110610f4557fe5b6001600160a01b0392831660209182029290920181019190915290891660009081526002909152604090206001810154905464e8d4a51000908302040386600081518110610f8f57fe5b60209081029190910101526003546001906001600160a01b03165b6001600160a01b0381161561115157806001600160a01b031663f7c618c16040518163ffffffff1660e01b815260040160206040518083038186803b158015610ff257600080fd5b505afa158015611006573d6000803e3d6000fd5b505050506040513d602081101561101c57600080fd5b505189518a908490811061102c57fe5b60200260200101906001600160a01b031690816001600160a01b031681525050806001600160a01b031663c031a66f8b6040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561109957600080fd5b505afa1580156110ad573d6000803e3d6000fd5b505050506040513d60208110156110c357600080fd5b505188518990849081106110d357fe5b602002602001018181525050806001600160a01b0316633fdb343e6040518163ffffffff1660e01b815260040160206040518083038186803b15801561111857600080fd5b505afa15801561112c573d6000803e3d6000fd5b505050506040513d602081101561114257600080fd5b50516001909201919050610faa565b50505050505050915091565b6000336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146111c8576040805162461bcd60e51b815260206004820152600960248201526810b7b832b930ba37b960b91b604482015290519081900360640190fd5b6111d3833384611501565b9392505050565b60015481565b6111e8611b6d565b6001600160a01b03166111f9610b10565b6001600160a01b031614611254576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600380546001600160a01b0319166001600160a01b0392909216919091179055565b61127e611b6d565b6001600160a01b031661128f610b10565b6001600160a01b0316146112ea576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b03811661132f5760405162461bcd60e51b8152600401808060200182810382526026815260200180611e296026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b801580611458575060408051636eb1769f60e11b81523060048201526001600160a01b03848116602483015291519185169163dd62ed3e91604480820192602092909190829003018186803b15801561142a57600080fd5b505afa15801561143e573d6000803e3d6000fd5b505050506040513d602081101561145457600080fd5b5051155b6114935760405162461bcd60e51b8152600401808060200182810382526036815260200180611ec06036913960400191505060405180910390fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b1790526114e5908490611b71565b505050565b60606114f98484600085611c22565b949350505050565b60006001600160a01b038316301415611547576040805162461bcd60e51b815260206004820152600360248201526221546f60e81b604482015290519081900360640190fd5b6001600160a01b03808516600090815260026020908152604080832081516370a0823160e01b8152306004820152915190947f000000000000000000000000000000000000000000000000000000000000000016926370a082319260248082019391829003018186803b1580156115bd57600080fd5b505afa1580156115d1573d6000803e3d6000fd5b505050506040513d60208110156115e757600080fd5b5051604080516393f1a40b60e01b8152600060048201819052306024830152915192935090916001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016916393f1a40b916044808301926060929190829003018186803b15801561165d57600080fd5b505afa158015611671573d6000803e3d6000fd5b505050506040513d606081101561168757600080fd5b5051835490915080861161169b578561169d565b805b95507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166341441d3b876040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b15801561170557600080fd5b505af1158015611719573d6000803e3d6000fd5b5050505060008611156117605761175a6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168888611b1b565b85810384555b60006117d3847f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156106d857600080fd5b60015490915081158015906117e757508315155b156118055761180261073f856107398564e8d4a51000611a5b565b90505b6000866001015464e8d4a510008584028161181c57fe5b04039050801561185a5761185a6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168c83611b1b565b64e8d4a510008985038302046001808901919091558290556003546001600160a01b0316156118f45760035487546040805163186e465160e31b81526001600160a01b038f8116600483015260248201939093529051919092169163c372328891604480830192600092919082900301818387803b1580156118db57600080fd5b505af11580156118ef573d6000803e3d6000fd5b505050505b604080518a815290516001600160a01b038d16917f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364919081900360200190a25060019a9950505050505050505050565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b17905261199e908590611b71565b50505050565b6000828201838110156111d3576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b600082821115611a55576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b600082611a6a57506000610883565b82820282848281611a7757fe5b04146111d35760405162461bcd60e51b8152600401808060200182810382526021815260200180611e756021913960400191505060405180910390fd5b6000808211611b0a576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b818381611b1357fe5b049392505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526114e5908490611b71565b3390565b6060611bc6826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166114ea9092919063ffffffff16565b8051909150156114e557808060200190516020811015611be557600080fd5b50516114e55760405162461bcd60e51b815260040180806020018281038252602a815260200180611e96602a913960400191505060405180910390fd5b606082471015611c635760405162461bcd60e51b8152600401808060200182810382526026815260200180611e4f6026913960400191505060405180910390fd5b611c6c85611d7e565b611cbd576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b60208310611cfc5780518252601f199092019160209182019101611cdd565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114611d5e576040519150601f19603f3d011682016040523d82523d6000602084013e611d63565b606091505b5091509150611d73828286611d84565b979650505050505050565b3b151590565b60608315611d935750816111d3565b825115611da35782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611ded578181015183820152602001611dd5565b50505050905090810190601f168015611e1a5780820380516001836020036101000a031916815260200191505b509250505060405180910390fdfe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565645361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365a2646970667358221220873b051c14b6caf5dfb20e0f6af310ec8ed348c4a7a87796f83b97a68f881ba064736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "_masterchef": ": MasterChef contract",
          "_operator": ": address of the operator",
          "_rewardToken": ": Rewarding token contract",
          "_stakingToken": ": Staking token contract"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructor": "Constructor"
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10,
        "contract": "contracts/staking/RewardPool.sol:RewardPool",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 27685,
        "contract": "contracts/staking/RewardPool.sol:RewardPool",
        "label": "rewardPerTokenStored",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 27689,
        "contract": "contracts/staking/RewardPool.sol:RewardPool",
        "label": "userInfo",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_struct(UserInfo)27677_storage)"
      },
      {
        "astId": 27693,
        "contract": "contracts/staking/RewardPool.sol:RewardPool",
        "label": "incentivesController",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IOnwardIncentivesController)9343"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IOnwardIncentivesController)9343": {
        "encoding": "inplace",
        "label": "contract IOnwardIncentivesController",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(UserInfo)27677_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct RewardPool.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)27677_storage"
      },
      "t_struct(UserInfo)27677_storage": {
        "encoding": "inplace",
        "label": "struct RewardPool.UserInfo",
        "members": [
          {
            "astId": 27674,
            "contract": "contracts/staking/RewardPool.sol:RewardPool",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 27676,
            "contract": "contracts/staking/RewardPool.sol:RewardPool",
            "label": "rewardDebt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}