{
  "address": "0xC2273621F3750dB0E6b4D8F66AF8B270E07Aa034",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ISwap",
          "name": "_baseSwap",
          "type": "address"
        },
        {
          "internalType": "contract IMetaSwap",
          "name": "_metaSwap",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_metaLPToken",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "minToMint",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "addLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseSwap",
      "outputs": [
        {
          "internalType": "contract ISwap",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "baseTokens",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "calculateRemoveLiquidity",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "tokenIndex",
          "type": "uint8"
        }
      ],
      "name": "calculateRemoveLiquidityOneToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "tokenIndexFrom",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "tokenIndexTo",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "dx",
          "type": "uint256"
        }
      ],
      "name": "calculateSwap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bool",
          "name": "deposit",
          "type": "bool"
        }
      ],
      "name": "calculateTokenAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "metaLPToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "metaSwap",
      "outputs": [
        {
          "internalType": "contract IMetaSwap",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "metaTokens",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "minAmounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "removeLiquidity",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "maxBurnAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "removeLiquidityImbalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "tokenIndex",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "minAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "removeLiquidityOneToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "tokenIndexFrom",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "tokenIndexTo",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "dx",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minDy",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokens",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xb7ca0b36cf50bb37b8d984e15d764fc5268358bc2f4dd0379de80c41304f8caa",
  "receipt": {
    "to": null,
    "from": "0x0aA282136b3924ca6767C4D5B9aad6f83bD40A9c",
    "contractAddress": "0xC2273621F3750dB0E6b4D8F66AF8B270E07Aa034",
    "transactionIndex": 13,
    "gasUsed": "3173610",
    "logsBloom": "0x
    "blockHash": "0x9e21598af9a9d00e4c25c14e0bb4d150574cb1247e202b34032264fb40fc39d0",
    "transactionHash": "0xb7ca0b36cf50bb37b8d984e15d764fc5268358bc2f4dd0379de80c41304f8caa",
    "logs": [
      {
        "transactionIndex": 13,
        "blockNumber": 19166781,
        "transactionHash": "0xb7ca0b36cf50bb37b8d984e15d764fc5268358bc2f4dd0379de80c41304f8caa",
        "address": "0x6456d6f7B224283f8B22F03347B58D8B6d975677",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000c2273621f3750db0e6b4d8f66af8b270e07aa034",
          "0x0000000000000000000000006493f1bfe563a09485a3888617edaf62f8a43df0"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 23,
        "blockHash": "0x9e21598af9a9d00e4c25c14e0bb4d150574cb1247e202b34032264fb40fc39d0"
      },
      {
        "transactionIndex": 13,
        "blockNumber": 19166781,
        "transactionHash": "0xb7ca0b36cf50bb37b8d984e15d764fc5268358bc2f4dd0379de80c41304f8caa",
        "address": "0x6456d6f7B224283f8B22F03347B58D8B6d975677",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000c2273621f3750db0e6b4d8f66af8b270e07aa034",
          "0x0000000000000000000000007f7d0e9c89f81849929eb024757f28f0b30f8628"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 24,
        "blockHash": "0x9e21598af9a9d00e4c25c14e0bb4d150574cb1247e202b34032264fb40fc39d0"
      },
      {
        "transactionIndex": 13,
        "blockNumber": 19166781,
        "transactionHash": "0xb7ca0b36cf50bb37b8d984e15d764fc5268358bc2f4dd0379de80c41304f8caa",
        "address": "0x9b5bb7F5BE680843Bcd3B54D4E5C6eE889c124Df",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000c2273621f3750db0e6b4d8f66af8b270e07aa034",
          "0x0000000000000000000000006493f1bfe563a09485a3888617edaf62f8a43df0"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 25,
        "blockHash": "0x9e21598af9a9d00e4c25c14e0bb4d150574cb1247e202b34032264fb40fc39d0"
      },
      {
        "transactionIndex": 13,
        "blockNumber": 19166781,
        "transactionHash": "0xb7ca0b36cf50bb37b8d984e15d764fc5268358bc2f4dd0379de80c41304f8caa",
        "address": "0x9b5bb7F5BE680843Bcd3B54D4E5C6eE889c124Df",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000c2273621f3750db0e6b4d8f66af8b270e07aa034",
          "0x0000000000000000000000007f7d0e9c89f81849929eb024757f28f0b30f8628"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 26,
        "blockHash": "0x9e21598af9a9d00e4c25c14e0bb4d150574cb1247e202b34032264fb40fc39d0"
      },
      {
        "transactionIndex": 13,
        "blockNumber": 19166781,
        "transactionHash": "0xb7ca0b36cf50bb37b8d984e15d764fc5268358bc2f4dd0379de80c41304f8caa",
        "address": "0x648D3d969760FDabc71ea9d59c020AD899237b32",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000c2273621f3750db0e6b4d8f66af8b270e07aa034",
          "0x0000000000000000000000006493f1bfe563a09485a3888617edaf62f8a43df0"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 27,
        "blockHash": "0x9e21598af9a9d00e4c25c14e0bb4d150574cb1247e202b34032264fb40fc39d0"
      },
      {
        "transactionIndex": 13,
        "blockNumber": 19166781,
        "transactionHash": "0xb7ca0b36cf50bb37b8d984e15d764fc5268358bc2f4dd0379de80c41304f8caa",
        "address": "0x648D3d969760FDabc71ea9d59c020AD899237b32",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000c2273621f3750db0e6b4d8f66af8b270e07aa034",
          "0x0000000000000000000000007f7d0e9c89f81849929eb024757f28f0b30f8628"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 28,
        "blockHash": "0x9e21598af9a9d00e4c25c14e0bb4d150574cb1247e202b34032264fb40fc39d0"
      },
      {
        "transactionIndex": 13,
        "blockNumber": 19166781,
        "transactionHash": "0xb7ca0b36cf50bb37b8d984e15d764fc5268358bc2f4dd0379de80c41304f8caa",
        "address": "0xf8e00573a7e669e42F4bF022497bAfca527c403F",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000c2273621f3750db0e6b4d8f66af8b270e07aa034",
          "0x0000000000000000000000007f7d0e9c89f81849929eb024757f28f0b30f8628"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 29,
        "blockHash": "0x9e21598af9a9d00e4c25c14e0bb4d150574cb1247e202b34032264fb40fc39d0"
      },
      {
        "transactionIndex": 13,
        "blockNumber": 19166781,
        "transactionHash": "0xb7ca0b36cf50bb37b8d984e15d764fc5268358bc2f4dd0379de80c41304f8caa",
        "address": "0x61F5F56accA770AA3e8f637dCee3C2Cad8dc59c0",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000c2273621f3750db0e6b4d8f66af8b270e07aa034",
          "0x0000000000000000000000007f7d0e9c89f81849929eb024757f28f0b30f8628"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 30,
        "blockHash": "0x9e21598af9a9d00e4c25c14e0bb4d150574cb1247e202b34032264fb40fc39d0"
      },
      {
        "transactionIndex": 13,
        "blockNumber": 19166781,
        "transactionHash": "0xb7ca0b36cf50bb37b8d984e15d764fc5268358bc2f4dd0379de80c41304f8caa",
        "address": "0x61F5F56accA770AA3e8f637dCee3C2Cad8dc59c0",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000c2273621f3750db0e6b4d8f66af8b270e07aa034",
          "0x0000000000000000000000006493f1bfe563a09485a3888617edaf62f8a43df0"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 31,
        "blockHash": "0x9e21598af9a9d00e4c25c14e0bb4d150574cb1247e202b34032264fb40fc39d0"
      },
      {
        "transactionIndex": 13,
        "blockNumber": 19166781,
        "transactionHash": "0xb7ca0b36cf50bb37b8d984e15d764fc5268358bc2f4dd0379de80c41304f8caa",
        "address": "0xA3747c559323E06418B176CF2e191766D6222029",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000c2273621f3750db0e6b4d8f66af8b270e07aa034",
          "0x0000000000000000000000007f7d0e9c89f81849929eb024757f28f0b30f8628"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 32,
        "blockHash": "0x9e21598af9a9d00e4c25c14e0bb4d150574cb1247e202b34032264fb40fc39d0"
      }
    ],
    "blockNumber": 19166781,
    "cumulativeGasUsed": "4195640",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x6493F1BfE563A09485A3888617EDAf62f8A43dF0",
    "0x7f7d0E9c89f81849929EB024757F28f0b30f8628",
    "0xA3747c559323E06418B176CF2e191766D6222029"
  ],
  "solcInputHash": "17d3ba2d960f961a8b40c627c7da50c7",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ISwap\",\"name\":\"_baseSwap\",\"type\":\"address\"},{\"internalType\":\"contract IMetaSwap\",\"name\":\"_metaSwap\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_metaLPToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"minToMint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseSwap\",\"outputs\":[{\"internalType\":\"contract ISwap\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"baseTokens\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"calculateRemoveLiquidity\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"tokenIndex\",\"type\":\"uint8\"}],\"name\":\"calculateRemoveLiquidityOneToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"tokenIndexFrom\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"tokenIndexTo\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"dx\",\"type\":\"uint256\"}],\"name\":\"calculateSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"deposit\",\"type\":\"bool\"}],\"name\":\"calculateTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"metaLPToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"metaSwap\",\"outputs\":[{\"internalType\":\"contract IMetaSwap\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"metaTokens\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"minAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"maxBurnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"removeLiquidityImbalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"tokenIndex\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"removeLiquidityOneToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"tokenIndexFrom\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"tokenIndexTo\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"dx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minDy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokens\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addLiquidity(uint256[],uint256,uint256)\":{\"params\":{\"amounts\":\"the amounts of each token to add, in their native precision\",\"deadline\":\"latest timestamp to accept this transaction\",\"minToMint\":\"the minimum LP tokens adding this amount of liquidity should mint, otherwise revert. Handy for front-running mitigation\"},\"returns\":{\"_0\":\"amount of LP token user minted and received\"}},\"calculateRemoveLiquidity(address,uint256)\":{\"params\":{\"account\":\"the address that is withdrawing tokens\",\"amount\":\"the amount of LP tokens that would be burned on withdrawal\"},\"returns\":{\"_0\":\"array of token balances that the user will receive\"}},\"calculateRemoveLiquidityOneToken(address,uint256,uint8)\":{\"params\":{\"account\":\"the address that is withdrawing tokens\",\"tokenAmount\":\"the amount of LP token to burn\",\"tokenIndex\":\"index of which token will be withdrawn\"},\"returns\":{\"_0\":\"availableTokenAmount calculated amount of underlying token available to withdraw\"}},\"calculateSwap(uint8,uint8,uint256)\":{\"params\":{\"dx\":\"the amount of tokens the user wants to sell. If the token charges a fee on transfers, use the amount that gets transferred after the fee.\",\"tokenIndexFrom\":\"the token the user wants to sell\",\"tokenIndexTo\":\"the token the user wants to buy\"},\"returns\":{\"_0\":\"amount of tokens the user will receive\"}},\"calculateTokenAmount(address,uint256[],bool)\":{\"details\":\"This shouldn't be used outside frontends for user estimates.\",\"params\":{\"account\":\"address that is depositing or withdrawing tokens\",\"amounts\":\"an array of token amounts to deposit or withdrawal, corresponding to pooledTokens. The amount should be in each pooled token's native precision. If a token charges a fee on transfers, use the amount that gets transferred after the fee.\",\"deposit\":\"whether this is a deposit or a withdrawal\"},\"returns\":{\"_0\":\"token amount the user will receive\"}},\"constructor\":{\"params\":{\"_baseSwap\":\"the address of the base swap contract\",\"_metaLPToken\":\"the address of the meta swap LP token contract\",\"_metaSwap\":\"the address of the meta swap contract\"}},\"getToken(uint256)\":{\"params\":{\"index\":\"the index of the token\"},\"returns\":{\"_0\":\"address of the token at given index\"}},\"removeLiquidity(uint256,uint256[],uint256)\":{\"details\":\"Liquidity can always be removed, even when the pool is paused.\",\"params\":{\"amount\":\"the amount of LP tokens to burn\",\"deadline\":\"latest timestamp to accept this transaction\",\"minAmounts\":\"the minimum amounts of each token in the pool        acceptable for this burn. Useful as a front-running mitigation\"},\"returns\":{\"_0\":\"amounts of tokens user received\"}},\"removeLiquidityImbalance(uint256[],uint256,uint256)\":{\"params\":{\"amounts\":\"how much of each token to withdraw\",\"deadline\":\"latest timestamp to accept this transaction\",\"maxBurnAmount\":\"the max LP token provider is willing to pay to remove liquidity. Useful as a front-running mitigation.\"},\"returns\":{\"_0\":\"amount of LP tokens burned\"}},\"removeLiquidityOneToken(uint256,uint8,uint256,uint256)\":{\"params\":{\"deadline\":\"latest timestamp to accept this transaction\",\"minAmount\":\"the minimum amount to withdraw, otherwise revert\",\"tokenAmount\":\"the amount of the token you want to receive\",\"tokenIndex\":\"the index of the token you want to receive\"},\"returns\":{\"_0\":\"amount of chosen token user received\"}},\"swap(uint8,uint8,uint256,uint256,uint256)\":{\"params\":{\"deadline\":\"latest timestamp to accept this transaction\",\"dx\":\"the amount of tokens the user wants to swap from\",\"minDy\":\"the min amount the user would like to receive, or revert.\",\"tokenIndexFrom\":\"the token the user wants to swap from\",\"tokenIndexTo\":\"the token the user wants to swap to\"}}},\"title\":\"MetaSwapDeposit\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addLiquidity(uint256[],uint256,uint256)\":{\"notice\":\"Add liquidity to the pool with the given amounts of tokens\"},\"calculateRemoveLiquidity(address,uint256)\":{\"notice\":\"A simple method to calculate amount of each underlying tokens that is returned upon burning given amount of LP tokens\"},\"calculateRemoveLiquidityOneToken(address,uint256,uint8)\":{\"notice\":\"Calculate the amount of underlying token available to withdraw when withdrawing via only single token\"},\"calculateSwap(uint8,uint8,uint256)\":{\"notice\":\"Calculate amount of tokens you receive on swap\"},\"calculateTokenAmount(address,uint256[],bool)\":{\"notice\":\"A simple method to calculate prices from deposits or withdrawals, excluding fees but including slippage. This is helpful as an input into the various \\\"min\\\" parameters on calls to fight front-running. When withdrawing from the base pool in imbalanced fashion, the recommended slippage setting is 0.2% or higher.\"},\"constructor\":\"Sets the address for the base swap contract, meta swap contract, and the meta swap LP token contract.\",\"getToken(uint256)\":{\"notice\":\"Return address of the pooled token at given index. Reverts if tokenIndex is out of range. This is a flattened representation of the pooled tokens.\"},\"removeLiquidity(uint256,uint256[],uint256)\":{\"notice\":\"Burn LP tokens to remove liquidity from the pool. Withdraw fee that decays linearly over period of 4 weeks since last deposit will apply.\"},\"removeLiquidityImbalance(uint256[],uint256,uint256)\":{\"notice\":\"Remove liquidity from the pool, weighted differently than the pool's current balances. Withdraw fee that decays linearly over period of 4 weeks since last deposit will apply.\"},\"removeLiquidityOneToken(uint256,uint8,uint256,uint256)\":{\"notice\":\"Remove liquidity from the pool all in one token. Withdraw fee that decays linearly over period of 4 weeks since last deposit will apply.\"},\"swap(uint8,uint8,uint256,uint256,uint256)\":{\"notice\":\"Swap two underlying tokens using the meta pool and the base pool\"}},\"notice\":\"This contract flattens the LP token in a MetaSwap pool for easier user access. For example, suppose there exists a base Swap pool consisting of [DAI, USDC, USDT]. Then a MetaSwap pool can be created with [BUSD, BaseSwapLPToken] to allow trades between either the LP token or the underlying tokens and BUSD. MetaSwapDeposit flattens the LP token and remaps them to [BUSD, DAI, USDC, USDT], allowing users to ignore the dependency on BaseSwapLPToken.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/stable/MetaSwapDeposit.sol\":\"MetaSwapDeposit\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0xca0c2396dbeb3503b51abf4248ebf77a1461edad513c01529df51850a012bee3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"contracts/stable/IMetaSwap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IMetaSwap {\\n    // pool data view functions\\n    function getA() external view returns (uint256);\\n\\n    function getToken(uint8 index) external view returns (IERC20);\\n\\n    function getTokenIndex(address tokenAddress) external view returns (uint8);\\n\\n    function getTokenBalance(uint8 index) external view returns (uint256);\\n\\n    function getVirtualPrice() external view returns (uint256);\\n\\n    function isGuarded() external view returns (bool);\\n\\n    function swapStorage()\\n        external\\n        view\\n        returns (\\n            uint256 initialA,\\n            uint256 futureA,\\n            uint256 initialATime,\\n            uint256 futureATime,\\n            uint256 swapFee,\\n            uint256 adminFee,\\n            uint256 defaultDepositFee,\\n            uint256 defaultWithdrawFee,\\n            address lpToken,\\n            address devaddr\\n        );\\n\\n    // min return calculation functions\\n    function calculateSwap(\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx\\n    ) external view returns (uint256);\\n\\n    function calculateSwapUnderlying(\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx\\n    ) external view returns (uint256);\\n\\n    function calculateTokenAmount(\\n        address account,\\n        uint256[] calldata amounts,\\n        bool deposit\\n    ) external view returns (uint256);\\n\\n    function calculateRemoveLiquidity(address account, uint256 amount)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    function calculateRemoveLiquidityOneToken(\\n        address account,\\n        uint256 tokenAmount,\\n        uint8 tokenIndex\\n    ) external view returns (uint256 availableTokenAmount);\\n\\n    function swap(\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx,\\n        uint256 minDy,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function swapUnderlying(\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx,\\n        uint256 minDy,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function addLiquidity(\\n        uint256[] calldata amounts,\\n        uint256 minToMint,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function removeLiquidity(\\n        uint256 amount,\\n        uint256[] calldata minAmounts,\\n        uint256 deadline\\n    ) external returns (uint256[] memory);\\n\\n    function removeLiquidityOneToken(\\n        uint256 tokenAmount,\\n        uint8 tokenIndex,\\n        uint256 minAmount,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function removeLiquidityImbalance(\\n        uint256[] calldata amounts,\\n        uint256 maxBurnAmount,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    // withdraw fee update function\\n    function updateUserWithdrawFee(address recipient, uint256 transferAmount)\\n        external;\\n}\",\"keccak256\":\"0xce841f91f5d64571abe665dd2cffa458e718576365a77ed60fe242eb10054ca2\",\"license\":\"MIT\"},\"contracts/stable/ISwap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\ninterface ISwap {\\n    // pool data view functions\\n    function getA() external view returns (uint256);\\n\\n    function getToken(uint8 index) external view returns (IERC20);\\n\\n    function getTokenIndex(address tokenAddress) external view returns (uint8);\\n\\n    function getTokenBalance(uint8 index) external view returns (uint256);\\n\\n    function getVirtualPrice() external view returns (uint256);\\n\\n    // min return calculation functions\\n    function calculateSwap(\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx\\n    ) external view returns (uint256);\\n\\n    function calculateTokenAmount(\\n        address account,\\n        uint256[] calldata amounts,\\n        bool deposit\\n    ) external view returns (uint256);\\n\\n    function calculateRemoveLiquidity(address account, uint256 amount)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    function calculateRemoveLiquidityOneToken(\\n        address account,\\n        uint256 tokenAmount,\\n        uint8 tokenIndex\\n    ) external view returns (uint256 availableTokenAmount);\\n\\n    function swap(\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx,\\n        uint256 minDy,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function addLiquidity(\\n        uint256[] calldata amounts,\\n        uint256 minToMint,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function removeLiquidity(\\n        uint256 amount,\\n        uint256[] calldata minAmounts,\\n        uint256 deadline\\n    ) external returns (uint256[] memory);\\n\\n    function removeLiquidityOneToken(\\n        uint256 tokenAmount,\\n        uint8 tokenIndex,\\n        uint256 minAmount,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function removeLiquidityImbalance(\\n        uint256[] calldata amounts,\\n        uint256 maxBurnAmount,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    // withdraw fee update function\\n    function updateUserWithdrawFee(address recipient, uint256 transferAmount)\\n        external;\\n}\",\"keccak256\":\"0x48fca3a23b5ab64504811b274cfe36d98994f36934c77b64f9a7a356ced06869\",\"license\":\"MIT\"},\"contracts/stable/MetaSwapDeposit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\n\\nimport \\\"./IMetaSwap.sol\\\";\\nimport \\\"./ISwap.sol\\\";\\n\\n/**\\n * @title MetaSwapDeposit\\n * @notice This contract flattens the LP token in a MetaSwap pool for easier user access.\\n *\\n * For example, suppose there exists a base Swap pool consisting of [DAI, USDC, USDT].\\n * Then a MetaSwap pool can be created with [BUSD, BaseSwapLPToken] to allow trades between either\\n * the LP token or the underlying tokens and BUSD.\\n *\\n * MetaSwapDeposit flattens the LP token and remaps them to [BUSD, DAI, USDC, USDT], allowing users\\n * to ignore the dependency on BaseSwapLPToken.\\n */\\ncontract MetaSwapDeposit {\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n\\n    ISwap public baseSwap;\\n    IMetaSwap public metaSwap;\\n    IERC20[] public baseTokens;\\n    IERC20[] public metaTokens;\\n    IERC20[] public tokens;\\n    IERC20 public metaLPToken;\\n\\n    uint256 constant MAX_UINT256 = 2**256 - 1;\\n\\n    struct RemoveLiquidityImbalanceInfo {\\n        ISwap baseSwap;\\n        IMetaSwap metaSwap;\\n        IERC20 metaLPToken;\\n        uint8 baseLPTokenIndex;\\n        bool withdrawFromBase;\\n        uint256 leftoverMetaLPTokenAmount;\\n    }\\n\\n    /**\\n     * @notice Sets the address for the base swap contract, meta swap contract, and the\\n     * meta swap LP token contract.\\n     * @param _baseSwap the address of the base swap contract\\n     * @param _metaSwap the address of the meta swap contract\\n     * @param _metaLPToken the address of the meta swap LP token contract\\n     */\\n    constructor(\\n        ISwap _baseSwap,\\n        IMetaSwap _metaSwap,\\n        IERC20 _metaLPToken\\n    ) public {\\n        // Check and approve base level tokens to be deposited to the base swap contract\\n        for (uint8 i = 0; i < 32; i++) {\\n            try _baseSwap.getToken(i) returns (IERC20 token) {\\n                baseTokens.push(token);\\n                token.approve(address(_baseSwap), MAX_UINT256);\\n                token.approve(address(_metaSwap), MAX_UINT256);\\n            } catch {\\n                break;\\n            }\\n        }\\n\\n        // Check and approve meta level tokens to be deposited to the meta swap contract\\n        IERC20 baseLPToken;\\n        for (uint8 i = 0; i < 32; i++) {\\n            try _metaSwap.getToken(i) returns (IERC20 token) {\\n                baseLPToken = token;\\n                metaTokens.push(token);\\n                tokens.push(token);\\n                token.approve(address(_metaSwap), MAX_UINT256);\\n            } catch {\\n                break;\\n            }\\n        }\\n\\n        tokens[tokens.length - 1] = baseTokens[0];\\n        for (uint8 i = 1; i < baseTokens.length; i++) {\\n            tokens.push(baseTokens[i]);\\n        }\\n\\n        // Approve base swap LP token to be burned by the base swap contract for withdrawing\\n        baseLPToken.approve(address(_baseSwap), MAX_UINT256);\\n        // Approve meta swap LP token to be burned by the meta swap contract for withdrawing\\n        _metaLPToken.approve(address(_metaSwap), MAX_UINT256);\\n\\n        // Initialize storage variables\\n        baseSwap = _baseSwap;\\n        metaSwap = _metaSwap;\\n        metaLPToken = _metaLPToken;\\n    }\\n\\n    // Mutative functions\\n\\n    /**\\n     * @notice Swap two underlying tokens using the meta pool and the base pool\\n     * @param tokenIndexFrom the token the user wants to swap from\\n     * @param tokenIndexTo the token the user wants to swap to\\n     * @param dx the amount of tokens the user wants to swap from\\n     * @param minDy the min amount the user would like to receive, or revert.\\n     * @param deadline latest timestamp to accept this transaction\\n     */\\n    function swap(\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx,\\n        uint256 minDy,\\n        uint256 deadline\\n    ) external returns (uint256) {\\n        tokens[tokenIndexFrom].safeTransferFrom(msg.sender, address(this), dx);\\n        uint256 tokenToAmount =\\n            metaSwap.swapUnderlying(\\n                tokenIndexFrom,\\n                tokenIndexTo,\\n                dx,\\n                minDy,\\n                deadline\\n            );\\n        tokens[tokenIndexTo].safeTransfer(msg.sender, tokenToAmount);\\n        return tokenToAmount;\\n    }\\n\\n    /**\\n     * @notice Add liquidity to the pool with the given amounts of tokens\\n     * @param amounts the amounts of each token to add, in their native precision\\n     * @param minToMint the minimum LP tokens adding this amount of liquidity\\n     * should mint, otherwise revert. Handy for front-running mitigation\\n     * @param deadline latest timestamp to accept this transaction\\n     * @return amount of LP token user minted and received\\n     */\\n    function addLiquidity(\\n        uint256[] calldata amounts,\\n        uint256 minToMint,\\n        uint256 deadline\\n    ) external returns (uint256) {\\n        IERC20[] memory memBaseTokens = baseTokens;\\n        IERC20[] memory memMetaTokens = metaTokens;\\n        uint256 baseLPTokenIndex = memMetaTokens.length - 1;\\n\\n        require(amounts.length == memBaseTokens.length + baseLPTokenIndex);\\n\\n        uint256 baseLPTokenAmount;\\n        {\\n            // Transfer base tokens from the caller and deposit to the base swap pool\\n            uint256[] memory baseAmounts = new uint256[](memBaseTokens.length);\\n            bool shouldDepositBaseTokens;\\n            for (uint8 i = 0; i < memBaseTokens.length; i++) {\\n                IERC20 token = memBaseTokens[i];\\n                uint256 depositAmount = amounts[baseLPTokenIndex + i];\\n                if (depositAmount > 0) {\\n                    token.safeTransferFrom(\\n                        msg.sender,\\n                        address(this),\\n                        depositAmount\\n                    );\\n                    baseAmounts[i] = token.balanceOf(address(this)); // account for any fees on transfer\\n                    shouldDepositBaseTokens = true;\\n                }\\n            }\\n            if (shouldDepositBaseTokens) {\\n                baseLPTokenAmount = baseSwap.addLiquidity(\\n                    baseAmounts,\\n                    0,\\n                    deadline\\n                );\\n            }\\n        }\\n\\n        uint256 metaLPTokenAmount;\\n        {\\n            // Transfer remaining meta level tokens from the caller and deposit to the meta swap pool\\n            uint256[] memory metaAmounts = new uint256[](metaTokens.length);\\n            for (uint8 i = 0; i < baseLPTokenIndex; i++) {\\n                IERC20 token = memMetaTokens[i];\\n                uint256 depositAmount = amounts[i];\\n                if (depositAmount > 0) {\\n                    token.safeTransferFrom(\\n                        msg.sender,\\n                        address(this),\\n                        depositAmount\\n                    );\\n                    metaAmounts[i] = token.balanceOf(address(this)); // account for any fees on transfer\\n                }\\n            }\\n            metaAmounts[baseLPTokenIndex] = baseLPTokenAmount;\\n            metaLPTokenAmount = metaSwap.addLiquidity(\\n                metaAmounts,\\n                minToMint,\\n                deadline\\n            );\\n        }\\n\\n        // Transfer the meta lp token to the caller\\n        metaLPToken.safeTransfer(msg.sender, metaLPTokenAmount);\\n\\n        return metaLPTokenAmount;\\n    }\\n\\n    /**\\n     * @notice Burn LP tokens to remove liquidity from the pool. Withdraw fee that decays linearly\\n     * over period of 4 weeks since last deposit will apply.\\n     * @dev Liquidity can always be removed, even when the pool is paused.\\n     * @param amount the amount of LP tokens to burn\\n     * @param minAmounts the minimum amounts of each token in the pool\\n     *        acceptable for this burn. Useful as a front-running mitigation\\n     * @param deadline latest timestamp to accept this transaction\\n     * @return amounts of tokens user received\\n     */\\n    function removeLiquidity(\\n        uint256 amount,\\n        uint256[] calldata minAmounts,\\n        uint256 deadline\\n    ) external returns (uint256[] memory) {\\n        IERC20[] memory memBaseTokens = baseTokens;\\n        IERC20[] memory memMetaTokens = metaTokens;\\n        uint256[] memory totalRemovedAmounts;\\n\\n        {\\n            uint256 numOfAllTokens =\\n                memBaseTokens.length + memMetaTokens.length - 1;\\n            require(minAmounts.length == numOfAllTokens, \\\"out of range\\\");\\n            totalRemovedAmounts = new uint256[](numOfAllTokens);\\n        }\\n\\n        // Transfer meta lp token from the caller to this\\n        metaLPToken.safeTransferFrom(msg.sender, address(this), amount);\\n\\n        uint256 baseLPTokenAmount;\\n        {\\n            // Remove liquidity from the meta swap pool\\n            uint256[] memory removedAmounts;\\n            uint256 baseLPTokenIndex = memMetaTokens.length - 1;\\n            {\\n                uint256[] memory metaMinAmounts =\\n                    new uint256[](memMetaTokens.length);\\n                for (uint8 i = 0; i < baseLPTokenIndex; i++) {\\n                    metaMinAmounts[i] = minAmounts[i];\\n                }\\n                removedAmounts = metaSwap.removeLiquidity(\\n                    amount,\\n                    metaMinAmounts,\\n                    deadline\\n                );\\n            }\\n\\n            // Send the meta level tokens to the caller\\n            for (uint8 i = 0; i < baseLPTokenIndex; i++) {\\n                totalRemovedAmounts[i] = removedAmounts[i];\\n                memMetaTokens[i].safeTransfer(msg.sender, removedAmounts[i]);\\n            }\\n            baseLPTokenAmount = removedAmounts[baseLPTokenIndex];\\n\\n            // Remove liquidity from the base swap pool\\n            {\\n                uint256[] memory baseMinAmounts =\\n                    new uint256[](memBaseTokens.length);\\n                for (uint8 i = 0; i < baseLPTokenIndex; i++) {\\n                    baseMinAmounts[i] = minAmounts[baseLPTokenIndex + i];\\n                }\\n                removedAmounts = baseSwap.removeLiquidity(\\n                    baseLPTokenAmount,\\n                    baseMinAmounts,\\n                    deadline\\n                );\\n            }\\n\\n            // Send the base level tokens to the caller\\n            for (uint8 i = 0; i < memBaseTokens.length; i++) {\\n                totalRemovedAmounts[baseLPTokenIndex + i] = removedAmounts[i];\\n                memBaseTokens[i].safeTransfer(msg.sender, removedAmounts[i]);\\n            }\\n        }\\n\\n        return totalRemovedAmounts;\\n    }\\n\\n    /**\\n     * @notice Remove liquidity from the pool all in one token. Withdraw fee that decays linearly\\n     * over period of 4 weeks since last deposit will apply.\\n     * @param tokenAmount the amount of the token you want to receive\\n     * @param tokenIndex the index of the token you want to receive\\n     * @param minAmount the minimum amount to withdraw, otherwise revert\\n     * @param deadline latest timestamp to accept this transaction\\n     * @return amount of chosen token user received\\n     */\\n    function removeLiquidityOneToken(\\n        uint256 tokenAmount,\\n        uint8 tokenIndex,\\n        uint256 minAmount,\\n        uint256 deadline\\n    ) external returns (uint256) {\\n        uint8 baseLPTokenIndex = uint8(metaTokens.length - 1);\\n        uint8 baseTokensLength = uint8(baseTokens.length);\\n\\n        metaLPToken.safeTransferFrom(msg.sender, address(this), tokenAmount);\\n\\n        IERC20 token;\\n        if (tokenIndex < baseLPTokenIndex) {\\n            metaSwap.removeLiquidityOneToken(\\n                tokenAmount,\\n                tokenIndex,\\n                minAmount,\\n                deadline\\n            );\\n            token = metaTokens[tokenIndex];\\n        } else if (tokenIndex < baseLPTokenIndex + baseTokensLength) {\\n            uint256 removedBaseLPTokenAmount =\\n                metaSwap.removeLiquidityOneToken(\\n                    tokenAmount,\\n                    baseLPTokenIndex,\\n                    0,\\n                    deadline\\n                );\\n\\n            baseSwap.removeLiquidityOneToken(\\n                removedBaseLPTokenAmount,\\n                tokenIndex - baseLPTokenIndex,\\n                minAmount,\\n                deadline\\n            );\\n            token = baseTokens[tokenIndex - baseLPTokenIndex];\\n        } else {\\n            revert(\\\"out of range\\\");\\n        }\\n\\n        uint256 amountWithdrawn = token.balanceOf(address(this));\\n        token.safeTransfer(msg.sender, amountWithdrawn);\\n        return amountWithdrawn;\\n    }\\n\\n    /**\\n     * @notice Remove liquidity from the pool, weighted differently than the\\n     * pool's current balances. Withdraw fee that decays linearly\\n     * over period of 4 weeks since last deposit will apply.\\n     * @param amounts how much of each token to withdraw\\n     * @param maxBurnAmount the max LP token provider is willing to pay to\\n     * remove liquidity. Useful as a front-running mitigation.\\n     * @param deadline latest timestamp to accept this transaction\\n     * @return amount of LP tokens burned\\n     */\\n    function removeLiquidityImbalance(\\n        uint256[] calldata amounts,\\n        uint256 maxBurnAmount,\\n        uint256 deadline\\n    ) external returns (uint256) {\\n        IERC20[] memory memBaseTokens = baseTokens;\\n        IERC20[] memory memMetaTokens = metaTokens;\\n        uint256[] memory metaAmounts = new uint256[](memMetaTokens.length);\\n        uint256[] memory baseAmounts = new uint256[](memBaseTokens.length);\\n\\n        require(\\n            amounts.length == memBaseTokens.length + memMetaTokens.length - 1,\\n            \\\"out of range\\\"\\n        );\\n\\n        RemoveLiquidityImbalanceInfo memory v =\\n            RemoveLiquidityImbalanceInfo(\\n                baseSwap,\\n                metaSwap,\\n                metaLPToken,\\n                uint8(metaAmounts.length - 1),\\n                false,\\n                0\\n            );\\n\\n        for (uint8 i = 0; i < v.baseLPTokenIndex; i++) {\\n            metaAmounts[i] = amounts[i];\\n        }\\n\\n        for (uint8 i = 0; i < baseAmounts.length; i++) {\\n            baseAmounts[i] = amounts[v.baseLPTokenIndex + i];\\n            if (baseAmounts[i] > 0) {\\n                v.withdrawFromBase = true;\\n            }\\n        }\\n\\n        // Calculate how much base LP token we need to get the desired amount of underlying tokens\\n        if (v.withdrawFromBase) {\\n            metaAmounts[v.baseLPTokenIndex] = v\\n                .baseSwap\\n                .calculateTokenAmount(address(this), baseAmounts, false)\\n                .mul(10005)\\n                .div(10000);\\n        }\\n\\n        // Transfer meta swap LP token from the caller to this contract\\n        v.metaLPToken.safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            maxBurnAmount\\n        );\\n\\n        // Withdraw the paired meta level tokens and the base LP token from the meta swap pool\\n        uint256 burnedMetaLPTokenAmount =\\n            v.metaSwap.removeLiquidityImbalance(\\n                metaAmounts,\\n                maxBurnAmount,\\n                deadline\\n            );\\n        v.leftoverMetaLPTokenAmount = maxBurnAmount.sub(\\n            burnedMetaLPTokenAmount\\n        );\\n\\n        // If underlying tokens are desired, withdraw them from the base swap pool\\n        if (v.withdrawFromBase) {\\n            v.baseSwap.removeLiquidityImbalance(\\n                baseAmounts,\\n                metaAmounts[v.baseLPTokenIndex],\\n                deadline\\n            );\\n\\n            // Base swap may require LESS base LP token than the amount we have\\n            // In that case, deposit it to the meta swap pool.\\n            uint256[] memory leftovers = new uint256[](metaAmounts.length);\\n            IERC20 baseLPToken = memMetaTokens[v.baseLPTokenIndex];\\n            uint256 leftoverBaseLPTokenAmount =\\n                baseLPToken.balanceOf(address(this));\\n            if (leftoverBaseLPTokenAmount > 0) {\\n                leftovers[v.baseLPTokenIndex] = leftoverBaseLPTokenAmount;\\n                v.leftoverMetaLPTokenAmount = v.leftoverMetaLPTokenAmount.add(\\n                    v.metaSwap.addLiquidity(leftovers, 0, deadline)\\n                );\\n            }\\n        }\\n\\n        // Transfer all withdrawn tokens to the caller\\n        for (uint8 i = 0; i < amounts.length; i++) {\\n            IERC20 token;\\n            if (i < v.baseLPTokenIndex) {\\n                token = memMetaTokens[i];\\n            } else {\\n                token = memBaseTokens[i - v.baseLPTokenIndex];\\n            }\\n            if (amounts[i] > 0) {\\n                token.safeTransfer(msg.sender, amounts[i]);\\n            }\\n        }\\n\\n        // If there were any extra meta lp token, transfer them back to the caller as well\\n        if (v.leftoverMetaLPTokenAmount > 0) {\\n            v.metaLPToken.safeTransfer(msg.sender, v.leftoverMetaLPTokenAmount);\\n        }\\n\\n        return maxBurnAmount - v.leftoverMetaLPTokenAmount;\\n    }\\n\\n    // VIEW FUNCTIONS\\n\\n    /**\\n     * @notice A simple method to calculate prices from deposits or\\n     * withdrawals, excluding fees but including slippage. This is\\n     * helpful as an input into the various \\\"min\\\" parameters on calls\\n     * to fight front-running. When withdrawing from the base pool in imbalanced\\n     * fashion, the recommended slippage setting is 0.2% or higher.\\n     *\\n     * @dev This shouldn't be used outside frontends for user estimates.\\n     *\\n     * @param account address that is depositing or withdrawing tokens\\n     * @param amounts an array of token amounts to deposit or withdrawal,\\n     * corresponding to pooledTokens. The amount should be in each\\n     * pooled token's native precision. If a token charges a fee on transfers,\\n     * use the amount that gets transferred after the fee.\\n     * @param deposit whether this is a deposit or a withdrawal\\n     * @return token amount the user will receive\\n     */\\n    function calculateTokenAmount(\\n        address account,\\n        uint256[] calldata amounts,\\n        bool deposit\\n    ) external view returns (uint256) {\\n        account = address(this);\\n        uint256[] memory metaAmounts = new uint256[](metaTokens.length);\\n        uint256[] memory baseAmounts = new uint256[](baseTokens.length);\\n        uint256 baseLPTokenIndex = metaAmounts.length - 1;\\n\\n        for (uint8 i = 0; i < baseLPTokenIndex; i++) {\\n            metaAmounts[i] = amounts[i];\\n        }\\n\\n        for (uint8 i = 0; i < baseAmounts.length; i++) {\\n            baseAmounts[i] = amounts[baseLPTokenIndex + i];\\n        }\\n\\n        uint256 baseLPTokenAmount =\\n            baseSwap.calculateTokenAmount(account, baseAmounts, deposit);\\n        metaAmounts[baseLPTokenIndex] = baseLPTokenAmount;\\n\\n        return metaSwap.calculateTokenAmount(account, metaAmounts, deposit);\\n    }\\n\\n    /**\\n     * @notice A simple method to calculate amount of each underlying\\n     * tokens that is returned upon burning given amount of LP tokens\\n     * @param account the address that is withdrawing tokens\\n     * @param amount the amount of LP tokens that would be burned on withdrawal\\n     * @return array of token balances that the user will receive\\n     */\\n    function calculateRemoveLiquidity(address account, uint256 amount)\\n        external\\n        view\\n        returns (uint256[] memory)\\n    {\\n        account = address(this); // overwrite account\\n        uint256[] memory metaAmounts =\\n            metaSwap.calculateRemoveLiquidity(account, amount);\\n        uint8 baseLPTokenIndex = uint8(metaAmounts.length - 1);\\n        uint256[] memory baseAmounts =\\n            baseSwap.calculateRemoveLiquidity(\\n                account,\\n                metaAmounts[baseLPTokenIndex]\\n            );\\n\\n        uint256[] memory totalAmounts =\\n            new uint256[](baseLPTokenIndex + baseAmounts.length);\\n        for (uint8 i = 0; i < baseLPTokenIndex; i++) {\\n            totalAmounts[i] = metaAmounts[i];\\n        }\\n        for (uint8 i = 0; i < baseAmounts.length; i++) {\\n            totalAmounts[baseLPTokenIndex + i] = baseAmounts[i];\\n        }\\n\\n        return totalAmounts;\\n    }\\n\\n    /**\\n     * @notice Calculate the amount of underlying token available to withdraw\\n     * when withdrawing via only single token\\n     * @param account the address that is withdrawing tokens\\n     * @param tokenAmount the amount of LP token to burn\\n     * @param tokenIndex index of which token will be withdrawn\\n     * @return availableTokenAmount calculated amount of underlying token\\n     * available to withdraw\\n     */\\n    function calculateRemoveLiquidityOneToken(\\n        address account,\\n        uint256 tokenAmount,\\n        uint8 tokenIndex\\n    ) external view returns (uint256) {\\n        account = address(this); // overwrite account\\n        uint8 baseLPTokenIndex = uint8(metaTokens.length - 1);\\n\\n        if (tokenIndex < baseLPTokenIndex) {\\n            return\\n                metaSwap.calculateRemoveLiquidityOneToken(\\n                    account,\\n                    tokenAmount,\\n                    tokenIndex\\n                );\\n        } else {\\n            uint256 baseLPTokenAmount =\\n                metaSwap.calculateRemoveLiquidityOneToken(\\n                    account,\\n                    tokenAmount,\\n                    baseLPTokenIndex\\n                );\\n            return\\n                baseSwap.calculateRemoveLiquidityOneToken(\\n                    account,\\n                    baseLPTokenAmount,\\n                    tokenIndex - baseLPTokenIndex\\n                );\\n        }\\n    }\\n\\n    /**\\n     * @notice Return address of the pooled token at given index. Reverts if tokenIndex is out of range.\\n     * This is a flattened representation of the pooled tokens.\\n     * @param index the index of the token\\n     * @return address of the token at given index\\n     */\\n    function getToken(uint256 index) external view returns (IERC20) {\\n        require(index < tokens.length, \\\"index out of range\\\");\\n        return tokens[index];\\n    }\\n\\n    /**\\n     * @notice Calculate amount of tokens you receive on swap\\n     * @param tokenIndexFrom the token the user wants to sell\\n     * @param tokenIndexTo the token the user wants to buy\\n     * @param dx the amount of tokens the user wants to sell. If the token charges\\n     * a fee on transfers, use the amount that gets transferred after the fee.\\n     * @return amount of tokens the user will receive\\n     */\\n    function calculateSwap(\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx\\n    ) external view returns (uint256) {\\n        return\\n            metaSwap.calculateSwapUnderlying(tokenIndexFrom, tokenIndexTo, dx);\\n    }\\n}\",\"keccak256\":\"0x985e3768f045b61979c833a714fe6d4efc888222fc2b24acc744fb4c2d08ad48\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200330838038062003308833981810160405260608110156200003757600080fd5b508051602082015160409092015190919060005b60208160ff1610156200022657836001600160a01b03166382b86600826040518263ffffffff1660e01b8152600401808260ff16815260200191505060206040518083038186803b158015620000a057600080fd5b505afa925050508015620000c757506040513d6020811015620000c257600080fd5b505160015b620000d25762000226565b6002805460018101825560009182527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0180546001600160a01b0319166001600160a01b038481169182179092556040805163095ea7b360e01b81529289166004840152600019602484015251909263095ea7b392604480820193602093909283900390910190829087803b1580156200016b57600080fd5b505af115801562000180573d6000803e3d6000fd5b505050506040513d60208110156200019757600080fd5b50506040805163095ea7b360e01b81526001600160a01b038681166004830152600019602483015291519183169163095ea7b3916044808201926020929091908290030181600087803b158015620001ee57600080fd5b505af115801562000203573d6000803e3d6000fd5b505050506040513d60208110156200021a57600080fd5b5050506001016200004b565b506000805b60208160ff161015620003c457836001600160a01b03166382b86600826040518263ffffffff1660e01b8152600401808260ff16815260200191505060206040518083038186803b1580156200028057600080fd5b505afa925050508015620002a757506040513d6020811015620002a257600080fd5b505160015b620002b257620003c4565b6003805460018181019092557fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b0180546001600160a01b038085166001600160a01b0319928316811790935560048054948501815560008181527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b909501805490931684179092556040805163095ea7b360e01b8152918a1692820192909252600019602482015290519395508593919263095ea7b3926044808401936020939083900390910190829087803b1580156200038c57600080fd5b505af1158015620003a1573d6000803e3d6000fd5b505050506040513d6020811015620003b857600080fd5b5050506001016200022b565b506002600081548110620003d457fe5b600091825260209091200154600480546001600160a01b03909216916000198101908110620003ff57fe5b600091825260209091200180546001600160a01b0319166001600160a01b039290921691909117905560015b60025460ff821610156200048f57600460028260ff16815481106200044c57fe5b6000918252602080832090910154835460018181018655948452919092200180546001600160a01b0319166001600160a01b03909216919091179055016200042b565b50806001600160a01b031663095ea7b3856000196040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b158015620004ea57600080fd5b505af1158015620004ff573d6000803e3d6000fd5b505050506040513d60208110156200051657600080fd5b50506040805163095ea7b360e01b81526001600160a01b038581166004830152600019602483015291519184169163095ea7b3916044808201926020929091908290030181600087803b1580156200056d57600080fd5b505af115801562000582573d6000803e3d6000fd5b505050506040513d60208110156200059957600080fd5b5050600080546001600160a01b039586166001600160a01b03199182161790915560018054948616948216949094179093555060058054919093169116179055612d1f80620005e96000396000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c80639750a8ee11610097578063d265047211610066578063d265047214610429578063e4b50cb814610431578063f9273ffb1461044e578063fd0bd099146104ce57610100565b80639750a8ee146103b457806398899f40146103bc578063a95b089f146103f1578063cb2ef5fe1461042157610100565b80634f64b2be116100d35780634f64b2be146102bb5780637c61e561146102d857806384cdd9bc14610304578063916955861461037857610100565b806331cd52b014610105578063328123a2146101ca5780633e3a1560146102035780634d49e87d14610247575b600080fd5b61017a6004803603606081101561011b57600080fd5b81359190810190604081016020820135600160201b81111561013c57600080fd5b82018360208201111561014e57600080fd5b803590602001918460208302840111600160201b8311171561016f57600080fd5b9193509150356104eb565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156101b657818101518382015260200161019e565b505050509050019250505060405180910390f35b6101e7600480360360208110156101e057600080fd5b5035610b96565b604080516001600160a01b039092168252519081900360200190f35b6102356004803603608081101561021957600080fd5b5080359060ff6020820135169060408101359060600135610bbd565b60408051918252519081900360200190f35b6102356004803603606081101561025d57600080fd5b810190602081018135600160201b81111561027757600080fd5b82018360208201111561028957600080fd5b803590602001918460208302840111600160201b831117156102aa57600080fd5b919350915080359060200135610ef6565b6101e7600480360360208110156102d157600080fd5b5035611443565b61017a600480360360408110156102ee57600080fd5b506001600160a01b038135169060200135611450565b6102356004803603606081101561031a57600080fd5b810190602081018135600160201b81111561033457600080fd5b82018360208201111561034657600080fd5b803590602001918460208302840111600160201b8311171561036757600080fd5b9193509150803590602001356117a9565b610235600480360360a081101561038e57600080fd5b5060ff81358116916020810135909116906040810135906060810135906080013561202a565b6101e7612139565b610235600480360360608110156103d257600080fd5b5080356001600160a01b0316906020810135906040013560ff16612148565b6102356004803603606081101561040757600080fd5b5060ff813581169160208101359091169060400135612320565b6101e76123b1565b6101e76123c0565b6101e76004803603602081101561044757600080fd5b50356123cf565b6102356004803603606081101561046457600080fd5b6001600160a01b038235169190810190604081016020820135600160201b81111561048e57600080fd5b8201836020820111156104a057600080fd5b803590602001918460208302840111600160201b831117156104c157600080fd5b9193509150351515612445565b6101e7600480360360208110156104e457600080fd5b503561273a565b606080600280548060200260200160405190810160405280929190818152602001828054801561054457602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610526575b50505050509050606060038054806020026020016040519081016040528092919081815260200182805480156105a357602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610585575b5050835186519495506060940160001901925050508681146105fb576040805162461bcd60e51b815260206004820152600c60248201526b6f7574206f662072616e676560a01b604482015290519081900360640190fd5b8067ffffffffffffffff8111801561061257600080fd5b5060405190808252806020026020018201604052801561063c578160200160208202803683370190505b5060055490925061065991506001600160a01b031633308b612747565b600060606000600185510390506060855167ffffffffffffffff8111801561068057600080fd5b506040519080825280602002602001820160405280156106aa578160200160208202803683370190505b50905060005b828160ff1610156106f3578b8b8260ff168181106106ca57fe5b90506020020135828260ff16815181106106e057fe5b60209081029190910101526001016106b0565b50600160009054906101000a90046001600160a01b03166001600160a01b03166331cd52b08d838c6040518463ffffffff1660e01b81526004018084815260200180602001838152602001828103825284818151815260200191508051906020019060200280838360005b8381101561077657818101518382015260200161075e565b50505050905001945050505050600060405180830381600087803b15801561079d57600080fd5b505af11580156107b1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260208110156107da57600080fd5b8101908080516040519392919084600160201b8211156107f957600080fd5b90830190602082018581111561080e57600080fd5b82518660208202830111600160201b8211171561082a57600080fd5b82525081516020918201928201910280838360005b8381101561085757818101518382015260200161083f565b5050505090500160405250505092505060005b818160ff1610156108f957828160ff168151811061088457fe5b6020026020010151858260ff168151811061089b57fe5b6020026020010181815250506108f133848360ff16815181106108ba57fe5b6020026020010151888460ff16815181106108d157fe5b60200260200101516001600160a01b03166127a79092919063ffffffff16565b60010161086a565b5081818151811061090657fe5b602002602001015192506060865167ffffffffffffffff8111801561092a57600080fd5b50604051908082528060200260200182016040528015610954578160200160208202803683370190505b50905060005b828160ff16101561099f578b8b8260ff16850181811061097657fe5b90506020020135828260ff168151811061098c57fe5b602090810291909101015260010161095a565b5060008054906101000a90046001600160a01b03166001600160a01b03166331cd52b085838c6040518463ffffffff1660e01b81526004018084815260200180602001838152602001828103825284818151815260200191508051906020019060200280838360005b83811015610a20578181015183820152602001610a08565b50505050905001945050505050600060405180830381600087803b158015610a4757600080fd5b505af1158015610a5b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526020811015610a8457600080fd5b8101908080516040519392919084600160201b821115610aa357600080fd5b908301906020820185811115610ab857600080fd5b82518660208202830111600160201b82111715610ad457600080fd5b82525081516020918201928201910280838360005b83811015610b01578181015183820152602001610ae9565b5050505090500160405250505092505060005b86518160ff161015610b8657828160ff1681518110610b2f57fe5b6020026020010151858260ff16840181518110610b4857fe5b602002602001018181525050610b7e33848360ff1681518110610b6757fe5b6020026020010151898460ff16815181106108d157fe5b600101610b14565b50929a9950505050505050505050565b60028181548110610ba357fe5b6000918252602090912001546001600160a01b0316905081565b600354600254600554600092600019019190610be4906001600160a01b031633308a612747565b60008260ff168760ff161015610cb257600154604080516301f1d0ab60e51b8152600481018b905260ff8a166024820152604481018990526064810188905290516001600160a01b0390921691633e3a1560916084808201926020929091908290030181600087803b158015610c5957600080fd5b505af1158015610c6d573d6000803e3d6000fd5b505050506040513d6020811015610c8357600080fd5b50506003805460ff8916908110610c9657fe5b6000918252602090912001546001600160a01b03169050610e59565b81830160ff168760ff161015610e1d57600154604080516301f1d0ab60e51b8152600481018b905260ff8616602482015260006044820181905260648201899052915191926001600160a01b031691633e3a15609160848082019260209290919082900301818787803b158015610d2857600080fd5b505af1158015610d3c573d6000803e3d6000fd5b505050506040513d6020811015610d5257600080fd5b505160008054604080516301f1d0ab60e51b81526004810185905260ff898e03166024820152604481018c9052606481018b905290519394506001600160a01b0390911692633e3a156092608480840193602093929083900390910190829087803b158015610dc057600080fd5b505af1158015610dd4573d6000803e3d6000fd5b505050506040513d6020811015610dea57600080fd5b50506002805460ff868b0316908110610dff57fe5b6000918252602090912001546001600160a01b03169150610e599050565b6040805162461bcd60e51b815260206004820152600c60248201526b6f7574206f662072616e676560a01b604482015290519081900360640190fd5b6000816001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015610ea857600080fd5b505afa158015610ebc573d6000803e3d6000fd5b505050506040513d6020811015610ed257600080fd5b50519050610eea6001600160a01b03831633836127a7565b98975050505050505050565b600060606002805480602002602001604051908101604052809291908181526020018280548015610f5057602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610f32575b5050505050905060606003805480602002602001604051908101604052809291908181526020018280548015610faf57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610f91575b50505050509050600060018251039050808351018888905014610fd157600080fd5b60006060845167ffffffffffffffff81118015610fed57600080fd5b50604051908082528060200260200182016040528015611017578160200160208202803683370190505b5090506000805b86518160ff16101561111d576000878260ff168151811061103b57fe5b6020026020010151905060008d8d8460ff16890181811061105857fe5b90506020020135905060008111156111135761107f6001600160a01b038316333084612747565b604080516370a0823160e01b815230600482015290516001600160a01b038416916370a08231916024808301926020929190829003018186803b1580156110c557600080fd5b505afa1580156110d9573d6000803e3d6000fd5b505050506040513d60208110156110ef57600080fd5b50518551869060ff861690811061110257fe5b602002602001018181525050600193505b505060010161101e565b5080156111ef5760008054604051634d49e87d60e01b815260248101839052604481018b90526060600482019081528551606483015285516001600160a01b0390931693634d49e87d93879391928e92909182916084019060208088019102808383895b83811015611199578181015183820152602001611181565b50505050905001945050505050602060405180830381600087803b1580156111c057600080fd5b505af11580156111d4573d6000803e3d6000fd5b505050506040513d60208110156111ea57600080fd5b505192505b505060035460009060609067ffffffffffffffff8111801561121057600080fd5b5060405190808252806020026020018201604052801561123a578160200160208202803683370190505b50905060005b848160ff161015611338576000868260ff168151811061125c57fe5b6020026020010151905060008d8d8460ff1681811061127757fe5b905060200201359050600081111561132e5761129e6001600160a01b038316333084612747565b604080516370a0823160e01b815230600482015290516001600160a01b038416916370a08231916024808301926020929190829003018186803b1580156112e457600080fd5b505afa1580156112f8573d6000803e3d6000fd5b505050506040513d602081101561130e57600080fd5b50518451859060ff861690811061132157fe5b6020026020010181815250505b5050600101611240565b508281858151811061134657fe5b602090810291909101810191909152600154604051634d49e87d60e01b8152602481018c9052604481018b90526060600482019081528451606483015284516001600160a01b0390931693634d49e87d9386938f938f939092839260840191878101910280838360005b838110156113c85781810151838201526020016113b0565b50505050905001945050505050602060405180830381600087803b1580156113ef57600080fd5b505af1158015611403573d6000803e3d6000fd5b505050506040513d602081101561141957600080fd5b505160055490925061143691506001600160a01b031633836127a7565b9998505050505050505050565b60048181548110610ba357fe5b60015460408051637c61e56160e01b8152306004820181905260248201859052915191945060609283926001600160a01b0390911691637c61e561916044808301926000929190829003018186803b1580156114ab57600080fd5b505afa1580156114bf573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260208110156114e857600080fd5b8101908080516040519392919084600160201b82111561150757600080fd5b90830190602082018581111561151c57600080fd5b82518660208202830111600160201b8211171561153857600080fd5b82525081516020918201928201910280838360005b8381101561156557818101518382015260200161154d565b505050509190910160405250508251600054939450600019810193606093506001600160a01b03169150637c61e561908890869060ff87169081106115a657fe5b60200260200101516040518363ffffffff1660e01b815260040180836001600160a01b031681526020018281526020019250505060006040518083038186803b1580156115f257600080fd5b505afa158015611606573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561162f57600080fd5b8101908080516040519392919084600160201b82111561164e57600080fd5b90830190602082018581111561166357600080fd5b82518660208202830111600160201b8211171561167f57600080fd5b82525081516020918201928201910280838360005b838110156116ac578181015183820152602001611694565b505050509050016040525050509050606081518360ff160167ffffffffffffffff811180156116da57600080fd5b50604051908082528060200260200182016040528015611704578160200160208202803683370190505b50905060005b8360ff168160ff16101561175157848160ff168151811061172757fe5b6020026020010151828260ff168151811061173e57fe5b602090810291909101015260010161170a565b5060005b82518160ff16101561179c57828160ff168151811061177057fe5b60200260200101518282860160ff168151811061178957fe5b6020908102919091010152600101611755565b5093505050505b92915050565b60006060600280548060200260200160405190810160405280929190818152602001828054801561180357602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116117e5575b505050505090506060600380548060200260200160405190810160405280929190818152602001828054801561186257602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611844575b505050505090506060815167ffffffffffffffff8111801561188357600080fd5b506040519080825280602002602001820160405280156118ad578160200160208202803683370190505b5090506060835167ffffffffffffffff811180156118ca57600080fd5b506040519080825280602002602001820160405280156118f4578160200160208202803683370190505b508351855191925001600019018814611943576040805162461bcd60e51b815260206004820152600c60248201526b6f7574206f662072616e676560a01b604482015290519081900360640190fd5b61194b612c43565b506040805160c081018252600080546001600160a01b03908116835260015481166020840152600554169282019290925283516000190160ff1660608201526080810182905260a08101829052905b816060015160ff168160ff1610156119e4578a8a8260ff168181106119bb57fe5b90506020020135848260ff16815181106119d157fe5b602090810291909101015260010161199a565b5060005b82518160ff161015611a5a578a8a8284606001510160ff16818110611a0957fe5b90506020020135838260ff1681518110611a1f57fe5b6020026020010181815250506000838260ff1681518110611a3c57fe5b60200260200101511115611a5257600160808301525b6001016119e8565b50806080015115611b6b57611b4b612710611b4561271584600001516001600160a01b031663f9273ffb308860006040518463ffffffff1660e01b815260040180846001600160a01b03168152602001806020018315158152602001828103825284818151815260200191508051906020019060200280838360005b83811015611aee578181015183820152602001611ad6565b5050505090500194505050505060206040518083038186803b158015611b1357600080fd5b505afa158015611b27573d6000803e3d6000fd5b505050506040513d6020811015611b3d57600080fd5b5051906127fe565b90612857565b83826060015160ff1681518110611b5e57fe5b6020026020010181815250505b6040810151611b85906001600160a01b031633308b612747565b600081602001516001600160a01b03166384cdd9bc858b8b6040518463ffffffff1660e01b81526004018080602001848152602001838152602001828103825285818151815260200191508051906020019060200280838360005b83811015611bf8578181015183820152602001611be0565b50505050905001945050505050602060405180830381600087803b158015611c1f57600080fd5b505af1158015611c33573d6000803e3d6000fd5b505050506040513d6020811015611c4957600080fd5b50519050611c5789826128be565b60a0830152608082015115611f2b5781600001516001600160a01b03166384cdd9bc8486856060015160ff1681518110611c8d57fe5b60200260200101518b6040518463ffffffff1660e01b81526004018080602001848152602001838152602001828103825285818151815260200191508051906020019060200280838360005b83811015611cf1578181015183820152602001611cd9565b50505050905001945050505050602060405180830381600087803b158015611d1857600080fd5b505af1158015611d2c573d6000803e3d6000fd5b505050506040513d6020811015611d4257600080fd5b5050835160609067ffffffffffffffff81118015611d5f57600080fd5b50604051908082528060200260200182016040528015611d89578160200160208202803683370190505b509050600086846060015160ff1681518110611da157fe5b602002602001015190506000816001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015611dfa57600080fd5b505afa158015611e0e573d6000803e3d6000fd5b505050506040513d6020811015611e2457600080fd5b505190508015611f27578083866060015160ff1681518110611e4257fe5b602002602001018181525050611f2185602001516001600160a01b0316634d49e87d8560008f6040518463ffffffff1660e01b81526004018080602001848152602001838152602001828103825285818151815260200191508051906020019060200280838360005b83811015611ec3578181015183820152602001611eab565b50505050905001945050505050602060405180830381600087803b158015611eea57600080fd5b505af1158015611efe573d6000803e3d6000fd5b505050506040513d6020811015611f1457600080fd5b505160a08701519061291b565b60a08601525b5050505b60005b60ff81168b1115611fe5576000836060015160ff168260ff161015611f6b57868260ff1681518110611f5c57fe5b60200260200101519050611f8b565b878460600151830360ff1681518110611f8057fe5b602002602001015190505b60008d8d8460ff16818110611f9c57fe5b905060200201351115611fdc57611fdc338e8e8560ff16818110611fbc57fe5b90506020020135836001600160a01b03166127a79092919063ffffffff16565b50600101611f2e565b5060a08201511561201657612016338360a0015184604001516001600160a01b03166127a79092919063ffffffff16565b5060a0015190960398975050505050505050565b600061205f33308660048a60ff168154811061204257fe5b6000918252602090912001546001600160a01b0316929190612747565b60015460408051630f1c1f5d60e31b815260ff808a1660048301528816602482015260448101879052606481018690526084810185905290516000926001600160a01b0316916378e0fae89160a480830192602092919082900301818787803b1580156120cb57600080fd5b505af11580156120df573d6000803e3d6000fd5b505050506040513d60208110156120f557600080fd5b50516004805491925061212f913391849160ff8b1690811061211357fe5b6000918252602090912001546001600160a01b031691906127a7565b9695505050505050565b6000546001600160a01b031681565b6003543093506000906000190160ff80821690841610156121f55760015460408051630262267d60e61b81526001600160a01b0388811660048301526024820188905260ff87166044830152915191909216916398899f40916064808301926020929190829003018186803b1580156121c057600080fd5b505afa1580156121d4573d6000803e3d6000fd5b505050506040513d60208110156121ea57600080fd5b505191506123199050565b60015460408051630262267d60e61b81526001600160a01b0388811660048301526024820188905260ff85166044830152915160009392909216916398899f4091606480820192602092909190829003018186803b15801561225657600080fd5b505afa15801561226a573d6000803e3d6000fd5b505050506040513d602081101561228057600080fd5b505160005460408051630262267d60e61b81526001600160a01b038a811660048301526024820185905260ff878a0316604483015291519394509116916398899f4091606480820192602092909190829003018186803b1580156122e357600080fd5b505afa1580156122f7573d6000803e3d6000fd5b505050506040513d602081101561230d57600080fd5b50519250612319915050565b9392505050565b60015460408051631d7638f960e21b815260ff8087166004830152851660248201526044810184905290516000926001600160a01b0316916375d8e3e4916064808301926020929190829003018186803b15801561237d57600080fd5b505afa158015612391573d6000803e3d6000fd5b505050506040513d60208110156123a757600080fd5b5051949350505050565b6001546001600160a01b031681565b6005546001600160a01b031681565b600454600090821061241d576040805162461bcd60e51b8152602060048201526012602482015271696e646578206f7574206f662072616e676560701b604482015290519081900360640190fd5b6004828154811061242a57fe5b6000918252602090912001546001600160a01b031692915050565b60035430945060009060609067ffffffffffffffff8111801561246757600080fd5b50604051908082528060200260200182016040528015612491578160200160208202803683370190505b5060025490915060609067ffffffffffffffff811180156124b157600080fd5b506040519080825280602002602001820160405280156124db578160200160208202803683370190505b5082519091506000190160005b818160ff16101561252b5787878260ff1681811061250257fe5b90506020020135848260ff168151811061251857fe5b60209081029190910101526001016124e8565b5060005b82518160ff1610156125755787878260ff16840181811061254c57fe5b90506020020135838260ff168151811061256257fe5b602090810291909101015260010161252f565b506000805460405163f9273ffb60e01b81526001600160a01b038b8116600483019081528915156044840152606060248401908152875160648501528751929094169363f9273ffb938e9389938d9390929091608490910190602080870191028083838d5b838110156125f25781810151838201526020016125da565b5050505090500194505050505060206040518083038186803b15801561261757600080fd5b505afa15801561262b573d6000803e3d6000fd5b505050506040513d602081101561264157600080fd5b50518451909150819085908490811061265657fe5b60209081029190910181019190915260015460405163f9273ffb60e01b81526001600160a01b038c8116600483019081528a15156044840152606060248401908152895160648501528951929094169463f9273ffb948f948b948e9493608490920191868101910280838360005b838110156126dc5781810151838201526020016126c4565b5050505090500194505050505060206040518083038186803b15801561270157600080fd5b505afa158015612715573d6000803e3d6000fd5b505050506040513d602081101561272b57600080fd5b50519998505050505050505050565b60038181548110610ba357fe5b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b1790526127a1908590612975565b50505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526127f9908490612975565b505050565b60008261280d575060006117a3565b8282028284828161281a57fe5b04146123195760405162461bcd60e51b8152600401808060200182810382526021815260200180612c9f6021913960400191505060405180910390fd5b60008082116128ad576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b8183816128b657fe5b049392505050565b600082821115612915576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b600082820183811015612319576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b60606129ca826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612a269092919063ffffffff16565b8051909150156127f9578080602001905160208110156129e957600080fd5b50516127f95760405162461bcd60e51b815260040180806020018281038252602a815260200180612cc0602a913960400191505060405180910390fd5b6060612a358484600085612a3d565b949350505050565b606082471015612a7e5760405162461bcd60e51b8152600401808060200182810382526026815260200180612c796026913960400191505060405180910390fd5b612a8785612b99565b612ad8576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b60208310612b175780518252601f199092019160209182019101612af8565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114612b79576040519150601f19603f3d011682016040523d82523d6000602084013e612b7e565b606091505b5091509150612b8e828286612b9f565b979650505050505050565b3b151590565b60608315612bae575081612319565b825115612bbe5782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015612c08578181015183820152602001612bf0565b50505050905090810190601f168015612c355780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a08101919091529056fe416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a2646970667358221220233f24a23c5b7f4eb239d280f1e16da3ad7a2ff0167d09cc74cd3a178baa62d064736f6c634300060c0033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addLiquidity(uint256[],uint256,uint256)": {
        "params": {
          "amounts": "the amounts of each token to add, in their native precision",
          "deadline": "latest timestamp to accept this transaction",
          "minToMint": "the minimum LP tokens adding this amount of liquidity should mint, otherwise revert. Handy for front-running mitigation"
        },
        "returns": {
          "_0": "amount of LP token user minted and received"
        }
      },
      "calculateRemoveLiquidity(address,uint256)": {
        "params": {
          "account": "the address that is withdrawing tokens",
          "amount": "the amount of LP tokens that would be burned on withdrawal"
        },
        "returns": {
          "_0": "array of token balances that the user will receive"
        }
      },
      "calculateRemoveLiquidityOneToken(address,uint256,uint8)": {
        "params": {
          "account": "the address that is withdrawing tokens",
          "tokenAmount": "the amount of LP token to burn",
          "tokenIndex": "index of which token will be withdrawn"
        },
        "returns": {
          "_0": "availableTokenAmount calculated amount of underlying token available to withdraw"
        }
      },
      "calculateSwap(uint8,uint8,uint256)": {
        "params": {
          "dx": "the amount of tokens the user wants to sell. If the token charges a fee on transfers, use the amount that gets transferred after the fee.",
          "tokenIndexFrom": "the token the user wants to sell",
          "tokenIndexTo": "the token the user wants to buy"
        },
        "returns": {
          "_0": "amount of tokens the user will receive"
        }
      },
      "calculateTokenAmount(address,uint256[],bool)": {
        "details": "This shouldn't be used outside frontends for user estimates.",
        "params": {
          "account": "address that is depositing or withdrawing tokens",
          "amounts": "an array of token amounts to deposit or withdrawal, corresponding to pooledTokens. The amount should be in each pooled token's native precision. If a token charges a fee on transfers, use the amount that gets transferred after the fee.",
          "deposit": "whether this is a deposit or a withdrawal"
        },
        "returns": {
          "_0": "token amount the user will receive"
        }
      },
      "constructor": {
        "params": {
          "_baseSwap": "the address of the base swap contract",
          "_metaLPToken": "the address of the meta swap LP token contract",
          "_metaSwap": "the address of the meta swap contract"
        }
      },
      "getToken(uint256)": {
        "params": {
          "index": "the index of the token"
        },
        "returns": {
          "_0": "address of the token at given index"
        }
      },
      "removeLiquidity(uint256,uint256[],uint256)": {
        "details": "Liquidity can always be removed, even when the pool is paused.",
        "params": {
          "amount": "the amount of LP tokens to burn",
          "deadline": "latest timestamp to accept this transaction",
          "minAmounts": "the minimum amounts of each token in the pool        acceptable for this burn. Useful as a front-running mitigation"
        },
        "returns": {
          "_0": "amounts of tokens user received"
        }
      },
      "removeLiquidityImbalance(uint256[],uint256,uint256)": {
        "params": {
          "amounts": "how much of each token to withdraw",
          "deadline": "latest timestamp to accept this transaction",
          "maxBurnAmount": "the max LP token provider is willing to pay to remove liquidity. Useful as a front-running mitigation."
        },
        "returns": {
          "_0": "amount of LP tokens burned"
        }
      },
      "removeLiquidityOneToken(uint256,uint8,uint256,uint256)": {
        "params": {
          "deadline": "latest timestamp to accept this transaction",
          "minAmount": "the minimum amount to withdraw, otherwise revert",
          "tokenAmount": "the amount of the token you want to receive",
          "tokenIndex": "the index of the token you want to receive"
        },
        "returns": {
          "_0": "amount of chosen token user received"
        }
      },
      "swap(uint8,uint8,uint256,uint256,uint256)": {
        "params": {
          "deadline": "latest timestamp to accept this transaction",
          "dx": "the amount of tokens the user wants to swap from",
          "minDy": "the min amount the user would like to receive, or revert.",
          "tokenIndexFrom": "the token the user wants to swap from",
          "tokenIndexTo": "the token the user wants to swap to"
        }
      }
    },
    "title": "MetaSwapDeposit",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addLiquidity(uint256[],uint256,uint256)": {
        "notice": "Add liquidity to the pool with the given amounts of tokens"
      },
      "calculateRemoveLiquidity(address,uint256)": {
        "notice": "A simple method to calculate amount of each underlying tokens that is returned upon burning given amount of LP tokens"
      },
      "calculateRemoveLiquidityOneToken(address,uint256,uint8)": {
        "notice": "Calculate the amount of underlying token available to withdraw when withdrawing via only single token"
      },
      "calculateSwap(uint8,uint8,uint256)": {
        "notice": "Calculate amount of tokens you receive on swap"
      },
      "calculateTokenAmount(address,uint256[],bool)": {
        "notice": "A simple method to calculate prices from deposits or withdrawals, excluding fees but including slippage. This is helpful as an input into the various \"min\" parameters on calls to fight front-running. When withdrawing from the base pool in imbalanced fashion, the recommended slippage setting is 0.2% or higher."
      },
      "constructor": "Sets the address for the base swap contract, meta swap contract, and the meta swap LP token contract.",
      "getToken(uint256)": {
        "notice": "Return address of the pooled token at given index. Reverts if tokenIndex is out of range. This is a flattened representation of the pooled tokens."
      },
      "removeLiquidity(uint256,uint256[],uint256)": {
        "notice": "Burn LP tokens to remove liquidity from the pool. Withdraw fee that decays linearly over period of 4 weeks since last deposit will apply."
      },
      "removeLiquidityImbalance(uint256[],uint256,uint256)": {
        "notice": "Remove liquidity from the pool, weighted differently than the pool's current balances. Withdraw fee that decays linearly over period of 4 weeks since last deposit will apply."
      },
      "removeLiquidityOneToken(uint256,uint8,uint256,uint256)": {
        "notice": "Remove liquidity from the pool all in one token. Withdraw fee that decays linearly over period of 4 weeks since last deposit will apply."
      },
      "swap(uint8,uint8,uint256,uint256,uint256)": {
        "notice": "Swap two underlying tokens using the meta pool and the base pool"
      }
    },
    "notice": "This contract flattens the LP token in a MetaSwap pool for easier user access. For example, suppose there exists a base Swap pool consisting of [DAI, USDC, USDT]. Then a MetaSwap pool can be created with [BUSD, BaseSwapLPToken] to allow trades between either the LP token or the underlying tokens and BUSD. MetaSwapDeposit flattens the LP token and remaps them to [BUSD, DAI, USDC, USDT], allowing users to ignore the dependency on BaseSwapLPToken.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 16135,
        "contract": "contracts/stable/MetaSwapDeposit.sol:MetaSwapDeposit",
        "label": "baseSwap",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(ISwap)15550"
      },
      {
        "astId": 16137,
        "contract": "contracts/stable/MetaSwapDeposit.sol:MetaSwapDeposit",
        "label": "metaSwap",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IMetaSwap)15399"
      },
      {
        "astId": 16140,
        "contract": "contracts/stable/MetaSwapDeposit.sol:MetaSwapDeposit",
        "label": "baseTokens",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_contract(IERC20)1178)dyn_storage"
      },
      {
        "astId": 16143,
        "contract": "contracts/stable/MetaSwapDeposit.sol:MetaSwapDeposit",
        "label": "metaTokens",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_contract(IERC20)1178)dyn_storage"
      },
      {
        "astId": 16146,
        "contract": "contracts/stable/MetaSwapDeposit.sol:MetaSwapDeposit",
        "label": "tokens",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_contract(IERC20)1178)dyn_storage"
      },
      {
        "astId": 16148,
        "contract": "contracts/stable/MetaSwapDeposit.sol:MetaSwapDeposit",
        "label": "metaLPToken",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(IERC20)1178"
      }
    ],
    "types": {
      "t_array(t_contract(IERC20)1178)dyn_storage": {
        "base": "t_contract(IERC20)1178",
        "encoding": "dynamic_array",
        "label": "contract IERC20[]",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)1178": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IMetaSwap)15399": {
        "encoding": "inplace",
        "label": "contract IMetaSwap",
        "numberOfBytes": "20"
      },
      "t_contract(ISwap)15550": {
        "encoding": "inplace",
        "label": "contract ISwap",
        "numberOfBytes": "20"
      }
    }
  }
}