{
  "address": "0x45A2A1F6B9bED8D84B24462319aa630531efF371",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenRecovered",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "AdminTokenRecovery",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "ifoAddress",
          "type": "address"
        }
      ],
      "name": "NewIFOContract",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAX_BUFFER_TIME_INTERVAL",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_offeringToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_endTime",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_adminAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_votingEscrowAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_burnAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_receiverAddress",
          "type": "address"
        }
      ],
      "name": "deployIFO",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        }
      ],
      "name": "recoverWrongTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x190a170ab18f52a00677d9703e7733aa3b7aab9ad994d9c8e9d441542b541d5c",
  "receipt": {
    "to": null,
    "from": "0x7d5d7Df17739d531dBb2d795df6D3408E3bE1278",
    "contractAddress": "0x45A2A1F6B9bED8D84B24462319aa630531efF371",
    "transactionIndex": 13,
    "gasUsed": "4245754",
    "logsBloom": "0x
    "blockHash": "0xab927353e6f85e955e07a8ca7109c7c55785d7956c6de2625421e6de8c264106",
    "transactionHash": "0x190a170ab18f52a00677d9703e7733aa3b7aab9ad994d9c8e9d441542b541d5c",
    "logs": [
      {
        "transactionIndex": 13,
        "blockNumber": 183747,
        "transactionHash": "0x190a170ab18f52a00677d9703e7733aa3b7aab9ad994d9c8e9d441542b541d5c",
        "address": "0x45A2A1F6B9bED8D84B24462319aa630531efF371",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000007d5d7df17739d531dbb2d795df6d3408e3be1278"
        ],
        "data": "0x",
        "logIndex": 5,
        "blockHash": "0xab927353e6f85e955e07a8ca7109c7c55785d7956c6de2625421e6de8c264106"
      }
    ],
    "blockNumber": 183747,
    "cumulativeGasUsed": "7321808",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "1c6ff8b0627a77f44f9d21156d882052",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenRecovered\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AdminTokenRecovery\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"ifoAddress\",\"type\":\"address\"}],\"name\":\"NewIFOContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_BUFFER_TIME_INTERVAL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_offeringToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_adminAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_votingEscrowAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_burnAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiverAddress\",\"type\":\"address\"}],\"name\":\"deployIFO\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"recoverWrongTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"deployIFO(address,uint256,uint256,address,address,address,address)\":{\"params\":{\"_adminAddress\":\": the admin address for handling tokens\",\"_endTime\":\": the end timestamp for the IFO\",\"_offeringToken\":\": the token that is offered for the IFO\",\"_startTime\":\": the start timestamp for the IFO\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"recoverWrongTokens(address)\":{\"details\":\"This function is only callable by admin.\",\"params\":{\"_tokenAddress\":\": the address of the token to withdraw\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"IFODeployer\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":\"Constructor\",\"deployIFO(address,uint256,uint256,address,address,address,address)\":{\"notice\":\"It deploy the IFO contract and initializes the contract.\"},\"recoverWrongTokens(address)\":{\"notice\":\"It allows the admin to recover wrong tokens sent to the contract\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ifo/IFODeployer.sol\":\"IFODeployer\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x15e2d5bd4c28a88548074c54d220e8086f638a71ed07e6b3ba5a70066fcf458d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x8bbbc2f5c10065ee272592ae0a7a6ceb23de2fbd81564ee0bb015ecf404d5f61\",\"license\":\"MIT\"},\"contracts/ifo/IFODeployer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\nimport \\\"./IFOInitializable.sol\\\";\\n\\n/**\\n * @title IFODeployer\\n */\\ncontract IFODeployer is Ownable {\\n    using SafeERC20 for IERC20;\\n\\n    uint256 public constant MAX_BUFFER_TIME_INTERVAL = 7 * 86400; // 1 week\\n\\n    event AdminTokenRecovery(address indexed tokenRecovered, uint256 amount);\\n    event NewIFOContract(address indexed ifoAddress);\\n\\n    /**\\n     * @notice Constructor\\n     */\\n    constructor() public {\\n        //\\n    }\\n\\n    /**\\n     * @notice It deploy the IFO contract and initializes the contract.\\n     * @param _offeringToken: the token that is offered for the IFO\\n     * @param _startTime: the start timestamp for the IFO\\n     * @param _endTime: the end timestamp for the IFO\\n     * @param _adminAddress: the admin address for handling tokens\\n     */\\n    function deployIFO(\\n        address _offeringToken,\\n        uint256 _startTime,\\n        uint256 _endTime,\\n        address _adminAddress,\\n        address _votingEscrowAddress,\\n        address _burnAddress,\\n        address _receiverAddress\\n    ) external onlyOwner {\\n        require(IERC20(_offeringToken).totalSupply() >= 0);\\n        require(_endTime < (block.timestamp + MAX_BUFFER_TIME_INTERVAL), \\\"Operations: EndTime too far\\\");\\n        require(_startTime < _endTime, \\\"Operations: StartTime must be inferior to endTime\\\");\\n        require(_startTime > block.timestamp, \\\"Operations: StartTime must be greater than current timestamp\\\");\\n\\n        bytes memory bytecode = type(IFOInitializable).creationCode;\\n        bytes32 salt = keccak256(abi.encodePacked(_offeringToken, _startTime, _endTime));\\n        address ifoAddress;\\n\\n        assembly {\\n            ifoAddress := create2(0, add(bytecode, 32), mload(bytecode), salt)\\n        }\\n\\n        IFOInitializable(ifoAddress).initialize(\\n            _offeringToken,\\n            _startTime,\\n            _endTime,\\n            MAX_BUFFER_TIME_INTERVAL,\\n            _adminAddress,\\n            _votingEscrowAddress,\\n            _burnAddress,\\n            _receiverAddress\\n        );\\n\\n        emit NewIFOContract(ifoAddress);\\n    }\\n\\n    /**\\n     * @notice It allows the admin to recover wrong tokens sent to the contract\\n     * @param _tokenAddress: the address of the token to withdraw\\n     * @dev This function is only callable by admin.\\n     */\\n    function recoverWrongTokens(address _tokenAddress) external onlyOwner {\\n        uint256 balanceToRecover = IERC20(_tokenAddress).balanceOf(address(this));\\n        require(balanceToRecover > 0, \\\"Operations: Balance must be > 0\\\");\\n        IERC20(_tokenAddress).safeTransfer(address(msg.sender), balanceToRecover);\\n\\n        emit AdminTokenRecovery(_tokenAddress, balanceToRecover);\\n    }\\n}\",\"keccak256\":\"0x61cdcbce635e1f7739f5a9fe3b559130e3124f5ca22124b74f2923bacb01be52\",\"license\":\"MIT\"},\"contracts/ifo/IFOInitializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\n\\nimport \\\"../interfaces/IEvmoSwapIFO.sol\\\";\\nimport \\\"../interfaces/IVotingEscrow.sol\\\";\\n\\n/**\\n * @title IFOInitializable\\n */\\n\\ncontract IFOInitializable is IEvmoSwapIFO, ReentrancyGuard, Ownable {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    // The offering token\\n    IERC20 public override offeringToken;\\n\\n    // Max time interval (for sanity checks)\\n    uint256 public MAX_BUFFER_TIME_INTERVAL;\\n\\n    // Number of pools\\n    uint8 public constant NUMBER_POOLS = 2;\\n\\n    // MULTIPLIER\\n    uint8 public constant VE_RATE = 10;\\n\\n    uint256 constant public PERCENTAGE_FACTOR = 10000;\\n\\n    // The address of the smart chef factory\\n    address public immutable IFO_FACTORY;\\n\\n    // VotingEscrow contract\\n    address public votingEscrowAddress;\\n\\n    // Whether it is initialized\\n    bool public isInitialized;\\n\\n    // Allow claim\\n    bool public allowClaim;\\n\\n    // The block timestamp when IFO starts\\n    uint256 public startTime;\\n\\n    // The block timestamp when IFO ends\\n    uint256 public endTime;\\n\\n    // The campaignId for the IFO\\n    uint256 public campaignId;\\n\\n    // Total tokens distributed across the pools\\n    uint256 public totalTokensOffered;\\n\\n    // Total amount of raising token withdrew\\n    uint256[NUMBER_POOLS] public totalWithdrawRaisingAmount;\\n\\n    // The address burns raisingToken\\n    address public burnAddress;\\n\\n    // The address receive remaining raisingToken after burning, like PostIFOLauncher\\n    address public receiverAddress;\\n\\n    // Total amount of tax(raising token) withdrew\\n    uint256[NUMBER_POOLS] public totalWithdrawTaxAmount;\\n\\n    // The address receive tax\\n    address public taxCollector;\\n\\n    // Array of PoolCharacteristics of size NUMBER_POOLS\\n    PoolCharacteristics[NUMBER_POOLS] private _poolInformation;\\n\\n    // It maps the address to pool id to UserInfo\\n    mapping(address => mapping(uint8 => UserInfo)) private _userInfo;\\n\\n    // Struct that contains each pool characteristics\\n    struct PoolCharacteristics {\\n        IERC20 raisingToken; // The raising token\\n        uint256 raisingAmountPool; // amount of tokens raised for the pool (in raising tokens)\\n        uint256 offeringAmountPool; // amount of tokens offered for the pool (in offeringTokens)\\n        uint256 limitPerUserInRaisingToken; // limit of tokens per user (if 0, it is ignored)\\n        uint256 initialReleasePercentage; // percentage releases immediately when ifo ends(if 10000, it is 100%)\\n        uint256 burnPercentage; // The percentag of raisingToken to burn,multiply by PERCENTAGE_FACTOR (100 means 0.01)\\n        uint256 vestingEndTime; // block timestamp when 100% of tokens have been released\\n        bool hasTax; // tax on the overflow (if any, it works with _calculateTaxOverflow)\\n        uint256 totalAmountPool; // total amount pool deposited (in raising tokens)\\n        uint256 sumTaxesOverflow; // total taxes collected (starts at 0, increases with each harvest if overflow)\\n    }\\n\\n    // Struct that contains each user information for both pools\\n    struct UserInfo {\\n        uint256 amountPool; // How many tokens the user has provided for pool\\n        uint256 offeringTokensClaimed; // How many tokens has been claimed by user\\n        uint256 lastTimeHarvested; // The time when user claimed recently\\n        bool hasHarvestedInitial; // If initial is claimed\\n        bool refunded; // If the user is refunded\\n    }\\n\\n    // Admin withdraw events\\n    event AdminWithdraw(uint256[] amountRaisingTokens, uint256 amountOfferingToken);\\n\\n    // Admin recovers token\\n    event AdminTokenRecovery(address tokenAddress, uint256 amountTokens);\\n\\n    // Deposit event\\n    event Deposit(address indexed user, uint8 indexed pid, uint256 amount);\\n\\n    // Harvest event\\n    event Harvest(address indexed user, uint8 indexed pid, uint256 offeringAmount, uint256 excessAmount);\\n\\n    // Event for new start & end timestamp\\n    event NewStartAndEndTimes(uint256 startTime, uint256 endTime);\\n\\n    // Event with campaignId for IFO\\n    event CampaignIdSet(uint256 campaignId);\\n\\n    // Event when parameters are set for one of the pools\\n    event PoolParametersSet(uint8 pid, uint256 offeringAmountPool, uint256 raisingAmountPool);\\n\\n    // Modifier to prevent contracts to participate\\n    modifier notContract() {\\n        require(!_isContract(msg.sender), \\\"contract not allowed\\\");\\n        require(msg.sender == tx.origin, \\\"proxy contract not allowed\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Constructor\\n     */\\n    constructor() public {\\n        IFO_FACTORY = msg.sender;\\n    }\\n\\n    /**\\n     * @notice It initializes the contract\\n     * @dev It can only be called once.\\n     * @param _offeringToken: the token that is offered for the IFO\\n     * @param _startTime: the start timestamp for the IFO\\n     * @param _endTime: the end timestamp for the IFO\\n     * @param _adminAddress: the admin address for handling tokens\\n     * @param _votingEscrowAddress: the address of the VotingEscrow\\n     */\\n    function initialize(\\n        address _offeringToken,\\n        uint256 _startTime,\\n        uint256 _endTime,\\n        uint256 _maxBufferTimeInterval,\\n        address _adminAddress,\\n        address _votingEscrowAddress,\\n        address _burnAddress,\\n        address _receiverAddress\\n    ) public {\\n        require(!isInitialized, \\\"Operations: Already initialized\\\");\\n        require(msg.sender == IFO_FACTORY, \\\"Operations: Not factory\\\");\\n        require(_receiverAddress != address(0), \\\"Operations: Zero address\\\");\\n\\n        // Make this contract initialized\\n        isInitialized = true;\\n\\n        // init not allow claim\\n        allowClaim = false; \\n\\n        offeringToken = IERC20(_offeringToken);\\n        votingEscrowAddress = _votingEscrowAddress;\\n        startTime = _startTime;\\n        endTime = _endTime;\\n        MAX_BUFFER_TIME_INTERVAL = _maxBufferTimeInterval;\\n\\n        burnAddress = _burnAddress;\\n        receiverAddress = _receiverAddress;\\n\\n        // Transfer ownership to admin\\n        transferOwnership(_adminAddress);\\n    }\\n\\n    /**\\n     * @notice It allows users to deposit raising tokens to pool\\n     * @param _amount: the number of raising token used (18 decimals)\\n     * @param _pid: pool id\\n     */\\n    function depositPool(uint256 _amount, uint8 _pid) external override nonReentrant notContract {\\n        // Checks whether the pool id is valid\\n        require(_pid < NUMBER_POOLS, \\\"Deposit: Non valid pool id\\\");\\n\\n        // Checks that pool was set\\n        require(\\n            _poolInformation[_pid].offeringAmountPool > 0 && _poolInformation[_pid].raisingAmountPool > 0,\\n            \\\"Deposit: Pool not set\\\"\\n        );\\n\\n        // Checks whether the block timestamp is not too early\\n        require(block.timestamp > startTime, \\\"Deposit: Too early\\\");\\n\\n        // Checks whether the block timestamp is not too late\\n        require(block.timestamp < endTime, \\\"Deposit: Too late\\\");\\n\\n        // Checks that the amount deposited is not inferior to 0\\n        require(_amount > 0, \\\"Deposit: Amount must be > 0\\\");\\n\\n        // Verify tokens were deposited properly\\n        require(offeringToken.balanceOf(address(this)) >= totalTokensOffered, \\\"Deposit: Tokens not deposited properly\\\");\\n\\n        // amount of veEmo from votingEscrow, only for base sale\\n        if (votingEscrowAddress != address(0) && _pid == 0) {\\n            uint256 veDecimal = IVotingEscrow(votingEscrowAddress).decimals();\\n            uint256 raisingDecimal = IVotingEscrow(address(_poolInformation[_pid].raisingToken)).decimals();\\n            require(veDecimal >= raisingDecimal, \\\"Wrong decimal\\\");\\n\\n            uint256 ifoCredit = IVotingEscrow(votingEscrowAddress).balanceOfT(msg.sender, startTime) * VE_RATE;\\n            require(_userInfo[msg.sender][_pid].amountPool.add(_amount).mul(10 ** (veDecimal - raisingDecimal)) <= ifoCredit, \\\"Not enough veEmo\\\");\\n        }\\n\\n        // Transfers funds to this contract\\n        _poolInformation[_pid].raisingToken.safeTransferFrom(address(msg.sender), address(this), _amount);\\n\\n        // Update the user status\\n        _userInfo[msg.sender][_pid].amountPool = _userInfo[msg.sender][_pid].amountPool.add(_amount);\\n\\n        // Check if the pool has a limit per user\\n        if (_poolInformation[_pid].limitPerUserInRaisingToken > 0) {\\n            // Checks whether the limit has been reached\\n            require(\\n                _userInfo[msg.sender][_pid].amountPool <= _poolInformation[_pid].limitPerUserInRaisingToken,\\n                \\\"Deposit: New amount above user limit\\\"\\n            );\\n        }\\n\\n        // Updates the totalAmount for pool\\n        _poolInformation[_pid].totalAmountPool = _poolInformation[_pid].totalAmountPool.add(_amount);\\n\\n        emit Deposit(msg.sender, _pid, _amount);\\n    }\\n\\n    /**\\n     * @notice It allows users to harvest from pool\\n     * @param _pid: pool id\\n     */\\n    function harvestPool(uint8 _pid) external override nonReentrant notContract {\\n        // Checks whether it is allow to harvest\\n        require(allowClaim, \\\"Harvest: not allow claim\\\");\\n\\n        // Checks whether pool id is valid\\n        require(_pid < NUMBER_POOLS, \\\"Harvest: Non valid pool id\\\");\\n\\n        UserInfo storage currentUserInfo = _userInfo[msg.sender][_pid];\\n\\n        // Checks whether the user has participated\\n        require(currentUserInfo.amountPool > 0, \\\"Harvest: Did not participate\\\");\\n\\n        // Checks whether the user has already harvested in the same block\\n        require(currentUserInfo.lastTimeHarvested < block.timestamp, \\\"Harvest: Already harvest in the same block\\\");\\n\\n        // Initialize the variables for offering, refunding user amounts, and tax amount\\n        (\\n        uint256 raisingTokenRefund,\\n        uint256 userTaxOverflow,\\n        uint256 offeringTokenTotalHarvest,,,\\n        ) = userTokenStatus(msg.sender, _pid);\\n\\n        // Updates the harvest time\\n        currentUserInfo.lastTimeHarvested = block.timestamp;\\n        currentUserInfo.hasHarvestedInitial = true;\\n\\n        // Settle refund\\n        if (!currentUserInfo.refunded) {\\n            currentUserInfo.refunded = true;\\n            if (raisingTokenRefund > 0) {\\n                _poolInformation[_pid].raisingToken.safeTransfer(msg.sender, raisingTokenRefund);\\n            }\\n            // Increment the sumTaxesOverflow\\n            if (userTaxOverflow > 0) {\\n                _poolInformation[_pid].sumTaxesOverflow = _poolInformation[_pid].sumTaxesOverflow.add(userTaxOverflow);\\n            }\\n        }\\n\\n        // Final check to verify the user has not gotten more tokens that originally allocated\\n        (uint256 offeringTokenAmount,,) = _calculateOfferingAndRefundingAmountsPool(msg.sender, _pid);\\n        uint256 offeringAllocationLeft = offeringTokenAmount - currentUserInfo.offeringTokensClaimed;\\n        uint256 allocatedTokens = offeringAllocationLeft >= offeringTokenTotalHarvest ? offeringTokenTotalHarvest : offeringAllocationLeft;\\n        if (allocatedTokens > 0) {\\n            currentUserInfo.offeringTokensClaimed += allocatedTokens;\\n            offeringToken.safeTransfer(msg.sender, allocatedTokens);\\n        }\\n\\n        emit Harvest(msg.sender, _pid, allocatedTokens, raisingTokenRefund);\\n    }\\n\\n    /**\\n     * @notice It allows the admin to withdraw funds\\n     * @param _raisingAmounts: the number array of raising token to withdraw\\n     * @param _offeringAmount: the number of offering amount to withdraw\\n     * @dev This function is only callable by admin.\\n     */\\n    function finalWithdraw(uint256[] memory _raisingAmounts, uint256 _offeringAmount) external override onlyOwner {\\n        require(_raisingAmounts.length == NUMBER_POOLS, \\\"Operations: Wrong length\\\");\\n      \\n        for (uint i; i < NUMBER_POOLS; i++) {\\n            if(_raisingAmounts[i] > 0) {\\n                PoolCharacteristics memory poolInfo = _poolInformation[i];\\n                require(_raisingAmounts[i] <= poolInfo.raisingToken.balanceOf(address(this)), \\\"Operations: Not enough raising tokens\\\");\\n\\n                totalWithdrawRaisingAmount[i] = totalWithdrawRaisingAmount[i].add(_raisingAmounts[i]);\\n                require(totalWithdrawRaisingAmount[i] <= poolInfo.raisingAmountPool, \\\"Operations: Maximum allowance exceeds\\\");\\n\\n                uint burnAmount = 0;\\n                if (poolInfo.burnPercentage != 0) {\\n                    burnAmount = _raisingAmounts[i].mul(poolInfo.burnPercentage).div(PERCENTAGE_FACTOR);\\n                    poolInfo.raisingToken.safeTransfer(burnAddress, burnAmount);\\n                }\\n                poolInfo.raisingToken.safeTransfer(receiverAddress, _raisingAmounts[i].sub(burnAmount));\\n            }\\n        }\\n\\n        if (_offeringAmount > 0) {\\n            require(_offeringAmount <= offeringToken.balanceOf(address(this)), \\\"Operations: Not enough offering tokens\\\");\\n            offeringToken.safeTransfer(address(msg.sender), _offeringAmount);\\n        }\\n\\n        emit AdminWithdraw(_raisingAmounts, _offeringAmount);\\n    }\\n\\n    /**\\n     * @notice It allows the admin or collector to withdraw tax\\n     * @dev This function is only callable by admin or collector.\\n     */\\n    function taxWithdraw() external {\\n        require(taxCollector != address(0), \\\"Operations: Wrong tax collector\\\");\\n        require(owner() == msg.sender || taxCollector == msg.sender, \\\"Operations: Permission denied\\\");\\n\\n        for (uint i; i < NUMBER_POOLS; i++) {\\n            uint256 sumTaxesOverflow = _poolInformation[i].sumTaxesOverflow;\\n            _poolInformation[i].raisingToken.safeTransfer(taxCollector, sumTaxesOverflow.sub(totalWithdrawTaxAmount[i]));\\n            totalWithdrawTaxAmount[i] = sumTaxesOverflow;\\n        }\\n    }\\n\\n    /**\\n     * @notice It allows the admin to recover wrong tokens sent to the contract\\n     * @param _tokenAddress: the address of the token to withdraw (18 decimals)\\n     * @param _tokenAmount: the number of token amount to withdraw\\n     * @dev This function is only callable by admin.\\n     */\\n    function recoverWrongTokens(address _tokenAddress, uint256 _tokenAmount) external onlyOwner {\\n        require(_tokenAddress != address(offeringToken), \\\"Recover: Cannot be offering token\\\");\\n        for (uint i; i < NUMBER_POOLS; i++) {\\n            require(_tokenAddress != address(_poolInformation[i].raisingToken), \\\"Recover: Cannot be raising token\\\");\\n        }\\n\\n        IERC20(_tokenAddress).safeTransfer(address(msg.sender), _tokenAmount);\\n\\n        emit AdminTokenRecovery(_tokenAddress, _tokenAmount);\\n    }\\n\\n    /**\\n     * @notice It sets parameters for pool\\n     * @param _raisingToken: the raising token used\\n     * @param _offeringAmountPool: offering amount (in tokens)\\n     * @param _raisingAmountPool: raising amount (in raising tokens)\\n     * @param _limitPerUserInRaisingToken: limit per user (in raising tokens)\\n     * @param _initialReleasePercentage: initial release percentage (if 10000, it is 100%)\\n     * @param _vestingEndTime: vesting end time\\n     * @param _hasTax: if the pool has a tax\\n     * @param _pid: pool id\\n     * @dev This function is only callable by admin.\\n     */\\n    function setPool(\\n        address _raisingToken,\\n        uint256 _offeringAmountPool,\\n        uint256 _raisingAmountPool,\\n        uint256 _limitPerUserInRaisingToken,\\n        uint256 _initialReleasePercentage,\\n        uint256 _burnPercentage,\\n        uint256 _vestingEndTime,\\n        bool _hasTax,\\n        uint8 _pid\\n    ) external override onlyOwner {\\n        require(IERC20(_raisingToken).totalSupply() >= 0);\\n        require(_raisingToken != address(offeringToken), \\\"Operations: Tokens must be be different\\\");\\n        require(block.timestamp < startTime, \\\"Operations: IFO has started\\\");\\n        require(_initialReleasePercentage <= PERCENTAGE_FACTOR, \\\"Operations: Wrong initial percentage\\\");\\n        require(_burnPercentage <= PERCENTAGE_FACTOR, \\\"Operations: Wrong percentage\\\");\\n        require(_vestingEndTime >= endTime, \\\"Operations: Vesting ends too early\\\");\\n        require(_pid < NUMBER_POOLS, \\\"Operations: Pool does not exist\\\");\\n\\n        if (_vestingEndTime == endTime) {\\n            require(_initialReleasePercentage == PERCENTAGE_FACTOR, \\\"Operations:Initial percentage should be equal to PERCENTAGE_FACTOR\\\");\\n        }\\n\\n        _poolInformation[_pid].raisingToken = IERC20(_raisingToken);\\n        _poolInformation[_pid].offeringAmountPool = _offeringAmountPool;\\n        _poolInformation[_pid].raisingAmountPool = _raisingAmountPool;\\n        _poolInformation[_pid].limitPerUserInRaisingToken = _limitPerUserInRaisingToken;\\n        _poolInformation[_pid].initialReleasePercentage = _initialReleasePercentage;\\n        _poolInformation[_pid].burnPercentage = _burnPercentage;\\n        _poolInformation[_pid].vestingEndTime = _vestingEndTime;\\n        _poolInformation[_pid].hasTax = _hasTax;\\n\\n        uint256 tokensDistributedAcrossPools;\\n\\n        for (uint8 i = 0; i < NUMBER_POOLS; i++) {\\n            tokensDistributedAcrossPools = tokensDistributedAcrossPools.add(_poolInformation[i].offeringAmountPool);\\n        }\\n\\n        // Update totalTokensOffered\\n        totalTokensOffered = tokensDistributedAcrossPools;\\n\\n        emit PoolParametersSet(_pid, _offeringAmountPool, _raisingAmountPool);\\n    }\\n\\n    /**\\n     * @notice It updates campaignId for the IFO.\\n     * @param _campaignId: the campaignId for the IFO\\n     * @dev This function is only callable by admin.\\n     */\\n    function updateCampaignId(uint256 _campaignId) external override onlyOwner {\\n        require(block.timestamp < endTime, \\\"Operations: IFO has ended\\\");\\n        campaignId = _campaignId;\\n\\n        emit CampaignIdSet(campaignId);\\n    }\\n\\n    /**\\n     * @notice It allows the admin to update start and end timestamp\\n     * @param _startTime: the new start timestamp\\n     * @param _endTime: the new end timestamp\\n     * @dev This function is only callable by admin.\\n     */\\n    function updateStartAndEndTimes(uint256 _startTime, uint256 _endTime) external onlyOwner {\\n        require(_endTime < (block.timestamp + MAX_BUFFER_TIME_INTERVAL), \\\"Operations: EndTime too far\\\");\\n        require(block.timestamp < startTime, \\\"Operations: IFO has started\\\");\\n        require(_startTime < _endTime, \\\"Operations: New startTime must be less than new endTime\\\");\\n        require(block.timestamp < _startTime, \\\"Operations: New startTime must be greater than current timestamp\\\");\\n\\n        startTime = _startTime;\\n        endTime = _endTime;\\n\\n        emit NewStartAndEndTimes(_startTime, _endTime);\\n    }\\n\\n    /**\\n    * @notice It allows the admin to set\\n    * @param _allow: claim status\\n    * @dev This function is only callable by admin.\\n    */\\n    function setAllowClaim(bool _allow) external onlyOwner {\\n        allowClaim = _allow;\\n    }\\n\\n    /**\\n    * @notice It allows the admin to update tax collector\\n    * @param _taxCollector: the new tax collector\\n    * @dev This function is only callable by admin.\\n    */\\n    function setTaxCollector(address _taxCollector) external onlyOwner {\\n        taxCollector = _taxCollector;\\n    }\\n\\n    /**\\n     * @notice It returns the pool information\\n     * @param _pid: poolId\\n     * @return raisingAmountPool: amount of raising tokens raised (in raising tokens)\\n     * @return offeringAmountPool: amount of tokens offered for the pool (in offeringTokens)\\n     * @return limitPerUserInRaisingToken: limit of tokens per user (if 0, it is ignored)\\n     * @return hasTax: tax on the overflow (if any, it works with _calculateTaxOverflow)\\n     * @return totalAmountPool: total amount pool deposited (in raising tokens)\\n     * @return sumTaxesOverflow: total taxes collected (starts at 0, increases with each harvest if overflow)\\n     */\\n    function viewPoolInformation(uint256 _pid)\\n    external\\n    view\\n    override\\n    returns (\\n        IERC20,\\n        uint256,\\n        uint256,\\n        uint256,\\n        uint256,\\n        uint256,\\n        uint256,\\n        bool,\\n        uint256,\\n        uint256\\n    )\\n    {\\n        PoolCharacteristics memory poolInfo = _poolInformation[_pid];\\n        return (\\n        poolInfo.raisingToken,\\n        poolInfo.raisingAmountPool,\\n        poolInfo.offeringAmountPool,\\n        poolInfo.limitPerUserInRaisingToken,\\n        poolInfo.initialReleasePercentage,\\n        poolInfo.burnPercentage,\\n        poolInfo.vestingEndTime,\\n        poolInfo.hasTax,\\n        poolInfo.totalAmountPool,\\n        poolInfo.sumTaxesOverflow\\n        );\\n    }\\n\\n    /**\\n     * @notice It returns the tax overflow rate calculated for a pool\\n     * @dev 100,000,000,000 means 0.1 (10%) / 1 means 0.0000000000001 (0.0000001%) / 1,000,000,000,000 means 1 (100%)\\n     * @param _pid: poolId\\n     * @return It returns the tax percentage\\n     */\\n    function viewPoolTaxRateOverflow(uint256 _pid) external view override returns (uint256) {\\n        if (!_poolInformation[_pid].hasTax) {\\n            return 0;\\n        } else {\\n            return\\n            _calculateTaxOverflow(_poolInformation[_pid].totalAmountPool, _poolInformation[_pid].raisingAmountPool);\\n        }\\n    }\\n\\n    /**\\n     * @notice External view function to see user allocations for both pools\\n     * @param _user: user address\\n     * @param _pids[]: array of pids\\n     * @return\\n     */\\n    function viewUserAllocationPools(address _user, uint8[] calldata _pids)\\n    external\\n    view\\n    override\\n    returns (uint256[] memory)\\n    {\\n        uint256[] memory allocationPools = new uint256[](_pids.length);\\n        for (uint8 i = 0; i < _pids.length; i++) {\\n            allocationPools[i] = _getUserAllocationPool(_user, _pids[i]);\\n        }\\n        return allocationPools;\\n    }\\n\\n    /**\\n     * @notice External view function to see user information\\n     * @param _user: user address\\n     * @param _pids[]: array of pids\\n     */\\n    function viewUserInfo(address _user, uint8[] calldata _pids)\\n    external\\n    view\\n    override\\n    returns (uint256[] memory, uint256[] memory, uint256[] memory, bool[] memory, bool[] memory)\\n    {\\n        uint256[] memory amountPools = new uint256[](_pids.length);\\n        uint256[] memory offeringTokensClaimedPools = new uint256[](_pids.length);\\n        uint256[] memory lastTimeHarvestedPools = new uint256[](_pids.length);\\n        bool[] memory hasHarvestedInitialPools = new bool[](_pids.length);\\n        bool[] memory refundedPools = new bool[](_pids.length);\\n\\n        for (uint8 i = 0; i < NUMBER_POOLS; i++) {\\n            amountPools[i] = _userInfo[_user][i].amountPool;\\n            offeringTokensClaimedPools[i] = _userInfo[_user][i].offeringTokensClaimed;\\n            lastTimeHarvestedPools[i] = _userInfo[_user][i].lastTimeHarvested;\\n            hasHarvestedInitialPools[i] = _userInfo[_user][i].hasHarvestedInitial;\\n            refundedPools[i] = _userInfo[_user][i].refunded;\\n        }\\n        return (amountPools, offeringTokensClaimedPools, lastTimeHarvestedPools, hasHarvestedInitialPools, refundedPools);\\n    }\\n\\n    /**\\n     * @notice External view function to see user offering and refunding amounts for both pools\\n     * @param _user: user address\\n     * @param _pids: array of pids\\n     */\\n    function viewUserOfferingAndRefundingAmountsForPools(address _user, uint8[] calldata _pids)\\n    external\\n    view\\n    override\\n    returns (uint256[3][] memory)\\n    {\\n        uint256[3][] memory amountPools = new uint256[3][](_pids.length);\\n\\n        for (uint8 i = 0; i < _pids.length; i++) {\\n            uint256 userOfferingAmountPool;\\n            uint256 userRefundingAmountPool;\\n            uint256 userTaxAmountPool;\\n\\n            if (_poolInformation[_pids[i]].raisingAmountPool > 0) {\\n                (\\n                userOfferingAmountPool,\\n                userRefundingAmountPool,\\n                userTaxAmountPool\\n                ) = _calculateOfferingAndRefundingAmountsPool(_user, _pids[i]);\\n            }\\n\\n            amountPools[i] = [userOfferingAmountPool, userRefundingAmountPool, userTaxAmountPool];\\n        }\\n        return amountPools;\\n    }\\n\\n    /**\\n    * @notice Get the amount of tokens a user is eligible to receive based on current state.\\n    * @param _user: address of user to obtain token status\\n    * @param _pid: pool id to obtain token status\\n    * raisingTokenRefund:Amount of raising tokens available to refund\\n    * userTaxOverflow: Amount of tax\\n    * offeringTokenTotalHarvest: Total amount of offering tokens that can be harvested (initial + vested)\\n    * offeringTokenInitialHarvest: Amount of initial harvest offering tokens that can be collected\\n    * offeringTokenVestedHarvest: Amount offering tokens that can be harvested from the vesting portion of tokens\\n    * offeringTokensVesting: Amount of offering tokens that are still vested\\n    */\\n    function userTokenStatus(address _user, uint8 _pid) public view returns (\\n        uint256 raisingTokenRefund,\\n        uint256 userTaxOverflow,\\n        uint256 offeringTokenTotalHarvest,\\n        uint256 offeringTokenInitialHarvest,\\n        uint256 offeringTokenVestedHarvest,\\n        uint256 offeringTokensVesting\\n    ){\\n        uint256 currentTime = block.timestamp;\\n        if (currentTime < endTime) {\\n            return (0, 0, 0, 0, 0, 0);\\n        }\\n\\n        UserInfo memory currentUserInfo = _userInfo[_user][_pid];\\n        PoolCharacteristics memory currentPoolInfo = _poolInformation[_pid];\\n\\n        // Initialize the variables for offering, refunding user amounts\\n        (uint256 offeringTokenAmount, uint256 refundingTokenAmount, uint256 taxAmount) = _calculateOfferingAndRefundingAmountsPool(_user, _pid);\\n        uint256 offeringTokenInitialAmount = offeringTokenAmount * currentPoolInfo.initialReleasePercentage / PERCENTAGE_FACTOR;\\n        uint256 offeringTokenVestedAmount = offeringTokenAmount - offeringTokenInitialAmount;\\n\\n        // Setup refund amount\\n        raisingTokenRefund = 0;\\n        userTaxOverflow = 0;\\n        if (!currentUserInfo.refunded) {\\n            raisingTokenRefund = refundingTokenAmount;\\n            userTaxOverflow = taxAmount;\\n        }\\n\\n        // Setup initial harvest amount\\n        offeringTokenInitialHarvest = 0;\\n        if (!currentUserInfo.hasHarvestedInitial) {\\n            offeringTokenInitialHarvest = offeringTokenInitialAmount;\\n        }\\n\\n        // Setup harvestable vested token amount\\n        offeringTokenVestedHarvest = 0;\\n        offeringTokensVesting = 0;\\n        // exclude initial\\n        uint256 offeringTokenUnclaimed = offeringTokenAmount.sub(offeringTokenInitialHarvest).sub(currentUserInfo.offeringTokensClaimed);\\n        if (currentTime >= currentPoolInfo.vestingEndTime) {\\n            offeringTokenVestedHarvest = offeringTokenUnclaimed;\\n        } else {\\n            uint256 unlockEndTime = currentTime;\\n            // endTime is the earliest time to harvest\\n            uint256 lastHarvestTime = currentUserInfo.lastTimeHarvested < endTime ? endTime : currentUserInfo.lastTimeHarvested;\\n            if (unlockEndTime > lastHarvestTime) {\\n                uint256 totalVestingTime = currentPoolInfo.vestingEndTime - endTime;\\n                uint256 unlockTime = unlockEndTime - lastHarvestTime;\\n                offeringTokenVestedHarvest = (offeringTokenVestedAmount * unlockTime) / totalVestingTime;\\n            }\\n            offeringTokensVesting = offeringTokenUnclaimed.sub(offeringTokenVestedHarvest);\\n        }\\n        offeringTokenTotalHarvest = offeringTokenInitialHarvest + offeringTokenVestedHarvest;\\n    }\\n\\n    /**\\n     * @notice It calculates the tax overflow given the raisingAmountPool and the totalAmountPool.\\n     * @dev 100,000,000,000 means 0.1 (10%) / 1 means 0.0000000000001 (0.0000001%) / 1,000,000,000,000 means 1 (100%)\\n     * @return It returns the tax percentage\\n     */\\n    function _calculateTaxOverflow(uint256 _totalAmountPool, uint256 _raisingAmountPool)\\n    internal\\n    pure\\n    returns (uint256)\\n    {\\n        uint256 ratioOverflow = _totalAmountPool.div(_raisingAmountPool);\\n\\n        if (ratioOverflow >= 1500) {\\n            return 500000000;\\n            // 0.05%\\n        } else if (ratioOverflow >= 1000) {\\n            return 1000000000;\\n            // 0.1%\\n        } else if (ratioOverflow >= 500) {\\n            return 2000000000;\\n            // 0.2%\\n        } else if (ratioOverflow >= 250) {\\n            return 2500000000;\\n            // 0.25%\\n        } else if (ratioOverflow >= 100) {\\n            return 3000000000;\\n            // 0.3%\\n        } else if (ratioOverflow >= 50) {\\n            return 5000000000;\\n            // 0.5%\\n        } else {\\n            return 10000000000;\\n            // 1%\\n        }\\n    }\\n\\n    /**\\n     * @notice It calculates the offering amount for a user and the number of raising tokens to transfer back.\\n     * @param _user: user address\\n     * @param _pid: pool id\\n     * @return {uint256, uint256, uint256} It returns the offering amount, the refunding amount (in raising tokens),\\n     * and the tax (if any, else 0)\\n     */\\n    function _calculateOfferingAndRefundingAmountsPool(address _user, uint8 _pid)\\n    internal\\n    view\\n    returns (\\n        uint256,\\n        uint256,\\n        uint256\\n    )\\n    {\\n        uint256 userOfferingAmount;\\n        uint256 userRefundingAmount;\\n        uint256 taxAmount;\\n\\n        if (_poolInformation[_pid].totalAmountPool > _poolInformation[_pid].raisingAmountPool) {\\n            // Calculate allocation for the user\\n            uint256 allocation = _getUserAllocationPool(_user, _pid);\\n\\n            // Calculate the offering amount for the user based on the offeringAmount for the pool\\n            userOfferingAmount = _poolInformation[_pid].offeringAmountPool.mul(allocation).div(1e12);\\n\\n            // Calculate the payAmount\\n            uint256 payAmount = _poolInformation[_pid].raisingAmountPool.mul(allocation).div(1e12);\\n\\n            // Calculate the pre-tax refunding amount\\n            userRefundingAmount = _userInfo[_user][_pid].amountPool.sub(payAmount);\\n\\n            // Retrieve the tax rate\\n            if (_poolInformation[_pid].hasTax) {\\n                uint256 taxOverflow = _calculateTaxOverflow(\\n                    _poolInformation[_pid].totalAmountPool,\\n                    _poolInformation[_pid].raisingAmountPool\\n                );\\n\\n                // Calculate the final taxAmount\\n                taxAmount = userRefundingAmount.mul(taxOverflow).div(1e12);\\n\\n                // Adjust the refunding amount\\n                userRefundingAmount = userRefundingAmount.sub(taxAmount);\\n            }\\n        } else {\\n            userRefundingAmount = 0;\\n            taxAmount = 0;\\n            // _userInfo[_user] / (raisingAmount / offeringAmount)\\n            userOfferingAmount = _userInfo[_user][_pid].amountPool.mul(_poolInformation[_pid].offeringAmountPool).div(\\n                _poolInformation[_pid].raisingAmountPool\\n            );\\n        }\\n        return (userOfferingAmount, userRefundingAmount, taxAmount);\\n    }\\n\\n    /**\\n     * @notice It returns the user allocation for pool\\n     * @dev 100,000,000,000 means 0.1 (10%) / 1 means 0.0000000000001 (0.0000001%) / 1,000,000,000,000 means 1 (100%)\\n     * @param _user: user address\\n     * @param _pid: pool id\\n     * @return it returns the user's share of pool\\n     */\\n    function _getUserAllocationPool(address _user, uint8 _pid) internal view returns (uint256) {\\n        if (_poolInformation[_pid].totalAmountPool > 0) {\\n            return _userInfo[_user][_pid].amountPool.mul(1e18).div(_poolInformation[_pid].totalAmountPool.mul(1e6));\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    /**\\n     * @notice Check if an address is a contract\\n     */\\n    function _isContract(address _addr) internal view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(_addr)\\n        }\\n        return size > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x1f9115a06ea7898c083d03492825b0db284b4b5fbf5198afb1712004259a3954\",\"license\":\"MIT\"},\"contracts/interfaces/IEvmoSwapIFO.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/** @title IEvmoSwapIFO.\\n * @notice It is an interface for EvmoSwapIFO.sol\\n */\\ninterface IEvmoSwapIFO {\\n    /**\\n    * @notice It returns the offering token\\n    */\\n    function offeringToken() external view returns (IERC20);\\n\\n    /**\\n     * @notice It allows users to deposit LP tokens to pool\\n     * @param _amount: the number of LP token used (18 decimals)\\n     * @param _pid: poolId\\n     */\\n    function depositPool(uint256 _amount, uint8 _pid) external;\\n\\n    /**\\n     * @notice It allows users to harvest from pool\\n     * @param _pid: poolId\\n     */\\n    function harvestPool(uint8 _pid) external;\\n\\n    /**\\n     * @notice It allows the admin to withdraw funds\\n     * @param _lpAmount: the number of LP token to withdraw (18 decimals)\\n     * @param _offerAmount: the number of offering amount to withdraw\\n     * @dev This function is only callable by admin.\\n     */\\n    function finalWithdraw(uint256[] memory _lpAmount, uint256 _offerAmount) external;\\n\\n    /**\\n     * @notice It sets parameters for pool\\n     * @param _offeringAmountPool: offering amount (in tokens)\\n     * @param _raisingAmountPool: raising amount (in LP tokens)\\n     * @param _limitPerUserInRaisingToken: limit per user (in LP tokens)\\n     * @param _initialReleasePercentage: initial release percentage (if 10000, it is 100%)\\n     * @param _vestingEndTime: vesting end time\\n     * @param _hasTax: if the pool has a tax\\n     * @param _pid: poolId\\n     * @dev This function is only callable by admin.\\n     */\\n    function setPool(\\n        address _raisingToken,\\n        uint256 _offeringAmountPool,\\n        uint256 _raisingAmountPool,\\n        uint256 _limitPerUserInRaisingToken,\\n        uint256 _initialReleasePercentage,\\n        uint256 _burnPercentage,\\n        uint256 _vestingEndTime,\\n        bool _hasTax,\\n        uint8 _pid\\n    ) external;\\n\\n    /**\\n     * @notice It updates campaignId for the IFO.\\n     * @param _campaignId: the campaignId for the IFO\\n     * @dev This function is only callable by admin.\\n     */\\n    function updateCampaignId(\\n        uint256 _campaignId\\n    ) external;\\n\\n    /**\\n     * @notice It returns the pool information\\n     * @param _pid: poolId\\n     */\\n    function viewPoolInformation(uint256 _pid)\\n    external\\n    view\\n    returns (\\n        IERC20,\\n        uint256,\\n        uint256,\\n        uint256,\\n        uint256,\\n        uint256,\\n        uint256,\\n        bool,\\n        uint256,\\n        uint256\\n    );\\n\\n    /**\\n     * @notice It returns the tax overflow rate calculated for a pool\\n     * @dev 100,000 means 0.1(10%)/ 1 means 0.000001(0.0001%)/ 1,000,000 means 1(100%)\\n     * @param _pid: poolId\\n     * @return It returns the tax percentage\\n     */\\n    function viewPoolTaxRateOverflow(uint256 _pid) external view returns (uint256);\\n\\n    /**\\n     * @notice External view function to see user information\\n     * @param _user: user address\\n     * @param _pids[]: array of pids\\n     */\\n    function viewUserInfo(address _user, uint8[] calldata _pids)\\n    external\\n    view\\n    returns (uint256[] memory, uint256[] memory, uint256[] memory, bool[] memory, bool[] memory);\\n\\n    /**\\n     * @notice External view function to see user allocations for both pools\\n     * @param _user: user address\\n     * @param _pids[]: array of pids\\n     */\\n    function viewUserAllocationPools(address _user, uint8[] calldata _pids) external view returns (uint256[] memory);\\n\\n    /**\\n     * @notice External view function to see user offering and refunding amounts for both pools\\n     * @param _user: user address\\n     * @param _pids: array of pids\\n     */\\n    function viewUserOfferingAndRefundingAmountsForPools(address _user, uint8[] calldata _pids)\\n    external\\n    view\\n    returns (uint256[3][] memory);\\n}\\n\",\"keccak256\":\"0x199e8d7d1f75f9323e9c4f3e6708ad22d4669af28c04d84774fb343b71204ce0\",\"license\":\"MIT\"},\"contracts/interfaces/IVotingEscrow.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\ninterface IVotingEscrow {\\n    function balanceOfT(address addr, uint256 _t) external view returns (uint256);\\n\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x3b4df9b606a7f52698cc1f29fa544fa43563ae8c4549d1eedc86f600b211740c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "deployIFO(address,uint256,uint256,address,address,address,address)": {
        "params": {
          "_adminAddress": ": the admin address for handling tokens",
          "_endTime": ": the end timestamp for the IFO",
          "_offeringToken": ": the token that is offered for the IFO",
          "_startTime": ": the start timestamp for the IFO"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "recoverWrongTokens(address)": {
        "details": "This function is only callable by admin.",
        "params": {
          "_tokenAddress": ": the address of the token to withdraw"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "IFODeployer",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructor": "Constructor",
      "deployIFO(address,uint256,uint256,address,address,address,address)": {
        "notice": "It deploy the IFO contract and initializes the contract."
      },
      "recoverWrongTokens(address)": {
        "notice": "It allows the admin to recover wrong tokens sent to the contract"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/ifo/IFODeployer.sol:IFODeployer",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  }
}