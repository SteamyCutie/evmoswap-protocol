{
  "address": "0x4F5631Cb03Ed66096346f273A9a2014A5A882162",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_votingEscrow",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_startTime",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_emergencyReturn",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokens",
          "type": "uint256"
        }
      ],
      "name": "CheckpointToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "claimEpoch",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxEpoch",
          "type": "uint256"
        }
      ],
      "name": "Claimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "toggleFlag",
          "type": "bool"
        }
      ],
      "name": "ToggleAllowCheckpointToken",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "TOKEN_CHECKPOINT_DEADLINE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WEEK",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "canCheckpointToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "checkpointToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "checkpointTotalSupply",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "claim",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claim",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_receivers",
          "type": "address[]"
        }
      ],
      "name": "claimMany",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_coin",
          "type": "address"
        }
      ],
      "name": "distribute",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emergencyReturn",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isKilled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "killMe",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastTokenTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_coin",
          "type": "address"
        }
      ],
      "name": "recoverBalance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "timeCursor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "timeCursorOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "toggleAllowCheckpointToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenLastBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokensPerWeek",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userEpochOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "veForAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "veSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "votingEscrow",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xf2498cee672e527b865b22d93682b160e34b7b34864c50f88ead27c487ae8b77",
  "receipt": {
    "to": null,
    "from": "0x7d5d7Df17739d531dBb2d795df6D3408E3bE1278",
    "contractAddress": "0x4F5631Cb03Ed66096346f273A9a2014A5A882162",
    "transactionIndex": 48,
    "gasUsed": "2158312",
    "logsBloom": "0x
    "blockHash": "0x8d65820cfd8ce47f5146bfad4ad3c0e82b784b363894be111b7053daba9aa561",
    "transactionHash": "0xf2498cee672e527b865b22d93682b160e34b7b34864c50f88ead27c487ae8b77",
    "logs": [
      {
        "transactionIndex": 48,
        "blockNumber": 251148,
        "transactionHash": "0xf2498cee672e527b865b22d93682b160e34b7b34864c50f88ead27c487ae8b77",
        "address": "0x4F5631Cb03Ed66096346f273A9a2014A5A882162",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000007d5d7df17739d531dbb2d795df6d3408e3be1278"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x8d65820cfd8ce47f5146bfad4ad3c0e82b784b363894be111b7053daba9aa561"
      }
    ],
    "blockNumber": 251148,
    "cumulativeGasUsed": "5902178",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xf1EB231b036c17E7E04e8FECF67561e0e5f927c4",
    1651536000,
    "0x181C262b973B22C307C646a67f64B76410D19b6B",
    "0x7d5d7Df17739d531dBb2d795df6D3408E3bE1278"
  ],
  "solcInputHash": "b0191412d6db60d2913615e97999bbd0",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_votingEscrow\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_emergencyReturn\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"CheckpointToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimEpoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxEpoch\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"toggleFlag\",\"type\":\"bool\"}],\"name\":\"ToggleAllowCheckpointToken\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"TOKEN_CHECKPOINT_DEADLINE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WEEK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"canCheckpointToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkpointToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkpointTotalSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"claim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_receivers\",\"type\":\"address[]\"}],\"name\":\"claimMany\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_coin\",\"type\":\"address\"}],\"name\":\"distribute\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyReturn\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isKilled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"killMe\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTokenTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_coin\",\"type\":\"address\"}],\"name\":\"recoverBalance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeCursor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"timeCursorOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleAllowCheckpointToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenLastBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokensPerWeek\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userEpochOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"veForAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"veSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"votingEscrow\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Independent of votingescrow's reward contract As a tool for distributing rewards!\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/staking/FeeDistributor.sol\":\"FeeDistributor\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x15e2d5bd4c28a88548074c54d220e8086f638a71ed07e6b3ba5a70066fcf458d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x8bbbc2f5c10065ee272592ae0a7a6ceb23de2fbd81564ee0bb015ecf404d5f61\",\"license\":\"MIT\"},\"contracts/staking/FeeDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\n\\ninterface IVotingEscrow {\\n    struct Point {\\n        int128 bias;\\n        int128 slope;\\n        uint256 ts;\\n        uint256 blk;\\n    }\\n\\n    function userPointEpoch(address addr) external view returns (uint256);\\n\\n    function epoch() external view returns (uint256);\\n\\n    function userPointHistory(address addr, uint256 loc) external view returns (Point memory point);\\n\\n    function pointHistory(uint256 loc) external view returns (Point memory point);\\n\\n    function checkpoint() external;\\n}\\n\\n/**\\n * Independent of votingescrow's reward contract\\n * As a tool for distributing rewards!\\n */\\ncontract FeeDistributor is Ownable, ReentrancyGuard {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    uint256 public constant WEEK = 7 * 86400;\\n    uint256 public constant TOKEN_CHECKPOINT_DEADLINE = 86400;\\n\\n\\n    uint256 public startTime;\\n    uint256 public timeCursor;\\n    mapping(address => uint256) public timeCursorOf;\\n    mapping(address => uint256) public userEpochOf;\\n\\n    uint256 public lastTokenTime;\\n    uint256[1000000000000000] public tokensPerWeek;\\n\\n    address public votingEscrow;\\n    address public token;\\n    uint256 public tokenLastBalance;\\n\\n    // VE total supply at week bounds\\n    uint256[1000000000000000] public veSupply;\\n\\n    bool public canCheckpointToken;\\n    address public emergencyReturn;\\n    bool public isKilled;\\n\\n    event ToggleAllowCheckpointToken(bool toggleFlag);\\n    event CheckpointToken(uint256 time, uint256 tokens);\\n    event Claimed(address indexed recipient, uint256 amount, uint256 claimEpoch, uint256 maxEpoch);\\n\\n    /***\\n    * @notice Contract constructor\\n    * @param _votingEscrow VotingEscrow contract address\\n    * @param _startTime Epoch time for fee distribution to start\\n    * @param _token Fee token address\\n    * @param _emergencyReturn Address to transfer `_token` balance to,if this contract is killed\\n    ***/\\n    constructor(address _votingEscrow, uint256 _startTime, address _token, address _emergencyReturn) public {\\n        uint256 t = _startTime / WEEK * WEEK;\\n        startTime = t;\\n        lastTokenTime = t;\\n        timeCursor = t;\\n        token = _token;\\n        votingEscrow = _votingEscrow;\\n        emergencyReturn = _emergencyReturn;\\n    }\\n\\n    function max(int128 x, int128 y) internal pure returns (int128 z) {\\n        z = x < y ? y : x;\\n    }\\n\\n    function min(uint x, uint y) internal pure returns (uint z) {\\n        z = x < y ? x : y;\\n    }\\n\\n    function _checkpointToken() internal {\\n        uint256 tokenBalance = IERC20(token).balanceOf(address(this));\\n        uint256 toDistribute = tokenBalance.sub(tokenLastBalance);\\n        tokenLastBalance = tokenBalance;\\n\\n        uint256 t = lastTokenTime;\\n        uint256 sinceLast = block.timestamp.sub(t);\\n        lastTokenTime = block.timestamp;\\n        uint256 thisWeek = t / WEEK * WEEK;\\n        uint256 nextWeek = 0;\\n\\n        for (uint i; i < 20; i++) {\\n            nextWeek = thisWeek + WEEK;\\n            if (block.timestamp < nextWeek) {\\n                if (sinceLast == 0 && block.timestamp == t) {\\n                    tokensPerWeek[thisWeek] = tokensPerWeek[thisWeek].add(toDistribute);\\n                } else {\\n                    tokensPerWeek[thisWeek] = tokensPerWeek[thisWeek].add(toDistribute.mul(block.timestamp.sub(t)).div(sinceLast));\\n                }\\n                break;\\n            } else {\\n                if (sinceLast == 0 && nextWeek == t) {\\n                    tokensPerWeek[thisWeek] = tokensPerWeek[thisWeek].add(toDistribute);\\n                } else {\\n                    tokensPerWeek[thisWeek] = tokensPerWeek[thisWeek].add(toDistribute.mul(nextWeek.sub(t)).div(sinceLast));\\n                }\\n            }\\n            t = nextWeek;\\n            thisWeek = nextWeek;\\n        }\\n\\n        emit CheckpointToken(block.timestamp, toDistribute);\\n    }\\n\\n    /***\\n    * @notice Update the token checkpoint\\n    * @dev Calculates the total number of tokens to be distributed in a given week.\\n    * During setup for the initial distribution this function is only callable\\n    * by the contract owner. Beyond initial distro, it can be enabled for anyone\\n    * to call.\\n    ***/\\n    function checkpointToken() external {\\n        require(msg.sender == owner()\\n            || (canCheckpointToken && (block.timestamp > lastTokenTime + TOKEN_CHECKPOINT_DEADLINE)), \\\"Wrong user!\\\");\\n        _checkpointToken();\\n    }\\n\\n    function _findTimestampEpoch(address ve, uint256 _timestamp) internal view returns (uint256) {\\n        uint256 _min = 0;\\n        uint256 _max = IVotingEscrow(ve).epoch();\\n        for (uint i; i < 128; i++) {\\n            if (_min >= _max) {\\n                break;\\n            }\\n            uint256 _mid = (_min + _max + 2) / 2;\\n            IVotingEscrow.Point memory pt = IVotingEscrow(ve).pointHistory(_mid);\\n            if (pt.ts <= _timestamp) {\\n                _min = _mid;\\n            } else {\\n                _max = _mid - 1;\\n            }\\n        }\\n        return _min;\\n    }\\n\\n    function _findTimestampUserEpoch(address ve, address user, uint256 _timestamp, uint256 maxUserEpoch) internal view returns (uint256) {\\n        uint256 _min = 0;\\n        uint256 _max = maxUserEpoch;\\n        for (uint i; i < 128; i++) {\\n            if (_min >= _max) {\\n                break;\\n            }\\n            uint256 _mid = (_min + _max + 2) / 2;\\n            IVotingEscrow.Point memory pt = IVotingEscrow(ve).userPointHistory(user, _mid);\\n            if (pt.ts <= _timestamp) {\\n                _min = _mid;\\n            } else {\\n                _max = _mid - 1;\\n            }\\n        }\\n        return _min;\\n    }\\n\\n    /***\\n    * @notice Get the veCRV balance for `_user` at `_timestamp`\\n    * @param _user Address to query balance for\\n    * @param _timestamp Epoch time\\n    * @return uint256 veCRV balance\\n    ***/\\n    function veForAt(address _user, uint256 _timestamp) external view returns (uint256) {\\n        address ve = votingEscrow; // gas savings\\n        uint256 maxUserEpoch = IVotingEscrow(ve).userPointEpoch(_user);\\n        uint256 epoch = _findTimestampUserEpoch(ve, _user, _timestamp, maxUserEpoch);\\n        IVotingEscrow.Point memory pt = IVotingEscrow(ve).userPointHistory(_user, epoch);\\n        return uint256(max(pt.bias - pt.slope * int128(_timestamp - pt.ts), 0));\\n    }\\n\\n    function _checkpointTotalSupply() internal {\\n        address ve = votingEscrow;\\n        uint256 t = timeCursor;\\n        uint256 roundedTimestamp = block.timestamp / WEEK * WEEK;\\n        IVotingEscrow(ve).checkpoint();\\n\\n        for (uint i; i < 20; i++) {\\n            if (t > roundedTimestamp) {\\n                break;\\n            } else {\\n                uint256 epoch = _findTimestampEpoch(ve, t);\\n                IVotingEscrow.Point memory pt = IVotingEscrow(ve).pointHistory(epoch);\\n                int128 dt = 0;\\n                if (t > pt.ts) {\\n                    dt = int128(t - pt.ts);\\n                }\\n                veSupply[t] = uint256(max(pt.bias - pt.slope * dt, 0));\\n            }\\n            t += WEEK;\\n        }\\n\\n        timeCursor = t;\\n    }\\n\\n    /***\\n    * @notice Update the veCRV total supply checkpoint\\n    * @dev The checkpoint is also updated by the first claimant each\\n    *   new epoch week. This function may be called independently\\n    *   of a claim, to reduce claiming gas costs.\\n    ***/\\n    function checkpointTotalSupply() external {\\n        _checkpointTotalSupply();\\n    }\\n\\n    function _claim(address addr, address ve, uint256 _lastTokenTime) internal returns (uint256) {\\n        uint256 userEpoch = 0;\\n        uint256 toDistribute = 0;\\n\\n        uint256 maxUserEpoch = IVotingEscrow(ve).userPointEpoch(addr);\\n        uint256 _startTime = startTime; // gas savings\\n\\n        // No lock = no fees\\n        if (maxUserEpoch == 0) {\\n            return 0;\\n        }\\n\\n        uint256 weekCursor = timeCursorOf[addr];\\n        if (weekCursor == 0) {\\n            userEpoch = _findTimestampUserEpoch(ve, addr, _startTime, maxUserEpoch);\\n        } else {\\n            userEpoch = userEpochOf[addr];\\n        }\\n\\n        if (userEpoch == 0) {\\n            userEpoch = 1;\\n        }\\n\\n        IVotingEscrow.Point memory userPoint = IVotingEscrow(ve).userPointHistory(addr, userEpoch);\\n\\n        if (weekCursor == 0) {\\n            weekCursor = (userPoint.ts + WEEK - 1) / WEEK * WEEK;\\n        }\\n\\n        if (weekCursor >= _lastTokenTime) {\\n            return 0;\\n        }\\n\\n        if (weekCursor < _startTime) {\\n            weekCursor = _startTime;\\n        }\\n        // empty\\n        IVotingEscrow.Point memory oldUserPoint;\\n\\n\\n        for (uint i; i < 50; i++) {\\n            if (weekCursor >= _lastTokenTime) {\\n                break;\\n            }\\n\\n            if (weekCursor >= userPoint.ts && userEpoch <= maxUserEpoch) {\\n                userEpoch += 1;\\n                oldUserPoint = IVotingEscrow.Point({bias : userPoint.bias, slope : userPoint.slope, ts : userPoint.ts, blk : userPoint.blk});\\n                if (userEpoch > maxUserEpoch) {\\n                    userPoint = IVotingEscrow.Point({bias : 0, slope : 0, ts : 0, blk : 0});\\n                } else {\\n                    userPoint = IVotingEscrow(ve).userPointHistory(addr, userEpoch);\\n                }\\n            } else {\\n                int128 dt = int128(weekCursor - oldUserPoint.ts);\\n                uint256 balanceOf = uint256(max(oldUserPoint.bias - dt * oldUserPoint.slope, 0));\\n                if (balanceOf == 0 && userEpoch > maxUserEpoch) {\\n                    break;\\n                }\\n                if (balanceOf > 0) {\\n                    toDistribute = toDistribute.add(balanceOf.mul(tokensPerWeek[weekCursor]).div(veSupply[weekCursor]));\\n                }\\n\\n                weekCursor += WEEK;\\n            }\\n        }\\n\\n        userEpoch = min(maxUserEpoch, userEpoch - 1);\\n        userEpochOf[addr] = userEpoch;\\n        timeCursorOf[addr] = weekCursor;\\n\\n        emit Claimed(addr, toDistribute, userEpoch, maxUserEpoch);\\n\\n        return toDistribute;\\n    }\\n\\n    /***\\n    * @notice Claim fees for `_addr`\\n    * @dev Each call to claim look at a maximum of 50 user veCRV points.\\n    *    For accounts with many veCRV related actions, this function\\n    *    may need to be called more than once to claim all available\\n    *    fees. In the `Claimed` event that fires, if `claim_epoch` is\\n    *    less than `max_epoch`, the account may claim again.\\n    * @param _addr Address to claim fees for\\n    * @return uint256 Amount of fees claimed in the call\\n    ***/\\n    function claim(address _addr) public nonReentrant returns (uint256) {\\n        require(!isKilled, \\\"Killed\\\");\\n\\n        if (block.timestamp >= timeCursor) {\\n            _checkpointTotalSupply();\\n        }\\n\\n        uint256 _lastTokenTime = lastTokenTime;\\n\\n        if (canCheckpointToken && (block.timestamp > _lastTokenTime + TOKEN_CHECKPOINT_DEADLINE)) {\\n            _checkpointToken();\\n            _lastTokenTime = block.timestamp;\\n        }\\n\\n        _lastTokenTime = _lastTokenTime / WEEK * WEEK;\\n\\n        uint256 amount = _claim(_addr, votingEscrow, _lastTokenTime);\\n        if (amount != 0) {\\n            IERC20(token).safeTransfer(_addr, amount);\\n            tokenLastBalance = tokenLastBalance.sub(amount);\\n        }\\n\\n        return amount;\\n    }\\n\\n    function claim() external returns (uint256) {\\n        return claim(msg.sender);\\n    }\\n\\n    /***\\n    * @notice Make multiple fee claims in a single call\\n    * @dev Used to claim for many accounts at once, or to make\\n    *   multiple claims for the same address when that address\\n    *   has significant veCRV history\\n    * @param _receivers List of addresses to claim for. Claiming\\n    *   terminates at the first `ZERO_ADDRESS`.\\n    * @return bool success\\n    ***/\\n    function claimMany(address[] memory _receivers) external nonReentrant returns (bool) {\\n        require(!isKilled, \\\"Killed\\\");\\n\\n        if (block.timestamp >= timeCursor) {\\n            _checkpointTotalSupply();\\n        }\\n\\n        uint256 _lastTokenTime = lastTokenTime;\\n\\n        if (canCheckpointToken && (block.timestamp > _lastTokenTime + TOKEN_CHECKPOINT_DEADLINE)) {\\n            _checkpointToken();\\n            _lastTokenTime = block.timestamp;\\n        }\\n\\n        _lastTokenTime = _lastTokenTime / WEEK * WEEK;\\n        address ve = votingEscrow;\\n        address _token = token;\\n        uint256 total = 0;\\n\\n        for (uint i; i < _receivers.length; i++) {\\n            address addr = _receivers[i];\\n            if (addr == address(0)) {\\n                break;\\n            }\\n            uint256 amount = _claim(addr, ve, _lastTokenTime);\\n            if (amount != 0) {\\n                require(IERC20(_token).transfer(addr, amount), \\\"Transfer failed!\\\");\\n                total = total.add(amount);\\n            }\\n        }\\n\\n        if (total != 0) {\\n            tokenLastBalance = tokenLastBalance.sub(total);\\n        }\\n\\n        return true;\\n    }\\n\\n    /***\\n    * @notice Receive fee token into the contract and trigger a token checkpoint\\n    * @param _coin Address of the coin being received (must be fee token),just for preventing misoperation\\n    * @return bool success\\n    ***/\\n    function distribute(address _coin) external returns (bool) {\\n        require(_coin == token, \\\"Wrong coin!\\\");\\n        require(!isKilled, \\\"Killed\\\");\\n\\n        uint256 amount = IERC20(_coin).balanceOf(msg.sender);\\n        if (amount != 0) {\\n            IERC20(_coin).transferFrom(msg.sender, address(this), amount);\\n            if (canCheckpointToken && (block.timestamp > lastTokenTime + TOKEN_CHECKPOINT_DEADLINE)) {\\n                _checkpointToken();\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    /***\\n    * @notice Toggle permission for checkpointing by any account\\n    ***/\\n    function toggleAllowCheckpointToken() external onlyOwner {\\n        bool flag = !canCheckpointToken;\\n        canCheckpointToken = flag;\\n        emit ToggleAllowCheckpointToken(flag);\\n    }\\n\\n    /***\\n    * @notice Kill the contract\\n    * @dev Killing transfers the entire fee token balance to the emergency return address\\n    *   and blocks the ability to claim or burn. The contract cannot be unkilled.\\n    ***/\\n    function killMe() external onlyOwner {\\n        isKilled = true;\\n        require(IERC20(token).transfer(emergencyReturn, IERC20(token).balanceOf(address(this))), \\\"Transfer failed!\\\");\\n    }\\n\\n    /***\\n    * @notice Recover ERC20 tokens from this contract\\n    * @dev Tokens are sent to the emergency return address.\\n    * @param _coin Token address\\n    * @return bool success\\n    ***/\\n    function recoverBalance(address _coin) external onlyOwner returns (bool) {\\n        require(_coin != token, \\\"Wrong coin!\\\");\\n        IERC20(_coin).safeTransfer(emergencyReturn, IERC20(_coin).balanceOf(address(this)));\\n        return true;\\n    }\\n}\",\"keccak256\":\"0x9a85c7007a47052559d9d4758670854de2300d78c6bf258a9394138cef11084d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620024493803806200244983398101604081905262000034916200012d565b6000620000406200010b565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3506001805562093a80928390049092026002819055600681905560035566038d7ea4c6800880546001600160a01b039283166001600160a01b03199182161790915566038d7ea4c680078054948316949091169390931790925566071afd498d000a80549190921661010002610100600160a81b031990911617905562000183565b3390565b80516001600160a01b03811681146200012757600080fd5b92915050565b6000806000806080858703121562000143578384fd5b6200014f86866200010f565b9350602085015192506200016786604087016200010f565b91506200017886606087016200010f565b905092959194509250565b6122b680620001936000396000f3fe608060405234801561001057600080fd5b50600436106101c45760003560e01c80638736659b116100f9578063b603cd8011610097578063f2fde38b11610071578063f2fde38b14610313578063f364824114610326578063f4359ce514610339578063fc0c546a14610341576101c4565b8063b603cd80146102f0578063bee5dc32146102f8578063c7f1ec5014610300576101c4565b80638ec8468a116100d35780638ec8468a146102d05780638fe8a101146102d8578063939ea66b146102e0578063a5420e98146102e8576101c4565b80638736659b146102ad578063899519be146102b55780638da5cb5b146102c8576101c4565b806363453ae111610166578063786479cd11610140578063786479cd1461027757806378e979251461028a5780637e686e01146102925780638721b785146102a5576101c4565b806363453ae11461024957806368662ea01461025c578063715018a61461026f576101c4565b8063326a9407116101a2578063326a94071461021a5780634e71d92d146102245780634f2bfe5b1461022c5780635a4b8c1d14610241576101c4565b80630cc672e4146101c95780630f6592ef146101e75780631e83409a14610207575b600080fd5b6101d1610349565b6040516101de9190611eab565b60405180910390f35b6101fa6101f5366004611e0e565b610358565b6040516101de91906121dc565b6101fa610215366004611cb5565b610378565b610222610495565b005b6101fa61049f565b6102346104af565b6040516101de9190611e5a565b6102346104c4565b6101d1610257366004611cb5565b6104de565b6101d161026a366004611cb5565b610682565b6102226107a3565b6101fa610285366004611cb5565b61082c565b6101fa61083e565b6101d16102a0366004611cfa565b610844565b610222610a4a565b6101fa610ade565b6101fa6102c3366004611e0e565b610ae4565b610234610af7565b6101fa610b06565b6101d1610b12565b6101fa610b28565b6101fa610b2e565b610222610b35565b610222610cb0565b6101fa61030e366004611cb5565b610d14565b610222610321366004611cb5565b610d26565b6101fa610334366004611cd0565b610de6565b6101fa610f38565b610234610f3f565b66071afd498d000a5460ff1681565b66038d7ea4c6800a8166038d7ea4c68000811061037157fe5b0154905081565b6000600260015414156103a65760405162461bcd60e51b815260040161039d906121a5565b60405180910390fd5b600260015566071afd498d000a54600160a81b900460ff16156103db5760405162461bcd60e51b815260040161039d90612064565b60035442106103ec576103ec610f54565b60065466071afd498d000a5460ff16801561040b575062015180810142115b1561041b576104186110e0565b50425b66038d7ea4c680075462093a8091829004909102906000906104489085906001600160a01b031684611327565b9050801561048a5766038d7ea4c680085461046d906001600160a01b03168583611744565b66038d7ea4c6800954610480908261179f565b66038d7ea4c68009555b600180559392505050565b61049d610f54565b565b60006104aa33610378565b905090565b66038d7ea4c68007546001600160a01b031681565b66071afd498d000a5461010090046001600160a01b031681565b66038d7ea4c68008546000906001600160a01b038381169116146105145760405162461bcd60e51b815260040161039d90611ee9565b66071afd498d000a54600160a81b900460ff16156105445760405162461bcd60e51b815260040161039d90612064565b6040516370a0823160e01b81526000906001600160a01b038416906370a0823190610573903390600401611e5a565b60206040518083038186803b15801561058b57600080fd5b505afa15801561059f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105c39190611e26565b90508015610679576040516323b872dd60e01b81526001600160a01b038416906323b872dd906105fb90339030908690600401611e6e565b602060405180830381600087803b15801561061557600080fd5b505af1158015610629573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061064d9190611d97565b5066071afd498d000a5460ff16801561066c5750620151806006540142115b15610679576106796110e0565b50600192915050565b600061068c6117c7565b6001600160a01b031661069d610af7565b6001600160a01b0316146106c35760405162461bcd60e51b815260040161039d906120ef565b66038d7ea4c68008546001600160a01b03838116911614156106f75760405162461bcd60e51b815260040161039d90611ee9565b66071afd498d000a546040516370a0823160e01b815261079b916001600160a01b03610100909104811691908516906370a082319061073a903090600401611e5a565b60206040518083038186803b15801561075257600080fd5b505afa158015610766573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061078a9190611e26565b6001600160a01b0385169190611744565b506001919050565b6107ab6117c7565b6001600160a01b03166107bc610af7565b6001600160a01b0316146107e25760405162461bcd60e51b815260040161039d906120ef565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b60056020526000908152604090205481565b60025481565b6000600260015414156108695760405162461bcd60e51b815260040161039d906121a5565b600260015566071afd498d000a54600160a81b900460ff161561089e5760405162461bcd60e51b815260040161039d90612064565b60035442106108af576108af610f54565b60065466071afd498d000a5460ff1680156108ce575062015180810142115b156108de576108db6110e0565b50425b66038d7ea4c680075466038d7ea4c680085462093a8092839004909202916001600160a01b0391821691166000805b8651811015610a1757600087828151811061092457fe5b6020026020010151905060006001600160a01b0316816001600160a01b0316141561094f5750610a17565b600061095c828789611327565b90508015610a0d5760405163a9059cbb60e01b81526001600160a01b0386169063a9059cbb906109929085908590600401611e92565b602060405180830381600087803b1580156109ac57600080fd5b505af11580156109c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109e49190611d97565b610a005760405162461bcd60e51b815260040161039d90612084565b610a0a84826117cb565b93505b505060010161090d565b508015610a3b5766038d7ea4c6800954610a31908261179f565b66038d7ea4c68009555b50506001808055949350505050565b610a526117c7565b6001600160a01b0316610a63610af7565b6001600160a01b031614610a895760405162461bcd60e51b815260040161039d906120ef565b66071afd498d000a805460ff81161560ff1990911681179091556040517fdbe6ac1081ebd8e648718341126659456f4009fcadfe1c23f66f5e61522610b290610ad3908390611eab565b60405180910390a150565b60035481565b60078166038d7ea4c68000811061037157fe5b6000546001600160a01b031690565b66038d7ea4c680095481565b66071afd498d000a54600160a81b900460ff1681565b60065481565b6201518081565b610b3d6117c7565b6001600160a01b0316610b4e610af7565b6001600160a01b031614610b745760405162461bcd60e51b815260040161039d906120ef565b66071afd498d000a805460ff60a81b1916600160a81b179081905566038d7ea4c68008546040516370a0823160e01b81526001600160a01b039182169263a9059cbb92610100909104169083906370a0823190610bd5903090600401611e5a565b60206040518083038186803b158015610bed57600080fd5b505afa158015610c01573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c259190611e26565b6040518363ffffffff1660e01b8152600401610c42929190611e92565b602060405180830381600087803b158015610c5c57600080fd5b505af1158015610c70573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c949190611d97565b61049d5760405162461bcd60e51b815260040161039d90612084565b610cb8610af7565b6001600160a01b0316336001600160a01b03161480610cf0575066071afd498d000a5460ff168015610cf05750620151806006540142115b610d0c5760405162461bcd60e51b815260040161039d9061203f565b61049d6110e0565b60046020526000908152604090205481565b610d2e6117c7565b6001600160a01b0316610d3f610af7565b6001600160a01b031614610d655760405162461bcd60e51b815260040161039d906120ef565b6001600160a01b038116610d8b5760405162461bcd60e51b815260040161039d90611f0e565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b66038d7ea4c68007546040516381fc83bb60e01b81526000916001600160a01b031690829082906381fc83bb90610e21908890600401611e5a565b60206040518083038186803b158015610e3957600080fd5b505afa158015610e4d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e719190611e26565b90506000610e81838787856117f0565b9050610e8b611c5e565b604051630d36406960e21b81526001600160a01b038516906334d901a490610eb9908a908690600401611e92565b60806040518083038186803b158015610ed157600080fd5b505afa158015610ee5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f099190611db7565b9050610f288160400151870382602001510282600001510360006118cb565b600f0b9450505050505b92915050565b62093a8081565b66038d7ea4c68008546001600160a01b031681565b66038d7ea4c68007546003546001600160a01b0390911690600062093a80804204029050826001600160a01b031663c2c4c5c16040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610fb357600080fd5b505af1158015610fc7573d6000803e3d6000fd5b5050505060005b60148110156110d85781831115610fe4576110d8565b6000610ff085856118e6565b9050610ffa611c5e565b604051638ad4c44760e01b81526001600160a01b03871690638ad4c447906110269085906004016121dc565b60806040518083038186803b15801561103e57600080fd5b505afa158015611052573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110769190611db7565b90506000816040015186111561108f5750604081015185035b6110a68183602001510283600001510360006118cb565b600f0b66038d7ea4c6800a8766038d7ea4c6800081106110c257fe5b015550505062093a809290920191600101610fce565b505060035550565b66038d7ea4c68008546040516370a0823160e01b81526000916001600160a01b0316906370a0823190611117903090600401611e5a565b60206040518083038186803b15801561112f57600080fd5b505afa158015611143573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111679190611e26565b9050600061118666038d7ea4c68009548361179f90919063ffffffff16565b66038d7ea4c6800983905560065490915060006111a3428361179f565b42600655905062093a80808304026000805b60148110156112e55762093a80830191508142101561126857831580156111db57508442145b15611219576111ff8660078566038d7ea4c6800081106111f757fe5b0154906117cb565b60078466038d7ea4c68000811061121257fe5b0155611263565b61124d61123a8561123461122d428a61179f565b8a90611a36565b90611a70565b60078566038d7ea4c6800081106111f757fe5b60078466038d7ea4c68000811061126057fe5b01555b6112e5565b8315801561127557508482145b156112ab576112918660078566038d7ea4c6800081106111f757fe5b60078466038d7ea4c6800081106112a457fe5b01556112d5565b6112bf61123a8561123461122d868a61179f565b60078466038d7ea4c6800081106112d257fe5b01555b90935083915081906001016111b5565b507fce749457b74e10f393f2c6b1ce4261b78791376db5a3f501477a809f03f500d642866040516113179291906121e5565b60405180910390a1505050505050565b6040516381fc83bb60e01b81526000908190819081906001600160a01b038716906381fc83bb9061135c908a90600401611e5a565b60206040518083038186803b15801561137457600080fd5b505afa158015611388573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113ac9190611e26565b600254909150816113c457600094505050505061173d565b6001600160a01b038816600090815260046020526040902054806113f5576113ee888a84866117f0565b9450611411565b6001600160a01b03891660009081526005602052604090205494505b8461141b57600194505b611423611c5e565b604051630d36406960e21b81526001600160a01b038a16906334d901a490611451908d908a90600401611e92565b60806040518083038186803b15801561146957600080fd5b505afa15801561147d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114a19190611db7565b9050816114be57604081015162093a8090819062093a7f01040291505b8782106114d4576000965050505050505061173d565b828210156114e0578291505b6114e8611c5e565b60005b60328110156116bd57898410611500576116bd565b826040015184101580156115145750858811155b156116185760018801975060405180608001604052808460000151600f0b81526020018460200151600f0b81526020018460400151815260200184606001518152509150858811156115925760405180608001604052806000600f0b81526020016000600f0b81526020016000815260200160008152509250611613565b604051630d36406960e21b81526001600160a01b038c16906334d901a4906115c0908f908c90600401611e92565b60806040518083038186803b1580156115d857600080fd5b505afa1580156115ec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116109190611db7565b92505b6116b5565b6000826040015185039050600061163c8460200151830285600001510360006118cb565b600f0b90508015801561164e5750878a115b1561165a5750506116bd565b80156116aa576116a76116a066038d7ea4c6800a8866038d7ea4c68000811061167f57fe5b015461123460078a66038d7ea4c68000811061169757fe5b01548590611a36565b8a906117cb565b98505b62093a808601955050505b6001016114eb565b506116cb8560018903611aa2565b6001600160a01b038c16600081815260056020908152604080832085905560049091529081902086905551919850907f9cdcf2f7714cca3508c7f0110b04a90a80a3a8dd0e35de99689db74d28c5383e9061172b9089908b908a906121f3565b60405180910390a25093955050505050505b9392505050565b61179a8363a9059cbb60e01b8484604051602401611763929190611e92565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611ab8565b505050565b6000828211156117c15760405162461bcd60e51b815260040161039d90611f8b565b50900390565b3390565b60008282018381101561173d5760405162461bcd60e51b815260040161039d90611f54565b60008082815b60808110156118bf5781831061180b576118bf565b600282840181010461181b611c5e565b604051630d36406960e21b81526001600160a01b038b16906334d901a490611849908c908690600401611e92565b60806040518083038186803b15801561186157600080fd5b505afa158015611875573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118999190611db7565b9050878160400151116118ae578194506118b5565b6001820393505b50506001016117f6565b50909695505050505050565b600081600f0b83600f0b126118e0578261173d565b50919050565b600080600090506000846001600160a01b031663900cf0cf6040518163ffffffff1660e01b815260040160206040518083038186803b15801561192857600080fd5b505afa15801561193c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119609190611e26565b905060005b6080811015611a2c5781831061197a57611a2c565b600282840181010461198a611c5e565b604051638ad4c44760e01b81526001600160a01b03891690638ad4c447906119b69085906004016121dc565b60806040518083038186803b1580156119ce57600080fd5b505afa1580156119e2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a069190611db7565b905086816040015111611a1b57819450611a22565b6001820393505b5050600101611965565b5090949350505050565b600082611a4557506000610f32565b82820282848281611a5257fe5b041461173d5760405162461bcd60e51b815260040161039d906120ae565b6000808211611a915760405162461bcd60e51b815260040161039d90612008565b818381611a9a57fe5b049392505050565b6000818310611ab1578161173d565b5090919050565b6060611b0d826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611b479092919063ffffffff16565b80519091501561179a5780806020019051810190611b2b9190611d97565b61179a5760405162461bcd60e51b815260040161039d9061215b565b6060611b568484600085611b5e565b949350505050565b606082471015611b805760405162461bcd60e51b815260040161039d90611fc2565b611b8985611c1f565b611ba55760405162461bcd60e51b815260040161039d90612124565b60006060866001600160a01b03168587604051611bc29190611e3e565b60006040518083038185875af1925050503d8060008114611bff576040519150601f19603f3d011682016040523d82523d6000602084013e611c04565b606091505b5091509150611c14828286611c25565b979650505050505050565b3b151590565b60608315611c3457508161173d565b825115611c445782518084602001fd5b8160405162461bcd60e51b815260040161039d9190611eb6565b60405180608001604052806000600f0b81526020016000600f0b815260200160008152602001600081525090565b80356001600160a01b0381168114610f3257600080fd5b8051600f81900b8114610f3257600080fd5b600060208284031215611cc6578081fd5b61173d8383611c8c565b60008060408385031215611ce2578081fd5b611cec8484611c8c565b946020939093013593505050565b60006020808385031215611d0c578182fd5b823567ffffffffffffffff811115611d22578283fd5b8301601f81018513611d32578283fd5b8035611d45611d4082612230565b612209565b8181528381019083850185840285018601891015611d61578687fd5b8694505b83851015611d8b57611d778982611c8c565b835260019490940193918501918501611d65565b50979650505050505050565b600060208284031215611da8578081fd5b8151801515811461173d578182fd5b600060808284031215611dc8578081fd5b611dd26080612209565b611ddc8484611ca3565b8152611deb8460208501611ca3565b602082015260408301516040820152606083015160608201528091505092915050565b600060208284031215611e1f578081fd5b5035919050565b600060208284031215611e37578081fd5b5051919050565b60008251611e50818460208701612250565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b901515815260200190565b6000602082528251806020840152611ed5816040850160208701612250565b601f01601f19169190910160400192915050565b6020808252600b908201526a57726f6e6720636f696e2160a81b604082015260600190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b6020808252601e908201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604082015260600190565b60208082526026908201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6040820152651c8818d85b1b60d21b606082015260800190565b6020808252601a908201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604082015260600190565b6020808252600b908201526a57726f6e6720757365722160a81b604082015260600190565b60208082526006908201526512da5b1b195960d21b604082015260600190565b60208082526010908201526f5472616e73666572206661696c65642160801b604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601d908201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6040820152691bdd081cdd58d8d9595960b21b606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b90815260200190565b918252602082015260400190565b9283526020830191909152604082015260600190565b60405181810167ffffffffffffffff8111828210171561222857600080fd5b604052919050565b600067ffffffffffffffff821115612246578081fd5b5060209081020190565b60005b8381101561226b578181015183820152602001612253565b8381111561227a576000848401525b5050505056fea264697066735822122061811f16a531b7d13b16f2e27d8c648da0ca425f356724c73c8308447d11195a64736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101c45760003560e01c80638736659b116100f9578063b603cd8011610097578063f2fde38b11610071578063f2fde38b14610313578063f364824114610326578063f4359ce514610339578063fc0c546a14610341576101c4565b8063b603cd80146102f0578063bee5dc32146102f8578063c7f1ec5014610300576101c4565b80638ec8468a116100d35780638ec8468a146102d05780638fe8a101146102d8578063939ea66b146102e0578063a5420e98146102e8576101c4565b80638736659b146102ad578063899519be146102b55780638da5cb5b146102c8576101c4565b806363453ae111610166578063786479cd11610140578063786479cd1461027757806378e979251461028a5780637e686e01146102925780638721b785146102a5576101c4565b806363453ae11461024957806368662ea01461025c578063715018a61461026f576101c4565b8063326a9407116101a2578063326a94071461021a5780634e71d92d146102245780634f2bfe5b1461022c5780635a4b8c1d14610241576101c4565b80630cc672e4146101c95780630f6592ef146101e75780631e83409a14610207575b600080fd5b6101d1610349565b6040516101de9190611eab565b60405180910390f35b6101fa6101f5366004611e0e565b610358565b6040516101de91906121dc565b6101fa610215366004611cb5565b610378565b610222610495565b005b6101fa61049f565b6102346104af565b6040516101de9190611e5a565b6102346104c4565b6101d1610257366004611cb5565b6104de565b6101d161026a366004611cb5565b610682565b6102226107a3565b6101fa610285366004611cb5565b61082c565b6101fa61083e565b6101d16102a0366004611cfa565b610844565b610222610a4a565b6101fa610ade565b6101fa6102c3366004611e0e565b610ae4565b610234610af7565b6101fa610b06565b6101d1610b12565b6101fa610b28565b6101fa610b2e565b610222610b35565b610222610cb0565b6101fa61030e366004611cb5565b610d14565b610222610321366004611cb5565b610d26565b6101fa610334366004611cd0565b610de6565b6101fa610f38565b610234610f3f565b66071afd498d000a5460ff1681565b66038d7ea4c6800a8166038d7ea4c68000811061037157fe5b0154905081565b6000600260015414156103a65760405162461bcd60e51b815260040161039d906121a5565b60405180910390fd5b600260015566071afd498d000a54600160a81b900460ff16156103db5760405162461bcd60e51b815260040161039d90612064565b60035442106103ec576103ec610f54565b60065466071afd498d000a5460ff16801561040b575062015180810142115b1561041b576104186110e0565b50425b66038d7ea4c680075462093a8091829004909102906000906104489085906001600160a01b031684611327565b9050801561048a5766038d7ea4c680085461046d906001600160a01b03168583611744565b66038d7ea4c6800954610480908261179f565b66038d7ea4c68009555b600180559392505050565b61049d610f54565b565b60006104aa33610378565b905090565b66038d7ea4c68007546001600160a01b031681565b66071afd498d000a5461010090046001600160a01b031681565b66038d7ea4c68008546000906001600160a01b038381169116146105145760405162461bcd60e51b815260040161039d90611ee9565b66071afd498d000a54600160a81b900460ff16156105445760405162461bcd60e51b815260040161039d90612064565b6040516370a0823160e01b81526000906001600160a01b038416906370a0823190610573903390600401611e5a565b60206040518083038186803b15801561058b57600080fd5b505afa15801561059f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105c39190611e26565b90508015610679576040516323b872dd60e01b81526001600160a01b038416906323b872dd906105fb90339030908690600401611e6e565b602060405180830381600087803b15801561061557600080fd5b505af1158015610629573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061064d9190611d97565b5066071afd498d000a5460ff16801561066c5750620151806006540142115b15610679576106796110e0565b50600192915050565b600061068c6117c7565b6001600160a01b031661069d610af7565b6001600160a01b0316146106c35760405162461bcd60e51b815260040161039d906120ef565b66038d7ea4c68008546001600160a01b03838116911614156106f75760405162461bcd60e51b815260040161039d90611ee9565b66071afd498d000a546040516370a0823160e01b815261079b916001600160a01b03610100909104811691908516906370a082319061073a903090600401611e5a565b60206040518083038186803b15801561075257600080fd5b505afa158015610766573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061078a9190611e26565b6001600160a01b0385169190611744565b506001919050565b6107ab6117c7565b6001600160a01b03166107bc610af7565b6001600160a01b0316146107e25760405162461bcd60e51b815260040161039d906120ef565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b60056020526000908152604090205481565b60025481565b6000600260015414156108695760405162461bcd60e51b815260040161039d906121a5565b600260015566071afd498d000a54600160a81b900460ff161561089e5760405162461bcd60e51b815260040161039d90612064565b60035442106108af576108af610f54565b60065466071afd498d000a5460ff1680156108ce575062015180810142115b156108de576108db6110e0565b50425b66038d7ea4c680075466038d7ea4c680085462093a8092839004909202916001600160a01b0391821691166000805b8651811015610a1757600087828151811061092457fe5b6020026020010151905060006001600160a01b0316816001600160a01b0316141561094f5750610a17565b600061095c828789611327565b90508015610a0d5760405163a9059cbb60e01b81526001600160a01b0386169063a9059cbb906109929085908590600401611e92565b602060405180830381600087803b1580156109ac57600080fd5b505af11580156109c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109e49190611d97565b610a005760405162461bcd60e51b815260040161039d90612084565b610a0a84826117cb565b93505b505060010161090d565b508015610a3b5766038d7ea4c6800954610a31908261179f565b66038d7ea4c68009555b50506001808055949350505050565b610a526117c7565b6001600160a01b0316610a63610af7565b6001600160a01b031614610a895760405162461bcd60e51b815260040161039d906120ef565b66071afd498d000a805460ff81161560ff1990911681179091556040517fdbe6ac1081ebd8e648718341126659456f4009fcadfe1c23f66f5e61522610b290610ad3908390611eab565b60405180910390a150565b60035481565b60078166038d7ea4c68000811061037157fe5b6000546001600160a01b031690565b66038d7ea4c680095481565b66071afd498d000a54600160a81b900460ff1681565b60065481565b6201518081565b610b3d6117c7565b6001600160a01b0316610b4e610af7565b6001600160a01b031614610b745760405162461bcd60e51b815260040161039d906120ef565b66071afd498d000a805460ff60a81b1916600160a81b179081905566038d7ea4c68008546040516370a0823160e01b81526001600160a01b039182169263a9059cbb92610100909104169083906370a0823190610bd5903090600401611e5a565b60206040518083038186803b158015610bed57600080fd5b505afa158015610c01573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c259190611e26565b6040518363ffffffff1660e01b8152600401610c42929190611e92565b602060405180830381600087803b158015610c5c57600080fd5b505af1158015610c70573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c949190611d97565b61049d5760405162461bcd60e51b815260040161039d90612084565b610cb8610af7565b6001600160a01b0316336001600160a01b03161480610cf0575066071afd498d000a5460ff168015610cf05750620151806006540142115b610d0c5760405162461bcd60e51b815260040161039d9061203f565b61049d6110e0565b60046020526000908152604090205481565b610d2e6117c7565b6001600160a01b0316610d3f610af7565b6001600160a01b031614610d655760405162461bcd60e51b815260040161039d906120ef565b6001600160a01b038116610d8b5760405162461bcd60e51b815260040161039d90611f0e565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b66038d7ea4c68007546040516381fc83bb60e01b81526000916001600160a01b031690829082906381fc83bb90610e21908890600401611e5a565b60206040518083038186803b158015610e3957600080fd5b505afa158015610e4d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e719190611e26565b90506000610e81838787856117f0565b9050610e8b611c5e565b604051630d36406960e21b81526001600160a01b038516906334d901a490610eb9908a908690600401611e92565b60806040518083038186803b158015610ed157600080fd5b505afa158015610ee5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f099190611db7565b9050610f288160400151870382602001510282600001510360006118cb565b600f0b9450505050505b92915050565b62093a8081565b66038d7ea4c68008546001600160a01b031681565b66038d7ea4c68007546003546001600160a01b0390911690600062093a80804204029050826001600160a01b031663c2c4c5c16040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610fb357600080fd5b505af1158015610fc7573d6000803e3d6000fd5b5050505060005b60148110156110d85781831115610fe4576110d8565b6000610ff085856118e6565b9050610ffa611c5e565b604051638ad4c44760e01b81526001600160a01b03871690638ad4c447906110269085906004016121dc565b60806040518083038186803b15801561103e57600080fd5b505afa158015611052573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110769190611db7565b90506000816040015186111561108f5750604081015185035b6110a68183602001510283600001510360006118cb565b600f0b66038d7ea4c6800a8766038d7ea4c6800081106110c257fe5b015550505062093a809290920191600101610fce565b505060035550565b66038d7ea4c68008546040516370a0823160e01b81526000916001600160a01b0316906370a0823190611117903090600401611e5a565b60206040518083038186803b15801561112f57600080fd5b505afa158015611143573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111679190611e26565b9050600061118666038d7ea4c68009548361179f90919063ffffffff16565b66038d7ea4c6800983905560065490915060006111a3428361179f565b42600655905062093a80808304026000805b60148110156112e55762093a80830191508142101561126857831580156111db57508442145b15611219576111ff8660078566038d7ea4c6800081106111f757fe5b0154906117cb565b60078466038d7ea4c68000811061121257fe5b0155611263565b61124d61123a8561123461122d428a61179f565b8a90611a36565b90611a70565b60078566038d7ea4c6800081106111f757fe5b60078466038d7ea4c68000811061126057fe5b01555b6112e5565b8315801561127557508482145b156112ab576112918660078566038d7ea4c6800081106111f757fe5b60078466038d7ea4c6800081106112a457fe5b01556112d5565b6112bf61123a8561123461122d868a61179f565b60078466038d7ea4c6800081106112d257fe5b01555b90935083915081906001016111b5565b507fce749457b74e10f393f2c6b1ce4261b78791376db5a3f501477a809f03f500d642866040516113179291906121e5565b60405180910390a1505050505050565b6040516381fc83bb60e01b81526000908190819081906001600160a01b038716906381fc83bb9061135c908a90600401611e5a565b60206040518083038186803b15801561137457600080fd5b505afa158015611388573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113ac9190611e26565b600254909150816113c457600094505050505061173d565b6001600160a01b038816600090815260046020526040902054806113f5576113ee888a84866117f0565b9450611411565b6001600160a01b03891660009081526005602052604090205494505b8461141b57600194505b611423611c5e565b604051630d36406960e21b81526001600160a01b038a16906334d901a490611451908d908a90600401611e92565b60806040518083038186803b15801561146957600080fd5b505afa15801561147d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114a19190611db7565b9050816114be57604081015162093a8090819062093a7f01040291505b8782106114d4576000965050505050505061173d565b828210156114e0578291505b6114e8611c5e565b60005b60328110156116bd57898410611500576116bd565b826040015184101580156115145750858811155b156116185760018801975060405180608001604052808460000151600f0b81526020018460200151600f0b81526020018460400151815260200184606001518152509150858811156115925760405180608001604052806000600f0b81526020016000600f0b81526020016000815260200160008152509250611613565b604051630d36406960e21b81526001600160a01b038c16906334d901a4906115c0908f908c90600401611e92565b60806040518083038186803b1580156115d857600080fd5b505afa1580156115ec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116109190611db7565b92505b6116b5565b6000826040015185039050600061163c8460200151830285600001510360006118cb565b600f0b90508015801561164e5750878a115b1561165a5750506116bd565b80156116aa576116a76116a066038d7ea4c6800a8866038d7ea4c68000811061167f57fe5b015461123460078a66038d7ea4c68000811061169757fe5b01548590611a36565b8a906117cb565b98505b62093a808601955050505b6001016114eb565b506116cb8560018903611aa2565b6001600160a01b038c16600081815260056020908152604080832085905560049091529081902086905551919850907f9cdcf2f7714cca3508c7f0110b04a90a80a3a8dd0e35de99689db74d28c5383e9061172b9089908b908a906121f3565b60405180910390a25093955050505050505b9392505050565b61179a8363a9059cbb60e01b8484604051602401611763929190611e92565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611ab8565b505050565b6000828211156117c15760405162461bcd60e51b815260040161039d90611f8b565b50900390565b3390565b60008282018381101561173d5760405162461bcd60e51b815260040161039d90611f54565b60008082815b60808110156118bf5781831061180b576118bf565b600282840181010461181b611c5e565b604051630d36406960e21b81526001600160a01b038b16906334d901a490611849908c908690600401611e92565b60806040518083038186803b15801561186157600080fd5b505afa158015611875573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118999190611db7565b9050878160400151116118ae578194506118b5565b6001820393505b50506001016117f6565b50909695505050505050565b600081600f0b83600f0b126118e0578261173d565b50919050565b600080600090506000846001600160a01b031663900cf0cf6040518163ffffffff1660e01b815260040160206040518083038186803b15801561192857600080fd5b505afa15801561193c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119609190611e26565b905060005b6080811015611a2c5781831061197a57611a2c565b600282840181010461198a611c5e565b604051638ad4c44760e01b81526001600160a01b03891690638ad4c447906119b69085906004016121dc565b60806040518083038186803b1580156119ce57600080fd5b505afa1580156119e2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a069190611db7565b905086816040015111611a1b57819450611a22565b6001820393505b5050600101611965565b5090949350505050565b600082611a4557506000610f32565b82820282848281611a5257fe5b041461173d5760405162461bcd60e51b815260040161039d906120ae565b6000808211611a915760405162461bcd60e51b815260040161039d90612008565b818381611a9a57fe5b049392505050565b6000818310611ab1578161173d565b5090919050565b6060611b0d826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611b479092919063ffffffff16565b80519091501561179a5780806020019051810190611b2b9190611d97565b61179a5760405162461bcd60e51b815260040161039d9061215b565b6060611b568484600085611b5e565b949350505050565b606082471015611b805760405162461bcd60e51b815260040161039d90611fc2565b611b8985611c1f565b611ba55760405162461bcd60e51b815260040161039d90612124565b60006060866001600160a01b03168587604051611bc29190611e3e565b60006040518083038185875af1925050503d8060008114611bff576040519150601f19603f3d011682016040523d82523d6000602084013e611c04565b606091505b5091509150611c14828286611c25565b979650505050505050565b3b151590565b60608315611c3457508161173d565b825115611c445782518084602001fd5b8160405162461bcd60e51b815260040161039d9190611eb6565b60405180608001604052806000600f0b81526020016000600f0b815260200160008152602001600081525090565b80356001600160a01b0381168114610f3257600080fd5b8051600f81900b8114610f3257600080fd5b600060208284031215611cc6578081fd5b61173d8383611c8c565b60008060408385031215611ce2578081fd5b611cec8484611c8c565b946020939093013593505050565b60006020808385031215611d0c578182fd5b823567ffffffffffffffff811115611d22578283fd5b8301601f81018513611d32578283fd5b8035611d45611d4082612230565b612209565b8181528381019083850185840285018601891015611d61578687fd5b8694505b83851015611d8b57611d778982611c8c565b835260019490940193918501918501611d65565b50979650505050505050565b600060208284031215611da8578081fd5b8151801515811461173d578182fd5b600060808284031215611dc8578081fd5b611dd26080612209565b611ddc8484611ca3565b8152611deb8460208501611ca3565b602082015260408301516040820152606083015160608201528091505092915050565b600060208284031215611e1f578081fd5b5035919050565b600060208284031215611e37578081fd5b5051919050565b60008251611e50818460208701612250565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b901515815260200190565b6000602082528251806020840152611ed5816040850160208701612250565b601f01601f19169190910160400192915050565b6020808252600b908201526a57726f6e6720636f696e2160a81b604082015260600190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b6020808252601e908201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604082015260600190565b60208082526026908201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6040820152651c8818d85b1b60d21b606082015260800190565b6020808252601a908201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604082015260600190565b6020808252600b908201526a57726f6e6720757365722160a81b604082015260600190565b60208082526006908201526512da5b1b195960d21b604082015260600190565b60208082526010908201526f5472616e73666572206661696c65642160801b604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601d908201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6040820152691bdd081cdd58d8d9595960b21b606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b90815260200190565b918252602082015260400190565b9283526020830191909152604082015260600190565b60405181810167ffffffffffffffff8111828210171561222857600080fd5b604052919050565b600067ffffffffffffffff821115612246578081fd5b5060209081020190565b60005b8381101561226b578181015183820152602001612253565b8381111561227a576000848401525b5050505056fea264697066735822122061811f16a531b7d13b16f2e27d8c648da0ca425f356724c73c8308447d11195a64736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "Independent of votingescrow's reward contract As a tool for distributing rewards!",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10,
        "contract": "contracts/staking/FeeDistributor.sol:FeeDistributor",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2305,
        "contract": "contracts/staking/FeeDistributor.sol:FeeDistributor",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 23155,
        "contract": "contracts/staking/FeeDistributor.sol:FeeDistributor",
        "label": "startTime",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 23157,
        "contract": "contracts/staking/FeeDistributor.sol:FeeDistributor",
        "label": "timeCursor",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 23161,
        "contract": "contracts/staking/FeeDistributor.sol:FeeDistributor",
        "label": "timeCursorOf",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 23165,
        "contract": "contracts/staking/FeeDistributor.sol:FeeDistributor",
        "label": "userEpochOf",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 23167,
        "contract": "contracts/staking/FeeDistributor.sol:FeeDistributor",
        "label": "lastTokenTime",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 23171,
        "contract": "contracts/staking/FeeDistributor.sol:FeeDistributor",
        "label": "tokensPerWeek",
        "offset": 0,
        "slot": "7",
        "type": "t_array(t_uint256)1000000000000000_storage"
      },
      {
        "astId": 23173,
        "contract": "contracts/staking/FeeDistributor.sol:FeeDistributor",
        "label": "votingEscrow",
        "offset": 0,
        "slot": "1000000000000007",
        "type": "t_address"
      },
      {
        "astId": 23175,
        "contract": "contracts/staking/FeeDistributor.sol:FeeDistributor",
        "label": "token",
        "offset": 0,
        "slot": "1000000000000008",
        "type": "t_address"
      },
      {
        "astId": 23177,
        "contract": "contracts/staking/FeeDistributor.sol:FeeDistributor",
        "label": "tokenLastBalance",
        "offset": 0,
        "slot": "1000000000000009",
        "type": "t_uint256"
      },
      {
        "astId": 23181,
        "contract": "contracts/staking/FeeDistributor.sol:FeeDistributor",
        "label": "veSupply",
        "offset": 0,
        "slot": "1000000000000010",
        "type": "t_array(t_uint256)1000000000000000_storage"
      },
      {
        "astId": 23183,
        "contract": "contracts/staking/FeeDistributor.sol:FeeDistributor",
        "label": "canCheckpointToken",
        "offset": 0,
        "slot": "2000000000000010",
        "type": "t_bool"
      },
      {
        "astId": 23185,
        "contract": "contracts/staking/FeeDistributor.sol:FeeDistributor",
        "label": "emergencyReturn",
        "offset": 1,
        "slot": "2000000000000010",
        "type": "t_address"
      },
      {
        "astId": 23187,
        "contract": "contracts/staking/FeeDistributor.sol:FeeDistributor",
        "label": "isKilled",
        "offset": 21,
        "slot": "2000000000000010",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)1000000000000000_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[1000000000000000]",
        "numberOfBytes": "32000000000000000"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}