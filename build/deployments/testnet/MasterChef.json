{
  "address": "0x32233333229aAd6f58807eAeb34616F0D2C5808F",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract EMOToken",
          "name": "_emo",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_stakingPercent",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_daoPercent",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_safuPercent",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_refPercent",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_daoAddr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_safuAddr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_refAddr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_feeAddr",
          "type": "address"
        },
        {
          "internalType": "contract IMultiFeeDistribution",
          "name": "_rewardMinter",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_emoPerSecond",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_votingEscrow",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "allocPoint",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "contract IERC20",
          "name": "lpToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract IOnwardIncentivesController",
          "name": "incentivesController",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "boost",
          "type": "bool"
        }
      ],
      "name": "Add",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "EmergencyWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "allocPoint",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "contract IOnwardIncentivesController",
          "name": "incentivesController",
          "type": "address"
        }
      ],
      "name": "Set",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BONUS_MULTIPLIER",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TOKENLESS_PRODUCTION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_allocPoint",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_depositFeePercent",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20",
          "name": "_lpToken",
          "type": "address"
        },
        {
          "internalType": "contract IOnwardIncentivesController",
          "name": "_incentivesController",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_boost",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "_withUpdate",
          "type": "bool"
        }
      ],
      "name": "add",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "daoAddr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "daoPercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "depositFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emo",
      "outputs": [
        {
          "internalType": "contract EMOToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emoPerSecond",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "enterStaking",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeAddr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_from",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_to",
          "type": "uint256"
        }
      ],
      "name": "getMultiplier",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "harvestAllRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastTimeDaoWithdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "leaveStaking",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "massUpdatePools",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "pendingTokens",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "percentDec",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "name": "poolExistence",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "poolInfo",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "lpToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "workingSupply",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "boost",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "allocPoint",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastRewardTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "accEmoPerShare",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "depositFeePercent",
          "type": "uint256"
        },
        {
          "internalType": "contract IOnwardIncentivesController",
          "name": "incentivesController",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "refAddr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "refPercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardMinter",
      "outputs": [
        {
          "internalType": "contract IMultiFeeDistribution",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "safuAddr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "safuPercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_allocPoint",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_depositFeePercent",
          "type": "uint256"
        },
        {
          "internalType": "contract IOnwardIncentivesController",
          "name": "_incentivesController",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_withUpdate",
          "type": "bool"
        }
      ],
      "name": "set",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_daoAddr",
          "type": "address"
        }
      ],
      "name": "setDaoAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_emoPerSecond",
          "type": "uint256"
        }
      ],
      "name": "setEmoPerSecond",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeAddr",
          "type": "address"
        }
      ],
      "name": "setFeeAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_users",
          "type": "address[]"
        },
        {
          "internalType": "bool",
          "name": "_flag",
          "type": "bool"
        }
      ],
      "name": "setPool0Staker",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_refAddr",
          "type": "address"
        }
      ],
      "name": "setRefAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_safuAddr",
          "type": "address"
        }
      ],
      "name": "setSafuAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_startTime",
          "type": "uint256"
        }
      ],
      "name": "setStartTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_users",
          "type": "address[]"
        },
        {
          "internalType": "bool",
          "name": "_flag",
          "type": "bool"
        }
      ],
      "name": "setWhitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakingPercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "toggleWhitelistable",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalAllocPoint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "multiplierNumber",
          "type": "uint256"
        }
      ],
      "name": "updateMultiplier",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "updatePool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "workingAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardDebt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "votingEscrow",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "whitelist",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "whitelistable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawDevAndRefFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x8646dd5fe3b29fdcb58ec560ede935ce3c3add4259b1290134227343b38cb029",
  "receipt": {
    "to": null,
    "from": "0x0aA282136b3924ca6767C4D5B9aad6f83bD40A9c",
    "contractAddress": "0x32233333229aAd6f58807eAeb34616F0D2C5808F",
    "transactionIndex": 0,
    "gasUsed": "3677889",
    "logsBloom": "0x
    "blockHash": "0x7c3c1f2ce5fdd87a4d8d9866449ece3b577fab1cff53834b3a7fce3a26d5dfaf",
    "transactionHash": "0x8646dd5fe3b29fdcb58ec560ede935ce3c3add4259b1290134227343b38cb029",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 1331411,
        "transactionHash": "0x8646dd5fe3b29fdcb58ec560ede935ce3c3add4259b1290134227343b38cb029",
        "address": "0x32233333229aAd6f58807eAeb34616F0D2C5808F",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000aa282136b3924ca6767c4d5b9aad6f83bd40a9c"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x7c3c1f2ce5fdd87a4d8d9866449ece3b577fab1cff53834b3a7fce3a26d5dfaf"
      }
    ],
    "blockNumber": 1331411,
    "cumulativeGasUsed": "3677889",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x7cBa32163a8f4c56C846f5C3685E3b7a450c9002",
    "877000",
    "70000",
    "10000",
    "43000",
    "0x0aA282136b3924ca6767C4D5B9aad6f83bD40A9c",
    "0x0aA282136b3924ca6767C4D5B9aad6f83bD40A9c",
    "0x0aA282136b3924ca6767C4D5B9aad6f83bD40A9c",
    "0x0aA282136b3924ca6767C4D5B9aad6f83bD40A9c",
    "0x184d100d1CbcC3A85A98BA9d17946E38953990B5",
    "3250000000000000000",
    "0xFF8ebFbA27E35c34923784DF0669aB727394A2b7"
  ],
  "solcInputHash": "a446a3ecf802cd554ad6cd17661d3447",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract EMOToken\",\"name\":\"_emo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_stakingPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_daoPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_safuPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_refPercent\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_daoAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_safuAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_refAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeAddr\",\"type\":\"address\"},{\"internalType\":\"contract IMultiFeeDistribution\",\"name\":\"_rewardMinter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_emoPerSecond\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_votingEscrow\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"lpToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IOnwardIncentivesController\",\"name\":\"incentivesController\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"boost\",\"type\":\"bool\"}],\"name\":\"Add\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"contract IOnwardIncentivesController\",\"name\":\"incentivesController\",\"type\":\"address\"}],\"name\":\"Set\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BONUS_MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOKENLESS_PRODUCTION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_depositFeePercent\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"contract IOnwardIncentivesController\",\"name\":\"_incentivesController\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_boost\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daoAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daoPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emo\",\"outputs\":[{\"internalType\":\"contract EMOToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emoPerSecond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"enterStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_to\",\"type\":\"uint256\"}],\"name\":\"getMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"harvestAllRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTimeDaoWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"leaveStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"massUpdatePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"percentDec\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolExistence\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"workingSupply\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"boost\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accEmoPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositFeePercent\",\"type\":\"uint256\"},{\"internalType\":\"contract IOnwardIncentivesController\",\"name\":\"incentivesController\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardMinter\",\"outputs\":[{\"internalType\":\"contract IMultiFeeDistribution\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"safuAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"safuPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_depositFeePercent\",\"type\":\"uint256\"},{\"internalType\":\"contract IOnwardIncentivesController\",\"name\":\"_incentivesController\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_daoAddr\",\"type\":\"address\"}],\"name\":\"setDaoAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_emoPerSecond\",\"type\":\"uint256\"}],\"name\":\"setEmoPerSecond\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeAddr\",\"type\":\"address\"}],\"name\":\"setFeeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"_flag\",\"type\":\"bool\"}],\"name\":\"setPool0Staker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_refAddr\",\"type\":\"address\"}],\"name\":\"setRefAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_safuAddr\",\"type\":\"address\"}],\"name\":\"setSafuAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"}],\"name\":\"setStartTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"_flag\",\"type\":\"bool\"}],\"name\":\"setWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleWhitelistable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"multiplierNumber\",\"type\":\"uint256\"}],\"name\":\"updateMultiplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"workingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"votingEscrow\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelistable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawDevAndRefFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/staking/MasterChef.sol\":\"MasterChef\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x15e2d5bd4c28a88548074c54d220e8086f638a71ed07e6b3ba5a70066fcf458d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0xca0c2396dbeb3503b51abf4248ebf77a1461edad513c01529df51850a012bee3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0x1562cd9922fbf739edfb979f506809e2743789cbde3177515542161c3d04b164\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x8bbbc2f5c10065ee272592ae0a7a6ceb23de2fbd81564ee0bb015ecf404d5f61\",\"license\":\"MIT\"},\"contracts/interfaces/IMultiFeeDistribution.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\ninterface IMultiFeeDistribution {\\n    function mint(address user, uint256 amount, bool withPenalty) external;\\n}\\n\",\"keccak256\":\"0x8a090d694b6212014741ed8056f8675840ef569564bdec173310ed161699be61\",\"license\":\"MIT\"},\"contracts/interfaces/IOnwardIncentivesController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IOnwardIncentivesController {\\n    function onReward(address user, uint256 newLpAmount) external;\\n\\n    function pendingTokens(address user) external view returns (uint256 pending);\\n\\n    function rewardToken() external view returns (IERC20);\\n\\n    function getNextIncentivesController() external view returns (address);\\n}\\n\",\"keccak256\":\"0x6671bd4d8674181b6c5d60076c6468fced9538a28c6ce5d85974a40610f1d3e4\",\"license\":\"MIT\"},\"contracts/staking/EMOToken.sol\":{\"content\":\"\\n// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/EnumerableSet.sol\\\";\\n\\n// EMOToken with Governance.\\ncontract EMOToken is ERC20('EvmoSwap Token', 'EMO'), Ownable {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    EnumerableSet.AddressSet private _minters;\\n    \\n    uint256 constant public MAX_TOTAL_SUPPLY = 500000000 * 1e18;\\n\\n    /// @notice Creates `_amount` token to `_to`. Must only be called by the owner (MasterChef).\\n    function mint(address _to, uint256 _amount) public onlyMinter {\\n        require(_amount.add(totalSupply()) <= MAX_TOTAL_SUPPLY, \\\"ERC20: over limit\\\");\\n\\n        _mint(_to, _amount);\\n        _moveDelegates(address(0), _delegates[_to], _amount);\\n    }\\n\\n    // Copied and modified from YAM code:\\n    // https://github.com/yam-finance/yam-protocol/blob/master/contracts/token/YAMGovernanceStorage.sol\\n    // https://github.com/yam-finance/yam-protocol/blob/master/contracts/token/YAMGovernance.sol\\n    // Which is copied and modified from COMPOUND:\\n    // https://github.com/compound-finance/compound-protocol/blob/master/contracts/Governance/Comp.sol\\n\\n    /// @dev A record of each accounts delegate\\n    mapping (address => address) internal _delegates;\\n\\n    /// @notice A checkpoint for marking number of votes from a given block\\n    struct Checkpoint {\\n        uint32 fromBlock;\\n        uint256 votes;\\n    }\\n\\n    /// @notice A record of votes checkpoints for each account, by index\\n    mapping (address => mapping (uint32 => Checkpoint)) public checkpoints;\\n\\n    /// @notice The number of checkpoints for each account\\n    mapping (address => uint32) public numCheckpoints;\\n\\n    /// @notice The EIP-712 typehash for the contract's domain\\n    bytes32 public constant DOMAIN_TYPEHASH = keccak256(\\\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\\\");\\n\\n    /// @notice The EIP-712 typehash for the delegation struct used by the contract\\n    bytes32 public constant DELEGATION_TYPEHASH = keccak256(\\\"Delegation(address delegatee,uint256 nonce,uint256 expiry)\\\");\\n\\n    /// @notice A record of states for signing / validating signatures\\n    mapping (address => uint) public nonces;\\n\\n    /// @notice An event thats emitted when an account changes its delegate\\n    event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\\n\\n    /// @notice An event thats emitted when a delegate account's vote balance changes\\n    event DelegateVotesChanged(address indexed delegate, uint previousBalance, uint newBalance);\\n\\n    /**\\n     * @notice Delegate votes from `msg.sender` to `delegatee`\\n     * @param delegator The address to get delegatee for\\n     */\\n    function delegates(address delegator)\\n    external\\n    view\\n    returns (address)\\n    {\\n        return _delegates[delegator];\\n    }\\n\\n    /**\\n     * @notice Delegate votes from `msg.sender` to `delegatee`\\n    * @param delegatee The address to delegate votes to\\n    */\\n    function delegate(address delegatee) external {\\n        return _delegate(msg.sender, delegatee);\\n    }\\n\\n    /**\\n     * @notice Delegates votes from signatory to `delegatee`\\n     * @param delegatee The address to delegate votes to\\n     * @param nonce The contract state required to match the signature\\n     * @param expiry The time at which to expire the signature\\n     * @param v The recovery byte of the signature\\n     * @param r Half of the ECDSA signature pair\\n     * @param s Half of the ECDSA signature pair\\n     */\\n    function delegateBySig(\\n        address delegatee,\\n        uint nonce,\\n        uint expiry,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    )\\n    external\\n    {\\n        bytes32 domainSeparator = keccak256(\\n            abi.encode(\\n                DOMAIN_TYPEHASH,\\n                keccak256(bytes(name())),\\n                getChainId(),\\n                address(this)\\n            )\\n        );\\n\\n        bytes32 structHash = keccak256(\\n            abi.encode(\\n                DELEGATION_TYPEHASH,\\n                delegatee,\\n                nonce,\\n                expiry\\n            )\\n        );\\n\\n        bytes32 digest = keccak256(\\n            abi.encodePacked(\\n                \\\"\\\\x19\\\\x01\\\",\\n                domainSeparator,\\n                structHash\\n            )\\n        );\\n\\n        address signatory = ecrecover(digest, v, r, s);\\n        require(signatory != address(0), \\\"EMO::delegateBySig: invalid signature\\\");\\n        require(nonce == nonces[signatory]++, \\\"EMO::delegateBySig: invalid nonce\\\");\\n        require(now <= expiry, \\\"EMO::delegateBySig: signature expired\\\");\\n        return _delegate(signatory, delegatee);\\n    }\\n\\n    /**\\n     * @notice Gets the current votes balance for `account`\\n     * @param account The address to get votes balance\\n     * @return The number of current votes for `account`\\n     */\\n    function getCurrentVotes(address account)\\n    external\\n    view\\n    returns (uint256)\\n    {\\n        uint32 nCheckpoints = numCheckpoints[account];\\n        return nCheckpoints > 0 ? checkpoints[account][nCheckpoints - 1].votes : 0;\\n    }\\n\\n    /**\\n     * @notice Determine the prior number of votes for an account as of a block number\\n     * @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\\n     * @param account The address of the account to check\\n     * @param blockNumber The block number to get the vote balance at\\n     * @return The number of votes the account had as of the given block\\n     */\\n    function getPriorVotes(address account, uint blockNumber)\\n    external\\n    view\\n    returns (uint256)\\n    {\\n        require(blockNumber < block.number, \\\"EMO::getPriorVotes: not yet determined\\\");\\n\\n        uint32 nCheckpoints = numCheckpoints[account];\\n        if (nCheckpoints == 0) {\\n            return 0;\\n        }\\n\\n        // First check most recent balance\\n        if (checkpoints[account][nCheckpoints - 1].fromBlock <= blockNumber) {\\n            return checkpoints[account][nCheckpoints - 1].votes;\\n        }\\n\\n        // Next check implicit zero balance\\n        if (checkpoints[account][0].fromBlock > blockNumber) {\\n            return 0;\\n        }\\n\\n        uint32 lower = 0;\\n        uint32 upper = nCheckpoints - 1;\\n        while (upper > lower) {\\n            uint32 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\\n            Checkpoint memory cp = checkpoints[account][center];\\n            if (cp.fromBlock == blockNumber) {\\n                return cp.votes;\\n            } else if (cp.fromBlock < blockNumber) {\\n                lower = center;\\n            } else {\\n                upper = center - 1;\\n            }\\n        }\\n        return checkpoints[account][lower].votes;\\n    }\\n\\n    function _delegate(address delegator, address delegatee)\\n    internal\\n    {\\n        address currentDelegate = _delegates[delegator];\\n        uint256 delegatorBalance = balanceOf(delegator); // balance of underlying EMOs (not scaled);\\n        _delegates[delegator] = delegatee;\\n\\n        emit DelegateChanged(delegator, currentDelegate, delegatee);\\n\\n        _moveDelegates(currentDelegate, delegatee, delegatorBalance);\\n    }\\n\\n    function _moveDelegates(address srcRep, address dstRep, uint256 amount) internal {\\n        if (srcRep != dstRep && amount > 0) {\\n            if (srcRep != address(0)) {\\n                // decrease old representative\\n                uint32 srcRepNum = numCheckpoints[srcRep];\\n                uint256 srcRepOld = srcRepNum > 0 ? checkpoints[srcRep][srcRepNum - 1].votes : 0;\\n                uint256 srcRepNew = srcRepOld.sub(amount);\\n                _writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew);\\n            }\\n\\n            if (dstRep != address(0)) {\\n                // increase new representative\\n                uint32 dstRepNum = numCheckpoints[dstRep];\\n                uint256 dstRepOld = dstRepNum > 0 ? checkpoints[dstRep][dstRepNum - 1].votes : 0;\\n                uint256 dstRepNew = dstRepOld.add(amount);\\n                _writeCheckpoint(dstRep, dstRepNum, dstRepOld, dstRepNew);\\n            }\\n        }\\n    }\\n\\n    function _writeCheckpoint(\\n        address delegatee,\\n        uint32 nCheckpoints,\\n        uint256 oldVotes,\\n        uint256 newVotes\\n    )\\n    internal\\n    {\\n        uint32 blockNumber = safe32(block.number, \\\"EMO::_writeCheckpoint: block number exceeds 32 bits\\\");\\n\\n        if (nCheckpoints > 0 && checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber) {\\n            checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;\\n        } else {\\n            checkpoints[delegatee][nCheckpoints] = Checkpoint(blockNumber, newVotes);\\n            numCheckpoints[delegatee] = nCheckpoints + 1;\\n        }\\n\\n        emit DelegateVotesChanged(delegatee, oldVotes, newVotes);\\n    }\\n\\n    function safe32(uint n, string memory errorMessage) internal pure returns (uint32) {\\n        require(n < 2**32, errorMessage);\\n        return uint32(n);\\n    }\\n\\n    function getChainId() internal pure returns (uint) {\\n        uint256 chainId;\\n        assembly { chainId := chainid() }\\n        return chainId;\\n    }\\n\\n    function addMinter(address _addMinter) public onlyOwner returns (bool) {\\n        require(_addMinter != address(0), \\\"EMO: _addMinter is the zero address\\\");\\n        return EnumerableSet.add(_minters, _addMinter);\\n    }\\n\\n    function delMinter(address _delMinter) public onlyOwner returns (bool) {\\n        require(_delMinter != address(0), \\\"EMO: _delMinter is the zero address\\\");\\n        return EnumerableSet.remove(_minters, _delMinter);\\n    }\\n\\n    function getMinterLength() public view returns (uint256) {\\n        return EnumerableSet.length(_minters);\\n    }\\n\\n    function isMinter(address account) public view returns (bool) {\\n        return EnumerableSet.contains(_minters, account);\\n    }\\n\\n    function getMinter(uint256 _index) public view onlyOwner returns (address){\\n        require(_index <= getMinterLength() - 1, \\\"EMO: index out of bounds\\\");\\n        return EnumerableSet.at(_minters, _index);\\n    }\\n\\n    // modifier for mint function\\n    modifier onlyMinter() {\\n        require(isMinter(msg.sender), \\\"caller is not the minter\\\");\\n        _;\\n    }\\n}\",\"keccak256\":\"0xf7f5f33f2d068d2e5e9e4c4749b6f20711e87ce80046281b3cd7845c24e1d95b\",\"license\":\"MIT\"},\"contracts/staking/MasterChef.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"./EMOToken.sol\\\";\\nimport \\\"../interfaces/IOnwardIncentivesController.sol\\\";\\nimport \\\"../interfaces/IMultiFeeDistribution.sol\\\";\\n\\ncontract MasterChef is Ownable, ReentrancyGuard {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    // Info of each user.\\n    struct UserInfo {\\n        uint256 amount;     // How many LP tokens the user has provided.\\n        uint256 workingAmount; // Take voting power into consideration\\n        uint256 rewardDebt; // Reward debt. See explanation below.\\n    }\\n\\n    // Info of each pool.\\n    struct PoolInfo {\\n        IERC20 lpToken;           // Address of LP token contract.\\n        uint256 workingSupply;      // Take voting power into consideration\\n        bool boost;\\n        uint256 allocPoint;       // How many allocation points assigned to this pool. EMOs to distribute per second.\\n        uint256 lastRewardTime;  // Last second number that EMOs distribution occurs.\\n        uint256 accEmoPerShare; // Accumulated EMOs per share, times 1e12. See below.\\n        uint256 depositFeePercent;      // Deposit fee in basis points\\n        IOnwardIncentivesController incentivesController; // bonus reward\\n    }\\n\\n    // 40/100=2.5X\\n    uint256 public constant TOKENLESS_PRODUCTION = 40;\\n\\n    // The EMO TOKEN!\\n    EMOToken public emo;\\n    //Pools, Farms, DAO, Refs percent decimals\\n    uint256 public percentDec = 1000000;\\n    //Pools and Farms percent from token per block\\n    uint256 public stakingPercent;\\n    //DAO percent from token per block\\n    uint256 public daoPercent;\\n    //Safu fund percent from token per block\\n    uint256 public safuPercent;\\n    //Referrals percent from token per block\\n    uint256 public refPercent;\\n    // DAO address.\\n    address public daoAddr;\\n    // Safu fund.\\n    address public safuAddr;\\n    // Refferals commision address.\\n    address public refAddr;\\n    // Deposit Fee address\\n    address public feeAddr;\\n    // Last block then deployer withdraw dao and ref fee\\n    uint256 public lastTimeDaoWithdraw;\\n    // The Reward Minter!\\n    IMultiFeeDistribution public rewardMinter;\\n    // Voting power\\n    address public votingEscrow;\\n    // EMO tokens created per second.\\n    uint256 public emoPerSecond;\\n    // Bonus muliplier for early emo makers.\\n    uint256 public BONUS_MULTIPLIER = 1;\\n\\n    // Info of each pool.\\n    PoolInfo[] public poolInfo;\\n    // Info of each user that stakes LP tokens.\\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\\n    mapping(IERC20 => bool) public poolExistence;\\n    // Total allocation points. Must be the sum of all allocation points in all pools.\\n    uint256 public totalAllocPoint = 0;\\n    // The second number when EMO mining starts.\\n    uint256 public startTime;\\n    // Only EOA or contract whitelisted is allowed to deposit\\n    bool public whitelistable;\\n    mapping(address => bool) public whitelist;\\n    // Only user whitelisted is allowed to deposit pool 0\\n    mapping(address => bool) pool0Staker;\\n\\n    event Add(uint256 indexed pid, uint256 allocPoint, IERC20 indexed lpToken, IOnwardIncentivesController indexed incentivesController, bool boost);\\n    event Set(uint256 indexed pid, uint256 allocPoint, IOnwardIncentivesController indexed incentivesController);\\n    event Deposit(address indexed from, address indexed to, uint256 indexed pid, uint256 amount);\\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n\\n    modifier nonDuplicated(IERC20 _lpToken) {\\n        require(poolExistence[_lpToken] == false, \\\"nonDuplicated: duplicated\\\");\\n        _;\\n    }\\n\\n    constructor(\\n        EMOToken _emo,\\n        uint256 _stakingPercent,\\n        uint256 _daoPercent,\\n        uint256 _safuPercent,\\n        uint256 _refPercent,\\n        address _daoAddr,\\n        address _safuAddr,\\n        address _refAddr,\\n        address _feeAddr,\\n        IMultiFeeDistribution _rewardMinter,\\n        uint256 _emoPerSecond,\\n        address _votingEscrow\\n    ) public {\\n        emo = _emo;\\n        stakingPercent = _stakingPercent;\\n        daoPercent = _daoPercent;\\n        safuPercent = _safuPercent;\\n        refPercent = _refPercent;\\n        daoAddr = _daoAddr;\\n        safuAddr = _safuAddr;\\n        refAddr = _refAddr;\\n        feeAddr = _feeAddr;\\n        rewardMinter = _rewardMinter;\\n        emoPerSecond = _emoPerSecond;\\n        votingEscrow = _votingEscrow;\\n        whitelistable = true;\\n    }\\n\\n    function setStartTime(uint256 _startTime) public onlyOwner {\\n        require(startTime == 0, \\\"startTime has been set\\\");\\n        startTime = _startTime;\\n\\n        // staking pool\\n        poolInfo.push(PoolInfo({\\n            lpToken : emo,\\n            workingSupply : 0,\\n            boost : false,\\n            allocPoint : 100,\\n            lastRewardTime : startTime,\\n            accEmoPerShare : 0,\\n            depositFeePercent : 0,\\n            incentivesController : IOnwardIncentivesController(address(0))\\n        }));\\n\\n        poolExistence[emo] = true;\\n        totalAllocPoint = 100;\\n\\n    }\\n\\n    function updateMultiplier(uint256 multiplierNumber) public onlyOwner {\\n        BONUS_MULTIPLIER = multiplierNumber;\\n    }\\n\\n    function poolLength() external view returns (uint256) {\\n        return poolInfo.length;\\n    }\\n\\n    function toggleWhitelistable() external onlyOwner {\\n        whitelistable = !whitelistable;\\n    }\\n\\n    function setWhitelist(address [] memory _users, bool _flag) external onlyOwner {\\n        for (uint i = 0; i < _users.length; i++) {\\n            whitelist[_users[i]] = _flag;\\n        }\\n    }\\n\\n    function setPool0Staker(address [] memory _users, bool _flag) external onlyOwner {\\n        for (uint i = 0; i < _users.length; i++) {\\n            pool0Staker[_users[i]] = _flag;\\n        }\\n    }\\n\\n    function withdrawDevAndRefFee() public {\\n        require(lastTimeDaoWithdraw < block.timestamp, 'wait for new block');\\n        uint256 multiplier = getMultiplier(lastTimeDaoWithdraw, block.timestamp);\\n        uint256 emoReward = multiplier.mul(emoPerSecond);\\n        emo.mint(daoAddr, emoReward.mul(daoPercent).div(percentDec));\\n        emo.mint(safuAddr, emoReward.mul(safuPercent).div(percentDec));\\n        emo.mint(refAddr, emoReward.mul(refPercent).div(percentDec));\\n        lastTimeDaoWithdraw = block.timestamp;\\n    }\\n\\n    // Add a new lp to the pool. Can only be called by the owner.\\n    // XXX DO NOT add the same LP token more than once. Rewards will be messed up if you do.\\n    function add(uint256 _allocPoint, uint256 _depositFeePercent, IERC20 _lpToken, IOnwardIncentivesController _incentivesController, bool _boost, bool _withUpdate) public onlyOwner nonDuplicated(_lpToken) {\\n        require(_depositFeePercent <= percentDec, \\\"set: invalid deposit fee basis points\\\");\\n        require(startTime != 0, \\\"!startTime\\\");\\n        if (_withUpdate) {\\n            massUpdatePools();\\n        }\\n\\n        uint256 lastRewardTime = block.timestamp > startTime ? block.timestamp : startTime;\\n        totalAllocPoint = totalAllocPoint.add(_allocPoint);\\n        poolExistence[_lpToken] = true;\\n        poolInfo.push(PoolInfo({\\n            lpToken : _lpToken,\\n            workingSupply : 0,\\n            boost : _boost,\\n            allocPoint : _allocPoint,\\n            lastRewardTime : lastRewardTime,\\n            accEmoPerShare : 0,\\n            depositFeePercent : _depositFeePercent,\\n            incentivesController : _incentivesController\\n        }));\\n        emit Add(poolInfo.length.sub(1), _allocPoint, _lpToken, _incentivesController, _boost);\\n    }\\n\\n    // Update the given pool's EMO allocation point. Can only be called by the owner.\\n    function set(uint256 _pid, uint256 _allocPoint, uint256 _depositFeePercent, IOnwardIncentivesController _incentivesController, bool _withUpdate) public onlyOwner {\\n        require(_depositFeePercent <= percentDec, \\\"set: invalid deposit fee basis points\\\");\\n        require(startTime != 0, \\\"!startTime\\\");\\n        require(_pid != 0 || address(_incentivesController) == address(0), \\\"!incentive\\\");\\n        if (_withUpdate) {\\n            massUpdatePools();\\n        }\\n        uint256 prevAllocPoint = poolInfo[_pid].allocPoint;\\n        poolInfo[_pid].allocPoint = _allocPoint;\\n        poolInfo[_pid].depositFeePercent = _depositFeePercent;\\n        poolInfo[_pid].incentivesController = _incentivesController;\\n        if (prevAllocPoint != _allocPoint) {\\n            totalAllocPoint = totalAllocPoint.sub(prevAllocPoint).add(_allocPoint);\\n        }\\n        emit Set(_pid, _allocPoint, _incentivesController);\\n    }\\n\\n    // Return reward multiplier over the given _from to _to second.\\n    function getMultiplier(uint256 _from, uint256 _to) public view returns (uint256) {\\n        return _to.sub(_from).mul(BONUS_MULTIPLIER);\\n    }\\n\\n    function pendingTokens(uint256 _pid, address _user) external view returns (address[] memory tokens, uint[] memory amounts) {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_user];\\n\\n        uint incentives = 0;\\n        address _incentivesControllerAddr = address(pool.incentivesController);\\n        while (_incentivesControllerAddr != address(0)) {\\n            incentives++;\\n            _incentivesControllerAddr = IOnwardIncentivesController(_incentivesControllerAddr).getNextIncentivesController();\\n        }\\n\\n        tokens = new address[](incentives + 1);\\n        amounts = new uint[](incentives + 1);\\n\\n        uint256 accEmoPerShare = pool.accEmoPerShare;\\n        uint256 lpSupply = pool.workingSupply;\\n        if (block.timestamp > pool.lastRewardTime && lpSupply != 0) {\\n            uint256 multiplier = getMultiplier(pool.lastRewardTime, block.timestamp);\\n            uint256 emoReward = multiplier.mul(emoPerSecond).mul(pool.allocPoint).div(totalAllocPoint).mul(stakingPercent).div(percentDec);\\n            accEmoPerShare = accEmoPerShare.add(emoReward.mul(1e12).div(lpSupply));\\n        }\\n        tokens[0] = address(emo);\\n        amounts[0] = user.workingAmount.mul(accEmoPerShare).div(1e12).sub(user.rewardDebt);\\n\\n        // bonus\\n        uint i = 1;\\n        IOnwardIncentivesController _incentivesController = pool.incentivesController;\\n        while (address(_incentivesController) != address(0)) {\\n            tokens[i] = address(_incentivesController.rewardToken());\\n            amounts[i] = _incentivesController.pendingTokens(_user);\\n            _incentivesController = IOnwardIncentivesController(_incentivesController.getNextIncentivesController());\\n            i++;\\n        }\\n    }\\n\\n    // Update reward variables for all pools. Be careful of gas spending!\\n    function massUpdatePools() public {\\n        uint256 length = poolInfo.length;\\n        for (uint256 pid = 0; pid < length; ++pid) {\\n            updatePool(pid);\\n        }\\n    }\\n\\n    // Update reward variables of the given pool to be up-to-date.\\n    function updatePool(uint256 _pid) public {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        if (block.timestamp <= pool.lastRewardTime) {\\n            return;\\n        }\\n        uint256 lpSupply = pool.workingSupply;\\n        if (lpSupply == 0) {\\n            pool.lastRewardTime = block.timestamp;\\n            return;\\n        }\\n        uint256 multiplier = getMultiplier(pool.lastRewardTime, block.timestamp);\\n        uint256 emoReward = multiplier.mul(emoPerSecond).mul(pool.allocPoint).div(totalAllocPoint).mul(stakingPercent).div(percentDec);\\n        pool.accEmoPerShare = pool.accEmoPerShare.add(emoReward.mul(1e12).div(lpSupply));\\n        pool.lastRewardTime = block.timestamp;\\n    }\\n\\n    // Deposit LP tokens to MasterChef for EMO allocation for _user\\n    function depositFor(address _user, uint256 _pid, uint256 _amount) public nonReentrant {\\n        require(!whitelistable || !_isContract(_user) || whitelist[_user], \\\"Contract is not in the whitelist\\\");\\n        require(_pid != 0, 'deposit EMO by staking');\\n\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_user];\\n        updatePool(_pid);\\n        if (user.workingAmount > 0) {\\n            uint256 pending = user.workingAmount.mul(pool.accEmoPerShare).div(1e12).sub(user.rewardDebt);\\n            if (pending > 0) {\\n                rewardMinter.mint(_user, pending, true);\\n            }\\n        }\\n        if (_amount > 0) {\\n            uint256 balanceBefore = pool.lpToken.balanceOf(address(this));\\n            pool.lpToken.safeTransferFrom(address(msg.sender), address(this), _amount);\\n            _amount = pool.lpToken.balanceOf(address(this)).sub(balanceBefore);\\n            if (pool.depositFeePercent > 0) {\\n                uint256 depositFee = _amount.mul(pool.depositFeePercent).div(percentDec);\\n                pool.lpToken.safeTransfer(feeAddr, depositFee);\\n                _amount = _amount.sub(depositFee);\\n            }\\n            user.amount = user.amount.add(_amount);\\n        }\\n\\n        if (pool.boost) {\\n            uint256 votingBalance = IERC20(votingEscrow).balanceOf(_user);\\n            uint256 votingTotal = IERC20(votingEscrow).totalSupply();\\n            uint256 lim = user.amount * TOKENLESS_PRODUCTION / 100;\\n            if (votingTotal > 0) {\\n                lim += pool.lpToken.balanceOf(address(this)) * votingBalance / votingTotal * (100 - TOKENLESS_PRODUCTION) / 100;\\n            }\\n            lim = user.amount < lim ? user.amount : lim;\\n            pool.workingSupply = pool.workingSupply + lim - user.workingAmount;\\n            user.workingAmount = lim;\\n        } else {\\n            pool.workingSupply = pool.workingSupply + user.amount - user.workingAmount;\\n            user.workingAmount = user.amount;\\n        }\\n\\n        user.rewardDebt = user.workingAmount.mul(pool.accEmoPerShare).div(1e12);\\n\\n        // Interactions\\n        IOnwardIncentivesController _incentivesController = pool.incentivesController;\\n        if (address(_incentivesController) != address(0)) {\\n            _incentivesController.onReward(_user, user.amount);\\n        }\\n\\n        emit Deposit(msg.sender, _user, _pid, _amount);\\n    }\\n\\n    // Deposit LP tokens to MasterChef for EMO allocation.\\n    function deposit(uint256 _pid, uint256 _amount) public {\\n        depositFor(msg.sender, _pid, _amount);\\n    }\\n\\n    function harvestAllRewards(address _user) public {\\n        uint256 length = poolInfo.length;\\n        for (uint256 pid = 0; pid < length; ++pid) {\\n            if (userInfo[pid][_user].amount > 0) {\\n                _withdraw(pid, _user, 0);\\n            }\\n        }\\n    }\\n\\n    // Withdraw LP tokens from MasterChef.\\n    function withdraw(uint256 _pid, uint256 _amount) public {\\n        _withdraw(_pid, msg.sender, _amount);\\n    }\\n\\n    // Withdraw LP tokens from MasterChef.\\n    function _withdraw(uint256 _pid, address _user, uint256 _amount) internal nonReentrant {\\n        require(_pid != 0, 'withdraw EMO by unstaking');\\n\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_user];\\n        require(user.amount >= _amount, \\\"withdraw: not good\\\");\\n\\n        updatePool(_pid);\\n        if (user.workingAmount > 0) {\\n            uint256 pending = user.workingAmount.mul(pool.accEmoPerShare).div(1e12).sub(user.rewardDebt);\\n            if (pending > 0) {\\n                rewardMinter.mint(_user, pending, true);\\n            }\\n        }\\n        if (_amount > 0) {\\n            user.amount = user.amount.sub(_amount);\\n            pool.lpToken.safeTransfer(address(_user), _amount);\\n        }\\n\\n        if (pool.boost) {\\n            uint256 votingBalance = IERC20(votingEscrow).balanceOf(_user);\\n            uint256 votingTotal = IERC20(votingEscrow).totalSupply();\\n            uint256 lim = user.amount * TOKENLESS_PRODUCTION / 100;\\n            if (votingTotal > 0) {\\n                lim += pool.lpToken.balanceOf(address(this)) * votingBalance / votingTotal * (100 - TOKENLESS_PRODUCTION) / 100;\\n            }\\n            lim = user.amount < lim ? user.amount : lim;\\n            pool.workingSupply = pool.workingSupply + lim - user.workingAmount;\\n            user.workingAmount = lim;\\n        } else {\\n            pool.workingSupply = pool.workingSupply + user.amount - user.workingAmount;\\n            user.workingAmount = user.amount;\\n        }\\n\\n        user.rewardDebt = user.workingAmount.mul(pool.accEmoPerShare).div(1e12);\\n\\n        // Interactions\\n        IOnwardIncentivesController _incentivesController = pool.incentivesController;\\n        if (address(_incentivesController) != address(0)) {\\n            _incentivesController.onReward(_user, user.amount);\\n        }\\n\\n        emit Withdraw(_user, _pid, _amount);\\n    }\\n\\n    // Stake EMO tokens to MasterChef\\n    function enterStaking(uint256 _amount) public nonReentrant {\\n        require(pool0Staker[msg.sender], \\\"Not allow to enterStaking\\\");\\n\\n        PoolInfo storage pool = poolInfo[0];\\n        UserInfo storage user = userInfo[0][msg.sender];\\n        updatePool(0);\\n        if (user.workingAmount > 0) {\\n            uint256 pending = user.workingAmount.mul(pool.accEmoPerShare).div(1e12).sub(user.rewardDebt);\\n            if (pending > 0) {\\n                emo.mint(msg.sender, pending);\\n            }\\n        }\\n        if (_amount > 0) {\\n            pool.lpToken.safeTransferFrom(address(msg.sender), address(this), _amount);\\n            user.amount = user.amount.add(_amount);\\n        }\\n        pool.workingSupply = pool.workingSupply + user.amount - user.workingAmount;\\n        user.workingAmount = user.amount;\\n        user.rewardDebt = user.workingAmount.mul(pool.accEmoPerShare).div(1e12);\\n\\n        emit Deposit(msg.sender, msg.sender, 0, _amount);\\n    }\\n\\n    // Withdraw EMO tokens from STAKING.\\n    function leaveStaking(uint256 _amount) public nonReentrant {\\n        PoolInfo storage pool = poolInfo[0];\\n        UserInfo storage user = userInfo[0][msg.sender];\\n        require(user.amount >= _amount, \\\"withdraw: not good\\\");\\n        updatePool(0);\\n        if (user.workingAmount > 0) {\\n            uint256 pending = user.workingAmount.mul(pool.accEmoPerShare).div(1e12).sub(user.rewardDebt);\\n            if (pending > 0) {\\n                emo.mint(msg.sender, pending);\\n            }\\n        }\\n        if (_amount > 0) {\\n            user.amount = user.amount.sub(_amount);\\n            pool.lpToken.safeTransfer(address(msg.sender), _amount);\\n        }\\n        pool.workingSupply = pool.workingSupply + user.amount - user.workingAmount;\\n        user.workingAmount = user.amount;\\n        user.rewardDebt = user.workingAmount.mul(pool.accEmoPerShare).div(1e12);\\n\\n        emit Withdraw(msg.sender, 0, _amount);\\n    }\\n\\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\\n    function emergencyWithdraw(uint256 _pid) public nonReentrant {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n        pool.lpToken.safeTransfer(address(msg.sender), user.amount);\\n        emit EmergencyWithdraw(msg.sender, _pid, user.amount);\\n        user.amount = 0;\\n        user.rewardDebt = 0;\\n\\n        // working amount\\n        if (pool.workingSupply >= user.workingAmount) {\\n            pool.workingSupply = pool.workingSupply - user.workingAmount;\\n        } else {\\n            pool.workingSupply = 0;\\n        }\\n        user.workingAmount = 0;\\n\\n        // Interactions\\n        IOnwardIncentivesController _incentivesController = pool.incentivesController;\\n        if (address(_incentivesController) != address(0)) {\\n            _incentivesController.onReward(msg.sender, 0);\\n        }\\n    }\\n\\n    function setEmoPerSecond(uint256 _emoPerSecond) public onlyOwner {\\n        require(_emoPerSecond <= 12 * 1e18, \\\"Max per second 12 EMO\\\");\\n        massUpdatePools();\\n        emoPerSecond = _emoPerSecond;\\n    }\\n\\n    function setDaoAddress(address _daoAddr) public onlyOwner {\\n        daoAddr = _daoAddr;\\n    }\\n\\n    function setRefAddress(address _refAddr) public onlyOwner {\\n        refAddr = _refAddr;\\n    }\\n\\n    function setSafuAddress(address _safuAddr) public onlyOwner {\\n        safuAddr = _safuAddr;\\n    }\\n\\n    function setFeeAddress(address _feeAddr) public onlyOwner {\\n        require(_feeAddr != address(0), \\\"setFeeAddress: ZERO\\\");\\n        feeAddr = _feeAddr;\\n    }\\n\\n    function _isContract(address addr) internal view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(addr)\\n        }\\n        return size > 0;\\n    }\\n}\",\"keccak256\":\"0x525e192fd605c92fba0b888cc63aa778ca7b0eadb6742aba50f020582a01aee4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052620f4240600355600160105560006014553480156200002257600080fd5b5060405162003c3e38038062003c3e83398181016040526101808110156200004957600080fd5b508051602082015160408301516060840151608085015160a086015160c087015160e08801516101008901516101208a01516101408b0151610160909b0151999a9899979896979596949593949293919290916000620000a8620001a7565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3506001808055600280546001600160a01b039e8f166001600160a01b03199182161790915560049c909c5560059a909a5560069890985560079690965560088054958b16958a169590951790945560098054938a1693891693909317909255600a8054918916918816919091179055600b8054918816918716919091179055600d8054918716918616919091179055600f55600e8054919094169216919091179091556016805460ff19169091179055620001ab565b3390565b613a8380620001bb6000396000f3fe608060405234801561001057600080fd5b50600436106102f05760003560e01c806369d0c5b81161019d5780639a3cac6a116100e9578063be1193ea116100a2578063e2bbb1581161007c578063e2bbb158146108b4578063f2fde38b146108d7578063fbe6cf6a146108fd578063ffcd426314610923576102f0565b8063be1193ea1461087e578063cbd258b514610886578063ddc6b812146108ac576102f0565b80639a3cac6a146107fd5780639b19251a146108235780639b8e556314610849578063a8d2e46a14610851578063aef89ed414610859578063bd4aa74714610876576102f0565b80637f43d74f116101565780638da5cb5b116101305780638da5cb5b1461076c5780638dbb1e3a1461077457806391dc03821461079757806393f1a40b146107b3576102f0565b80637f43d74f146106fe5780638705fcd41461073e5780638aa2855014610764576102f0565b806369d0c5b8146106b05780636d34abbc146106b85780636f1f0803146106c0578063715018a6146106c857806378e97925146106d05780637c7be2fa146106d8576102f0565b80633c271a051161025c5780634df7972b116102155780635312ea8e116101ef5780635312ea8e1461066657806359d5335b146106835780635ffe61461461068b578063630b5ba1146106a8576102f0565b80634df7972b146106395780634f2bfe5b1461064157806351eb05a614610649576102f0565b80633c271a05146104fd5780633e0a322d146105a257806341441d3b146105bf578063441a3e70146105dc5780634cf5fbf5146105ff5780634de5ad7a14610631576102f0565b80631526fe27116102ae5780631526fe271461040957806315a514991461047557806317caf6f11461049957806321b1aecb146104a157806338133c02146104a957806339e7fddc146104f5576102f0565b8062a2e3be146102f5578063061e26af1461030f578063081e3eda146103375780630f5bb81f1461033f5780631058d281146103e457806312270c4014610401575b600080fd5b6102fd6109e8565b60408051918252519081900360200190f35b6103356004803603602081101561032557600080fd5b50356001600160a01b03166109ee565b005b6102fd610a72565b6103356004803603604081101561035557600080fd5b81019060208101813564010000000081111561037057600080fd5b82018360208201111561038257600080fd5b803590602001918460208302840111640100000000831117156103a457600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295505050503515159050610a78565b610335600480360360208110156103fa57600080fd5b5035610b36565b610335610d88565b6104266004803603602081101561041f57600080fd5b5035610fb5565b604080516001600160a01b03998a1681526020810198909852951515878701526060870194909452608086019290925260a085015260c084015290921660e08201529051908190036101000190f35b61047d611019565b604080516001600160a01b039092168252519081900360200190f35b6102fd611028565b6102fd61102e565b610335600480360360c08110156104bf57600080fd5b508035906020810135906001600160a01b036040820135811691606081013590911690608081013515159060a001351515611034565b61047d61139b565b6103356004803603604081101561051357600080fd5b81019060208101813564010000000081111561052e57600080fd5b82018360208201111561054057600080fd5b8035906020019184602083028401116401000000008311171561056257600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092955050505035151590506113aa565b610335600480360360208110156105b857600080fd5b5035611463565b610335600480360360208110156105d557600080fd5b50356116bc565b610335600480360360408110156105f257600080fd5b508035906020013561191a565b6103356004803603606081101561061557600080fd5b506001600160a01b038135169060208101359060400135611929565b610335611fbb565b6102fd612031565b61047d612037565b6103356004803603602081101561065f57600080fd5b5035612046565b6103356004803603602081101561067c57600080fd5b503561210f565b6102fd6122ac565b610335600480360360208110156106a157600080fd5b50356122b2565b610335612319565b61047d612338565b61047d612347565b6102fd612356565b61033561235c565b6102fd612408565b610335600480360360208110156106ee57600080fd5b50356001600160a01b031661240e565b610335600480360360a081101561071457600080fd5b508035906020810135906040810135906001600160a01b0360608201351690608001351515612492565b6103356004803603602081101561075457600080fd5b50356001600160a01b03166126f5565b6102fd6127ca565b61047d6127d0565b6102fd6004803603604081101561078a57600080fd5b50803590602001356127df565b61079f6127fc565b604080519115158252519081900360200190f35b6107df600480360360408110156107c957600080fd5b50803590602001356001600160a01b0316612805565b60408051938452602084019290925282820152519081900360600190f35b6103356004803603602081101561081357600080fd5b50356001600160a01b0316612831565b61079f6004803603602081101561083957600080fd5b50356001600160a01b03166128b5565b61047d6128ca565b61047d6128d9565b6103356004803603602081101561086f57600080fd5b50356128e8565b6102fd6129ac565b6102fd6129b1565b61079f6004803603602081101561089c57600080fd5b50356001600160a01b03166129b7565b6102fd6129cc565b610335600480360360408110156108ca57600080fd5b50803590602001356129d2565b610335600480360360208110156108ed57600080fd5b50356001600160a01b03166129dd565b6103356004803603602081101561091357600080fd5b50356001600160a01b0316612adf565b61094f6004803603604081101561093957600080fd5b50803590602001356001600160a01b0316612b29565b604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b8381101561099357818101518382015260200161097b565b50505050905001838103825284818151815260200191508051906020019060200280838360005b838110156109d25781810151838201526020016109ba565b5050505090500194505050505060405180910390f35b60065481565b6109f6612f56565b6001600160a01b0316610a076127d0565b6001600160a01b031614610a50576040805162461bcd60e51b81526020600482018190526024820152600080516020613a04833981519152604482015290519081900360640190fd5b600a80546001600160a01b0319166001600160a01b0392909216919091179055565b60115490565b610a80612f56565b6001600160a01b0316610a916127d0565b6001600160a01b031614610ada576040805162461bcd60e51b81526020600482018190526024820152600080516020613a04833981519152604482015290519081900360640190fd5b60005b8251811015610b31578160186000858481518110610af757fe5b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff1916911515919091179055600101610add565b505050565b60026001541415610b7c576040805162461bcd60e51b815260206004820152601f6024820152600080516020613952833981519152604482015290519081900360640190fd5b600260018190555060006011600081548110610b9457fe5b600091825260208083203384527f7e7fa33969761a458e04f477e039a608702b4f924981d6653935a8319a08ad7b9091526040909220805460089092029092019250831115610c1f576040805162461bcd60e51b81526020600482015260126024820152711dda5d1a191c985dce881b9bdd0819dbdbd960721b604482015290519081900360640190fd5b610c296000612046565b600181015415610ce3576000610c6d8260020154610c6764e8d4a51000610c6187600501548760010154612f5a90919063ffffffff16565b90612fb3565b9061301a565b90508015610ce157600254604080516340c10f1960e01b81523360048201526024810184905290516001600160a01b03909216916340c10f199160448082019260009290919082900301818387803b158015610cc857600080fd5b505af1158015610cdc573d6000803e3d6000fd5b505050505b505b8215610d0d578054610cf5908461301a565b81558154610d0d906001600160a01b03163385613077565b6001808201805483549285018054909301039091558154908190556005830154610d429164e8d4a5100091610c619190612f5a565b600282015560408051848152905160009133917ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b5689181900360200190a350506001805550565b42600c5410610dd3576040805162461bcd60e51b81526020600482015260126024820152717761697420666f72206e657720626c6f636b60701b604482015290519081900360640190fd5b6000610de1600c54426127df565b90506000610dfa600f5483612f5a90919063ffffffff16565b6002546008546003546005549394506001600160a01b03928316936340c10f199390921691610e2f9190610c61908790612f5a565b6040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050600060405180830381600087803b158015610e7557600080fd5b505af1158015610e89573d6000803e3d6000fd5b50506002546009546003546006546001600160a01b0393841695506340c10f1994509190921691610ebf91610c61908790612f5a565b6040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050600060405180830381600087803b158015610f0557600080fd5b505af1158015610f19573d6000803e3d6000fd5b5050600254600a546003546007546001600160a01b0393841695506340c10f1994509190921691610f4f91610c61908790612f5a565b6040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050600060405180830381600087803b158015610f9557600080fd5b505af1158015610fa9573d6000803e3d6000fd5b505042600c5550505050565b60118181548110610fc257fe5b6000918252602090912060089091020180546001820154600283015460038401546004850154600586015460068701546007909701546001600160a01b039687169850949660ff9094169592949193909290911688565b6009546001600160a01b031681565b60145481565b60035481565b61103c612f56565b6001600160a01b031661104d6127d0565b6001600160a01b031614611096576040805162461bcd60e51b81526020600482018190526024820152600080516020613a04833981519152604482015290519081900360640190fd5b6001600160a01b038416600090815260136020526040902054849060ff1615611106576040805162461bcd60e51b815260206004820152601960248201527f6e6f6e4475706c6963617465643a206475706c69636174656400000000000000604482015290519081900360640190fd5b6003548611156111475760405162461bcd60e51b81526004018080602001828103825260258152602001806139df6025913960400191505060405180910390fd5b601554611188576040805162461bcd60e51b815260206004820152600a60248201526921737461727454696d6560b01b604482015290519081900360640190fd5b811561119657611196612319565b600060155442116111a9576015546111ab565b425b6014549091506111bb90896130c9565b601481905550600160136000886001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff0219169083151502179055506011604051806101000160405280886001600160a01b031681526020016000815260200186151581526020018a815260200183815260200160008152602001898152602001876001600160a01b0316815250908060018154018082558091505060019003906000526020600020906008020160009091909190915060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506020820151816001015560408201518160020160006101000a81548160ff021916908315150217905550606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e08201518160070160006101000a8154816001600160a01b0302191690836001600160a01b031602179055505050846001600160a01b0316866001600160a01b0316611355600160118054905061301a90919063ffffffff16565b604080518c8152881515602082015281517fd2cd8625787004ecb44d1f97c0cb1eea31af120c1f74b3c214353efebab6cdb7929181900390910190a45050505050505050565b600b546001600160a01b031681565b6113b2612f56565b6001600160a01b03166113c36127d0565b6001600160a01b03161461140c576040805162461bcd60e51b81526020600482018190526024820152600080516020613a04833981519152604482015290519081900360640190fd5b60005b8251811015610b3157816017600085848151811061142957fe5b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff191691151591909117905560010161140f565b61146b612f56565b6001600160a01b031661147c6127d0565b6001600160a01b0316146114c5576040805162461bcd60e51b81526020600482018190526024820152600080516020613a04833981519152604482015290519081900360640190fd5b60155415611513576040805162461bcd60e51b81526020600482015260166024820152751cdd185c9d151a5b59481a185cc81899595b881cd95d60521b604482015290519081900360640190fd5b806015819055506011604051806101000160405280600260009054906101000a90046001600160a01b03166001600160a01b0316815260200160008152602001600015158152602001606481526020016015548152602001600081526020016000815260200160006001600160a01b0316815250908060018154018082558091505060019003906000526020600020906008020160009091909190915060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506020820151816001015560408201518160020160006101000a81548160ff021916908315150217905550606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e08201518160070160006101000a8154816001600160a01b0302191690836001600160a01b031602179055505050600160136000600260009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff021916908315150217905550606460148190555050565b60026001541415611702576040805162461bcd60e51b815260206004820152601f6024820152600080516020613952833981519152604482015290519081900360640190fd5b60026001553360009081526018602052604090205460ff1661176b576040805162461bcd60e51b815260206004820152601960248201527f4e6f7420616c6c6f7720746f20656e7465725374616b696e6700000000000000604482015290519081900360640190fd5b6000601160008154811061177b57fe5b600091825260208083203384527f7e7fa33969761a458e04f477e039a608702b4f924981d6653935a8319a08ad7b909152604083206008909202019250906117c290612046565b6001810154156118705760006117fa8260020154610c6764e8d4a51000610c6187600501548760010154612f5a90919063ffffffff16565b9050801561186e57600254604080516340c10f1960e01b81523360048201526024810184905290516001600160a01b03909216916340c10f199160448082019260009290919082900301818387803b15801561185557600080fd5b505af1158015611869573d6000803e3d6000fd5b505050505b505b821561189c57815461188d906001600160a01b0316333086613123565b805461189990846130c9565b81555b60018082018054835492850180549093010390915581549081905560058301546118d19164e8d4a5100091610c619190612f5a565b6002820155604080518481529051600091339182917fdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d7919081900360200190a450506001805550565b611925823383613183565b5050565b6002600154141561196f576040805162461bcd60e51b815260206004820152601f6024820152600080516020613952833981519152604482015290519081900360640190fd5b600260015560165460ff16158061198c575061198a83613681565b155b806119af57506001600160a01b03831660009081526017602052604090205460ff165b611a00576040805162461bcd60e51b815260206004820181905260248201527f436f6e7472616374206973206e6f7420696e207468652077686974656c697374604482015290519081900360640190fd5b81611a4b576040805162461bcd60e51b81526020600482015260166024820152756465706f73697420454d4f206279207374616b696e6760501b604482015290519081900360640190fd5b600060118381548110611a5a57fe5b600091825260208083208684526012825260408085206001600160a01b038a168652909252922060089091029091019150611a9484612046565b600181015415611b4b576000611acc8260020154610c6764e8d4a51000610c6187600501548760010154612f5a90919063ffffffff16565b90508015611b4957600d54604080516334686fad60e21b81526001600160a01b03898116600483015260248201859052600160448301529151919092169163d1a1beb491606480830192600092919082900301818387803b158015611b3057600080fd5b505af1158015611b44573d6000803e3d6000fd5b505050505b505b8215611ccc578154604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b158015611b9b57600080fd5b505afa158015611baf573d6000803e3d6000fd5b505050506040513d6020811015611bc557600080fd5b50518354909150611be1906001600160a01b0316333087613123565b8254604080516370a0823160e01b81523060048201529051611c639284926001600160a01b03909116916370a0823191602480820192602092909190829003018186803b158015611c3157600080fd5b505afa158015611c45573d6000803e3d6000fd5b505050506040513d6020811015611c5b57600080fd5b50519061301a565b600684015490945015611cbc576000611c8f600354610c61866006015488612f5a90919063ffffffff16565b600b548554919250611cae916001600160a01b03908116911683613077565b611cb8858261301a565b9450505b8154611cc890856130c9565b8255505b600282015460ff1615611ea157600e54604080516370a0823160e01b81526001600160a01b038881166004830152915160009392909216916370a0823191602480820192602092909190829003018186803b158015611d2a57600080fd5b505afa158015611d3e573d6000803e3d6000fd5b505050506040513d6020811015611d5457600080fd5b5051600e54604080516318160ddd60e01b815290519293506000926001600160a01b03909216916318160ddd91600480820192602092909190829003018186803b158015611da157600080fd5b505afa158015611db5573d6000803e3d6000fd5b505050506040513d6020811015611dcb57600080fd5b5051835490915060646028909102048115611e71578454604080516370a0823160e01b81523060048201529051606492603c92869288926001600160a01b0316916370a08231916024808301926020929190829003018186803b158015611e3157600080fd5b505afa158015611e45573d6000803e3d6000fd5b505050506040513d6020811015611e5b57600080fd5b50510281611e6557fe5b040281611e6e57fe5b04015b83548111611e7f5780611e82565b83545b6001808601805491880180548401929092039091555550611ebb915050565b600180820180548354928501805490930103909155815490555b611edf64e8d4a51000610c6184600501548460010154612f5a90919063ffffffff16565b600282015560078201546001600160a01b03168015611f6c57806001600160a01b031663c37232888784600001546040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050600060405180830381600087803b158015611f5357600080fd5b505af1158015611f67573d6000803e3d6000fd5b505050505b60408051858152905186916001600160a01b0389169133917fdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d7919081900360200190a450506001805550505050565b611fc3612f56565b6001600160a01b0316611fd46127d0565b6001600160a01b03161461201d576040805162461bcd60e51b81526020600482018190526024820152600080516020613a04833981519152604482015290519081900360640190fd5b6016805460ff19811660ff90911615179055565b600c5481565b600e546001600160a01b031681565b60006011828154811061205557fe5b9060005260206000209060080201905080600401544211612076575061210c565b60018101548061208d57504260049091015561210c565b600061209d8360040154426127df565b905060006120d6600354610c616004546120d0601454610c618a600301546120d0600f548b612f5a90919063ffffffff16565b90612f5a565b90506120f96120ee84610c618464e8d4a51000612f5a565b6005860154906130c9565b6005850155505042600490920191909155505b50565b60026001541415612155576040805162461bcd60e51b815260206004820152601f6024820152600080516020613952833981519152604482015290519081900360640190fd5b600260018190555060006011828154811061216c57fe5b600091825260208083208584526012825260408085203380875293529093208054600890930290930180549094506121b1926001600160a01b03919091169190613077565b80546040805191825251849133917fbb757047c2b5f3974fe26b7c10f732e7bce710b0952a71082702781e62ae05959181900360200190a360008082556002820155600180820154908301541061221a5780600101548260010154038260010181905550612222565b600060018301555b6000600182015560078201546001600160a01b031680156122a2576040805163186e465160e31b815233600482015260006024820181905291516001600160a01b0384169263c3723288926044808201939182900301818387803b15801561228957600080fd5b505af115801561229d573d6000803e3d6000fd5b505050505b5050600180555050565b60075481565b6122ba612f56565b6001600160a01b03166122cb6127d0565b6001600160a01b031614612314576040805162461bcd60e51b81526020600482018190526024820152600080516020613a04833981519152604482015290519081900360640190fd5b601055565b60115460005b818110156119255761233081612046565b60010161231f565b600a546001600160a01b031681565b6002546001600160a01b031681565b60055481565b612364612f56565b6001600160a01b03166123756127d0565b6001600160a01b0316146123be576040805162461bcd60e51b81526020600482018190526024820152600080516020613a04833981519152604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b60155481565b612416612f56565b6001600160a01b03166124276127d0565b6001600160a01b031614612470576040805162461bcd60e51b81526020600482018190526024820152600080516020613a04833981519152604482015290519081900360640190fd5b600980546001600160a01b0319166001600160a01b0392909216919091179055565b61249a612f56565b6001600160a01b03166124ab6127d0565b6001600160a01b0316146124f4576040805162461bcd60e51b81526020600482018190526024820152600080516020613a04833981519152604482015290519081900360640190fd5b6003548311156125355760405162461bcd60e51b81526004018080602001828103825260258152602001806139df6025913960400191505060405180910390fd5b601554612576576040805162461bcd60e51b815260206004820152600a60248201526921737461727454696d6560b01b604482015290519081900360640190fd5b8415158061258b57506001600160a01b038216155b6125c9576040805162461bcd60e51b815260206004820152600a60248201526921696e63656e7469766560b01b604482015290519081900360640190fd5b80156125d7576125d7612319565b6000601186815481106125e657fe5b9060005260206000209060080201600301549050846011878154811061260857fe5b906000526020600020906008020160030181905550836011878154811061262b57fe5b906000526020600020906008020160060181905550826011878154811061264e57fe5b906000526020600020906008020160070160006101000a8154816001600160a01b0302191690836001600160a01b031602179055508481146126ad576126a9856126a38360145461301a90919063ffffffff16565b906130c9565b6014555b6040805186815290516001600160a01b0385169188917fa0eb810e1b5700505d2ce572a45927b0af4c7ee31768b475069875ce64fb58419181900360200190a3505050505050565b6126fd612f56565b6001600160a01b031661270e6127d0565b6001600160a01b031614612757576040805162461bcd60e51b81526020600482018190526024820152600080516020613a04833981519152604482015290519081900360640190fd5b6001600160a01b0381166127a8576040805162461bcd60e51b8152602060048201526013602482015272736574466565416464726573733a205a45524f60681b604482015290519081900360640190fd5b600b80546001600160a01b0319166001600160a01b0392909216919091179055565b60105481565b6000546001600160a01b031690565b6010546000906127f3906120d0848661301a565b90505b92915050565b60165460ff1681565b601260209081526000928352604080842090915290825290208054600182015460029092015490919083565b612839612f56565b6001600160a01b031661284a6127d0565b6001600160a01b031614612893576040805162461bcd60e51b81526020600482018190526024820152600080516020613a04833981519152604482015290519081900360640190fd5b600880546001600160a01b0319166001600160a01b0392909216919091179055565b60176020526000908152604090205460ff1681565b600d546001600160a01b031681565b6008546001600160a01b031681565b6128f0612f56565b6001600160a01b03166129016127d0565b6001600160a01b03161461294a576040805162461bcd60e51b81526020600482018190526024820152600080516020613a04833981519152604482015290519081900360640190fd5b67a688906bd8b0000081111561299f576040805162461bcd60e51b81526020600482015260156024820152744d617820706572207365636f6e6420313220454d4f60581b604482015290519081900360640190fd5b6129a7612319565b600f55565b602881565b60045481565b60136020526000908152604090205460ff1681565b600f5481565b611925338383611929565b6129e5612f56565b6001600160a01b03166129f66127d0565b6001600160a01b031614612a3f576040805162461bcd60e51b81526020600482018190526024820152600080516020613a04833981519152604482015290519081900360640190fd5b6001600160a01b038116612a845760405162461bcd60e51b81526004018080602001828103825260268152602001806139726026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b60115460005b81811015610b315760008181526012602090815260408083206001600160a01b038716845290915290205415612b2157612b2181846000613183565b600101612ae5565b606080600060118581548110612b3b57fe5b600091825260208083208884526012825260408085206001600160a01b038a8116875293528420600893909302016007810154909450919291165b6001600160a01b03811615612bf9578180600101925050806001600160a01b0316633fdb343e6040518163ffffffff1660e01b815260040160206040518083038186803b158015612bc657600080fd5b505afa158015612bda573d6000803e3d6000fd5b505050506040513d6020811015612bf057600080fd5b50519050612b76565b8160010167ffffffffffffffff81118015612c1357600080fd5b50604051908082528060200260200182016040528015612c3d578160200160208202803683370190505b5095508160010167ffffffffffffffff81118015612c5a57600080fd5b50604051908082528060200260200182016040528015612c84578160200160208202803683370190505b50600585015460018601546004870154929750909142118015612ca657508015155b15612d12576000612cbb8760040154426127df565b90506000612cee600354610c616004546120d0601454610c618e600301546120d0600f548b612f5a90919063ffffffff16565b9050612d0d612d0684610c618464e8d4a51000612f5a565b85906130c9565b935050505b60025488516001600160a01b03909116908990600090612d2e57fe5b60200260200101906001600160a01b031690816001600160a01b031681525050612d768560020154610c6764e8d4a51000610c61868a60010154612f5a90919063ffffffff16565b87600081518110612d8357fe5b602090810291909101015260078601546001906001600160a01b03165b6001600160a01b03811615612f4757806001600160a01b031663f7c618c16040518163ffffffff1660e01b815260040160206040518083038186803b158015612de857600080fd5b505afa158015612dfc573d6000803e3d6000fd5b505050506040513d6020811015612e1257600080fd5b50518a518b9084908110612e2257fe5b60200260200101906001600160a01b031690816001600160a01b031681525050806001600160a01b031663c031a66f8c6040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015612e8f57600080fd5b505afa158015612ea3573d6000803e3d6000fd5b505050506040513d6020811015612eb957600080fd5b505189518a9084908110612ec957fe5b602002602001018181525050806001600160a01b0316633fdb343e6040518163ffffffff1660e01b815260040160206040518083038186803b158015612f0e57600080fd5b505afa158015612f22573d6000803e3d6000fd5b505050506040513d6020811015612f3857600080fd5b50516001909201919050612da0565b50505050505050509250929050565b3390565b600082612f69575060006127f6565b82820282848281612f7657fe5b04146127f35760405162461bcd60e51b81526004018080602001828103825260218152602001806139be6021913960400191505060405180910390fd5b6000808211613009576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b81838161301257fe5b049392505050565b600082821115613071576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610b31908490613687565b6000828201838110156127f3576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b17905261317d908590613687565b50505050565b600260015414156131c9576040805162461bcd60e51b815260206004820152601f6024820152600080516020613952833981519152604482015290519081900360640190fd5b600260015582613220576040805162461bcd60e51b815260206004820152601960248201527f776974686472617720454d4f20627920756e7374616b696e6700000000000000604482015290519081900360640190fd5b60006011848154811061322f57fe5b600091825260208083208784526012825260408085206001600160a01b038916865290925292208054600890920290920192508311156132ab576040805162461bcd60e51b81526020600482015260126024820152711dda5d1a191c985dce881b9bdd0819dbdbd960721b604482015290519081900360640190fd5b6132b485612046565b60018101541561336b5760006132ec8260020154610c6764e8d4a51000610c6187600501548760010154612f5a90919063ffffffff16565b9050801561336957600d54604080516334686fad60e21b81526001600160a01b03888116600483015260248201859052600160448301529151919092169163d1a1beb491606480830192600092919082900301818387803b15801561335057600080fd5b505af1158015613364573d6000803e3d6000fd5b505050505b505b821561339557805461337d908461301a565b81558154613395906001600160a01b03168585613077565b600282015460ff161561356a57600e54604080516370a0823160e01b81526001600160a01b038781166004830152915160009392909216916370a0823191602480820192602092909190829003018186803b1580156133f357600080fd5b505afa158015613407573d6000803e3d6000fd5b505050506040513d602081101561341d57600080fd5b5051600e54604080516318160ddd60e01b815290519293506000926001600160a01b03909216916318160ddd91600480820192602092909190829003018186803b15801561346a57600080fd5b505afa15801561347e573d6000803e3d6000fd5b505050506040513d602081101561349457600080fd5b505183549091506064602890910204811561353a578454604080516370a0823160e01b81523060048201529051606492603c92869288926001600160a01b0316916370a08231916024808301926020929190829003018186803b1580156134fa57600080fd5b505afa15801561350e573d6000803e3d6000fd5b505050506040513d602081101561352457600080fd5b5051028161352e57fe5b04028161353757fe5b04015b83548111613548578061354b565b83545b6001808601805491880180548401929092039091555550613584915050565b600180820180548354928501805490930103909155815490555b6135a864e8d4a51000610c6184600501548460010154612f5a90919063ffffffff16565b600282015560078201546001600160a01b0316801561363557806001600160a01b031663c37232888684600001546040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050600060405180830381600087803b15801561361c57600080fd5b505af1158015613630573d6000803e3d6000fd5b505050505b60408051858152905187916001600160a01b038816917ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b5689181900360200190a350506001805550505050565b3b151590565b60606136dc826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166137389092919063ffffffff16565b805190915015610b31578080602001905160208110156136fb57600080fd5b5051610b315760405162461bcd60e51b815260040180806020018281038252602a815260200180613a24602a913960400191505060405180910390fd5b60606137478484600085613751565b90505b9392505050565b6060824710156137925760405162461bcd60e51b81526004018080602001828103825260268152602001806139986026913960400191505060405180910390fd5b61379b85613681565b6137ec576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b6020831061382b5780518252601f19909201916020918201910161380c565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d806000811461388d576040519150601f19603f3d011682016040523d82523d6000602084013e613892565b606091505b50915091506138a28282866138ad565b979650505050505050565b606083156138bc57508161374a565b8251156138cc5782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156139165781810151838201526020016138fe565b50505050905090810190601f1680156139435780820380516001836020036101000a031916815260200191505b509250505060405180910390fdfe5265656e7472616e637947756172643a207265656e7472616e742063616c6c004f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f777365743a20696e76616c6964206465706f7369742066656520626173697320706f696e74734f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65725361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a264697066735822122036b6738e66c596aa29b8e4aeef1449ce7d00974001fd6653f4ea8389de4c80f564736f6c634300060c0033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10,
        "contract": "contracts/staking/MasterChef.sol:MasterChef",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2305,
        "contract": "contracts/staking/MasterChef.sol:MasterChef",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 24564,
        "contract": "contracts/staking/MasterChef.sol:MasterChef",
        "label": "emo",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(EMOToken)22367"
      },
      {
        "astId": 24567,
        "contract": "contracts/staking/MasterChef.sol:MasterChef",
        "label": "percentDec",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 24569,
        "contract": "contracts/staking/MasterChef.sol:MasterChef",
        "label": "stakingPercent",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 24571,
        "contract": "contracts/staking/MasterChef.sol:MasterChef",
        "label": "daoPercent",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 24573,
        "contract": "contracts/staking/MasterChef.sol:MasterChef",
        "label": "safuPercent",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 24575,
        "contract": "contracts/staking/MasterChef.sol:MasterChef",
        "label": "refPercent",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 24577,
        "contract": "contracts/staking/MasterChef.sol:MasterChef",
        "label": "daoAddr",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 24579,
        "contract": "contracts/staking/MasterChef.sol:MasterChef",
        "label": "safuAddr",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 24581,
        "contract": "contracts/staking/MasterChef.sol:MasterChef",
        "label": "refAddr",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 24583,
        "contract": "contracts/staking/MasterChef.sol:MasterChef",
        "label": "feeAddr",
        "offset": 0,
        "slot": "11",
        "type": "t_address"
      },
      {
        "astId": 24585,
        "contract": "contracts/staking/MasterChef.sol:MasterChef",
        "label": "lastTimeDaoWithdraw",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 24587,
        "contract": "contracts/staking/MasterChef.sol:MasterChef",
        "label": "rewardMinter",
        "offset": 0,
        "slot": "13",
        "type": "t_contract(IMultiFeeDistribution)9315"
      },
      {
        "astId": 24589,
        "contract": "contracts/staking/MasterChef.sol:MasterChef",
        "label": "votingEscrow",
        "offset": 0,
        "slot": "14",
        "type": "t_address"
      },
      {
        "astId": 24591,
        "contract": "contracts/staking/MasterChef.sol:MasterChef",
        "label": "emoPerSecond",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 24594,
        "contract": "contracts/staking/MasterChef.sol:MasterChef",
        "label": "BONUS_MULTIPLIER",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 24597,
        "contract": "contracts/staking/MasterChef.sol:MasterChef",
        "label": "poolInfo",
        "offset": 0,
        "slot": "17",
        "type": "t_array(t_struct(PoolInfo)24559_storage)dyn_storage"
      },
      {
        "astId": 24603,
        "contract": "contracts/staking/MasterChef.sol:MasterChef",
        "label": "userInfo",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)24542_storage))"
      },
      {
        "astId": 24607,
        "contract": "contracts/staking/MasterChef.sol:MasterChef",
        "label": "poolExistence",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_contract(IERC20)1178,t_bool)"
      },
      {
        "astId": 24610,
        "contract": "contracts/staking/MasterChef.sol:MasterChef",
        "label": "totalAllocPoint",
        "offset": 0,
        "slot": "20",
        "type": "t_uint256"
      },
      {
        "astId": 24612,
        "contract": "contracts/staking/MasterChef.sol:MasterChef",
        "label": "startTime",
        "offset": 0,
        "slot": "21",
        "type": "t_uint256"
      },
      {
        "astId": 24614,
        "contract": "contracts/staking/MasterChef.sol:MasterChef",
        "label": "whitelistable",
        "offset": 0,
        "slot": "22",
        "type": "t_bool"
      },
      {
        "astId": 24618,
        "contract": "contracts/staking/MasterChef.sol:MasterChef",
        "label": "whitelist",
        "offset": 0,
        "slot": "23",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 24622,
        "contract": "contracts/staking/MasterChef.sol:MasterChef",
        "label": "pool0Staker",
        "offset": 0,
        "slot": "24",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(PoolInfo)24559_storage)dyn_storage": {
        "base": "t_struct(PoolInfo)24559_storage",
        "encoding": "dynamic_array",
        "label": "struct MasterChef.PoolInfo[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(EMOToken)22367": {
        "encoding": "inplace",
        "label": "contract EMOToken",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)1178": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IMultiFeeDistribution)9315": {
        "encoding": "inplace",
        "label": "contract IMultiFeeDistribution",
        "numberOfBytes": "20"
      },
      "t_contract(IOnwardIncentivesController)9343": {
        "encoding": "inplace",
        "label": "contract IOnwardIncentivesController",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(UserInfo)24542_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct MasterChef.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)24542_storage"
      },
      "t_mapping(t_contract(IERC20)1178,t_bool)": {
        "encoding": "mapping",
        "key": "t_contract(IERC20)1178",
        "label": "mapping(contract IERC20 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)24542_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => struct MasterChef.UserInfo))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(UserInfo)24542_storage)"
      },
      "t_struct(PoolInfo)24559_storage": {
        "encoding": "inplace",
        "label": "struct MasterChef.PoolInfo",
        "members": [
          {
            "astId": 24544,
            "contract": "contracts/staking/MasterChef.sol:MasterChef",
            "label": "lpToken",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IERC20)1178"
          },
          {
            "astId": 24546,
            "contract": "contracts/staking/MasterChef.sol:MasterChef",
            "label": "workingSupply",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 24548,
            "contract": "contracts/staking/MasterChef.sol:MasterChef",
            "label": "boost",
            "offset": 0,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 24550,
            "contract": "contracts/staking/MasterChef.sol:MasterChef",
            "label": "allocPoint",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 24552,
            "contract": "contracts/staking/MasterChef.sol:MasterChef",
            "label": "lastRewardTime",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 24554,
            "contract": "contracts/staking/MasterChef.sol:MasterChef",
            "label": "accEmoPerShare",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 24556,
            "contract": "contracts/staking/MasterChef.sol:MasterChef",
            "label": "depositFeePercent",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 24558,
            "contract": "contracts/staking/MasterChef.sol:MasterChef",
            "label": "incentivesController",
            "offset": 0,
            "slot": "7",
            "type": "t_contract(IOnwardIncentivesController)9343"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_struct(UserInfo)24542_storage": {
        "encoding": "inplace",
        "label": "struct MasterChef.UserInfo",
        "members": [
          {
            "astId": 24537,
            "contract": "contracts/staking/MasterChef.sol:MasterChef",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 24539,
            "contract": "contracts/staking/MasterChef.sol:MasterChef",
            "label": "workingAmount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 24541,
            "contract": "contracts/staking/MasterChef.sol:MasterChef",
            "label": "rewardDebt",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}