{
  "address": "0x6456d6f7B224283f8B22F03347B58D8B6d975677",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_stakingToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_penaltyReceiver",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "withPenalty",
          "type": "bool"
        }
      ],
      "name": "Mint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Recovered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "receivedAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "penaltyPaid",
          "type": "uint256"
        }
      ],
      "name": "Withdrawn",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "WEEK",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "earnedBalances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "total",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "unlockTime",
              "type": "uint256"
            }
          ],
          "internalType": "struct MultiFeeDistribution.LockedBalance[]",
          "name": "earningsData",
          "type": "tuple[]"
        },
        {
          "internalType": "uint256[]",
          "name": "index",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "withPenalty",
          "type": "bool"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "minters",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintersAreSet",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "penaltyReceiver",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "recoverERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_minters",
          "type": "address[]"
        }
      ],
      "name": "setMinters",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakingToken",
      "outputs": [
        {
          "internalType": "contract IMintableToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "totalBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "withdrawByIndex",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "withdrawableBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountWithoutPenalty",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "penaltyAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x10a31fa41d830bd740129ba563b6b9e7353ea9aee0a3e5b2dc42a0f0db50bbf8",
  "receipt": {
    "to": null,
    "from": "0x0aA282136b3924ca6767C4D5B9aad6f83bD40A9c",
    "contractAddress": "0x6456d6f7B224283f8B22F03347B58D8B6d975677",
    "transactionIndex": 2,
    "gasUsed": "1597688",
    "logsBloom": "0x
    "blockHash": "0x0f91b4289f0d0cdb89d3047567d6760e8187a689f7db2ed9b8a8f230b7ba6a96",
    "transactionHash": "0x10a31fa41d830bd740129ba563b6b9e7353ea9aee0a3e5b2dc42a0f0db50bbf8",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 1049605,
        "transactionHash": "0x10a31fa41d830bd740129ba563b6b9e7353ea9aee0a3e5b2dc42a0f0db50bbf8",
        "address": "0x6456d6f7B224283f8B22F03347B58D8B6d975677",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000aa282136b3924ca6767c4d5b9aad6f83bd40a9c"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0x0f91b4289f0d0cdb89d3047567d6760e8187a689f7db2ed9b8a8f230b7ba6a96"
      }
    ],
    "blockNumber": 1049605,
    "cumulativeGasUsed": "1904558",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x7cBa32163a8f4c56C846f5C3685E3b7a450c9002",
    "0xd41223b4Ed7e68275D3C567c237217Fbb2575568"
  ],
  "solcInputHash": "0deb08c2b741eef27e42617bbe422fe5",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_penaltyReceiver\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"withPenalty\",\"type\":\"bool\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Recovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"receivedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"penaltyPaid\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"WEEK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"earnedBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"}],\"internalType\":\"struct MultiFeeDistribution.LockedBalance[]\",\"name\":\"earningsData\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256[]\",\"name\":\"index\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"withPenalty\",\"type\":\"bool\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minters\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintersAreSet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"penaltyReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_minters\",\"type\":\"address[]\"}],\"name\":\"setMinters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingToken\",\"outputs\":[{\"internalType\":\"contract IMintableToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"totalBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"withdrawByIndex\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"withdrawableBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountWithoutPenalty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penaltyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/staking/MultiFeeDistribution.sol\":\"MultiFeeDistribution\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x15e2d5bd4c28a88548074c54d220e8086f638a71ed07e6b3ba5a70066fcf458d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"contracts/interfaces/IMultiFeeDistribution.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\ninterface IMultiFeeDistribution {\\n    function mint(address user, uint256 amount, bool withPenalty) external;\\n}\\n\",\"keccak256\":\"0x8a090d694b6212014741ed8056f8675840ef569564bdec173310ed161699be61\",\"license\":\"MIT\"},\"contracts/staking/MultiFeeDistribution.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../interfaces/IMultiFeeDistribution.sol\\\";\\n\\ninterface IMintableToken is IERC20 {\\n    function mint(address _receiver, uint256 _amount) external;\\n\\n    function addMinter(address _minter) external returns (bool);\\n}\\n\\ncontract MultiFeeDistribution is IMultiFeeDistribution, Ownable {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n    using SafeERC20 for IMintableToken;\\n\\n    /* ========== STATE VARIABLES ========== */\\n    struct Balances {\\n        uint256 total;\\n        uint256 unlocked;\\n        uint256 earned;\\n    }\\n\\n    struct LockedBalance {\\n        uint256 amount;\\n        uint256 unlockTime;\\n    }\\n\\n    IMintableToken public immutable stakingToken;\\n    // Address receive penalty\\n    address public penaltyReceiver;\\n\\n    // Duration that rewards are streamed over\\n    uint256 public constant WEEK = 86400 * 7;\\n\\n    // Duration of lock/earned penalty period\\n    uint256 public constant lockDuration = WEEK * 4;\\n\\n    // Addresses approved to call mint\\n    mapping(address => bool) public minters;\\n    bool public mintersAreSet;\\n\\n    uint256 public totalSupply;\\n\\n    // Private mappings for balance data\\n    mapping(address => Balances) private balances;\\n    mapping(address => LockedBalance[]) private userEarnings;\\n\\n    /* ========== CONSTRUCTOR ========== */\\n\\n    constructor(address _stakingToken, address _penaltyReceiver) public {\\n        stakingToken = IMintableToken(_stakingToken);\\n        penaltyReceiver = _penaltyReceiver;\\n    }\\n\\n    /* ========== ADMIN CONFIGURATION ========== */\\n\\n    function setMinters(address[] memory _minters) external onlyOwner {\\n        require(!mintersAreSet);\\n        for (uint i; i < _minters.length; i++) {\\n            minters[_minters[i]] = true;\\n        }\\n        mintersAreSet = true;\\n    }\\n\\n    /* ========== VIEWS ========== */\\n\\n    // Total balance of an account, including unlocked, locked and earned tokens\\n    function totalBalance(address user) view external returns (uint256 amount) {\\n        return balances[user].total;\\n    }\\n\\n    // Information on the \\\"earned\\\" balances of a user\\n    // Earned balances may be withdrawn immediately for a 50% penalty\\n    function earnedBalances(\\n        address user\\n    ) view external returns (\\n        uint256 total,\\n        LockedBalance[] memory earningsData,\\n        uint256[] memory index\\n    ) {\\n        LockedBalance[] storage earnings = userEarnings[user];\\n\\n        uint256 len;\\n        for (uint i = 0; i < earnings.length; i++) {\\n            if (earnings[i].unlockTime > block.timestamp) {\\n                len++;\\n            }\\n        }\\n\\n        earningsData = new LockedBalance[](len);\\n        index = new uint256[](len);\\n\\n        uint256 idx;\\n        for (uint i = 0; i < earnings.length; i++) {\\n            if (earnings[i].unlockTime > block.timestamp) {\\n                earningsData[idx] = earnings[i];\\n                index[idx] = i;\\n                idx++;\\n                total = total.add(earnings[i].amount);\\n            }\\n        }\\n\\n        return (total, earningsData, index);\\n    }\\n\\n    // Final balance received and penalty balance paid by user upon calling exit\\n    function withdrawableBalance(\\n        address user\\n    ) view public returns (\\n        uint256 amount,\\n        uint256 amountWithoutPenalty,\\n        uint256 penaltyAmount\\n    ) {\\n        Balances storage bal = balances[user];\\n        uint256 earned = bal.earned;\\n        if (earned > 0) {\\n            uint256 length = userEarnings[user].length;\\n            for (uint i = 0; i < length; i++) {\\n                uint256 earnedAmount = userEarnings[user][i].amount;\\n                if (earnedAmount == 0) continue;\\n                if (userEarnings[user][i].unlockTime > block.timestamp) {\\n                    break;\\n                }\\n                amountWithoutPenalty = amountWithoutPenalty.add(earnedAmount);\\n            }\\n\\n            penaltyAmount = earned.sub(amountWithoutPenalty).div(2);\\n        }\\n        amount = bal.unlocked.add(earned).sub(penaltyAmount);\\n        return (amount, amountWithoutPenalty, penaltyAmount);\\n    }\\n\\n    /* ========== MUTATIVE FUNCTIONS ========== */\\n\\n    // Mint new tokens\\n    // Minted tokens receive rewards normally but incur a 50% penalty when\\n    // withdrawn before lockDuration has passed.\\n    function mint(address user, uint256 amount, bool withPenalty) external override {\\n        require(minters[msg.sender], \\\"!minter\\\");\\n        require(user != address(this), \\\"self\\\");\\n\\n        if (amount == 0) {\\n            return;\\n        }\\n\\n        stakingToken.mint(address(this), amount);\\n        totalSupply = totalSupply.add(amount);\\n        Balances storage bal = balances[user];\\n        bal.total = bal.total.add(amount);\\n        if (withPenalty) {\\n            bal.earned = bal.earned.add(amount);\\n            uint256 unlockTime = block.timestamp.div(WEEK).mul(WEEK).add(lockDuration);\\n            LockedBalance[] storage earnings = userEarnings[user];\\n            uint256 idx = earnings.length;\\n            if (idx == 0 || (earnings[idx - 1].unlockTime > 0 && earnings[idx - 1].unlockTime < unlockTime)) {\\n                earnings.push(LockedBalance({amount : amount, unlockTime : unlockTime}));\\n            } else {\\n                earnings[idx - 1].amount = earnings[idx - 1].amount.add(amount);\\n                earnings[idx - 1].unlockTime = unlockTime;\\n            }\\n        } else {\\n            bal.unlocked = bal.unlocked.add(amount);\\n        }\\n        emit Mint(user, amount, withPenalty);\\n    }\\n\\n    // Withdraw earned tokens\\n    // First withdraws unlocked tokens, then earned tokens\\n    // incurs a 50% penalty which is distributed based on locked balances.\\n    function withdraw(uint256 amount) public {\\n        require(amount > 0, \\\"Cannot withdraw 0\\\");\\n        Balances storage bal = balances[msg.sender];\\n        uint256 penaltyAmount;\\n\\n        if (amount <= bal.unlocked) {\\n            bal.unlocked = bal.unlocked.sub(amount);\\n        } else {\\n            uint256 remaining = amount.sub(bal.unlocked);\\n            require(bal.earned >= remaining, \\\"Insufficient unlocked balance\\\");\\n            bal.unlocked = 0;\\n            bal.earned = bal.earned.sub(remaining);\\n            for (uint i = 0;; i++) {\\n                uint256 earnedAmount = userEarnings[msg.sender][i].amount;\\n                if (earnedAmount == 0) continue;\\n                if (penaltyAmount == 0 && userEarnings[msg.sender][i].unlockTime > block.timestamp) {\\n                    penaltyAmount = remaining;\\n                    require(bal.earned >= remaining, \\\"Insufficient balance after penalty\\\");\\n                    bal.earned = bal.earned.sub(remaining);\\n                    if (bal.earned == 0) {\\n                        delete userEarnings[msg.sender];\\n                        break;\\n                    }\\n                    remaining = remaining.mul(2);\\n                }\\n                if (remaining <= earnedAmount) {\\n                    userEarnings[msg.sender][i].amount = earnedAmount.sub(remaining);\\n                    break;\\n                } else {\\n                    delete userEarnings[msg.sender][i];\\n                    remaining = remaining.sub(earnedAmount);\\n                }\\n            }\\n        }\\n\\n        uint256 adjustedAmount = amount.add(penaltyAmount);\\n        bal.total = bal.total.sub(adjustedAmount);\\n        totalSupply = totalSupply.sub(adjustedAmount);\\n        stakingToken.safeTransfer(msg.sender, amount);\\n        if (penaltyAmount > 0) {\\n            stakingToken.safeTransfer(penaltyReceiver, penaltyAmount);\\n        }\\n        emit Withdrawn(msg.sender, amount, penaltyAmount);\\n    }\\n\\n    // Withdraw earned tokens\\n    // Withdraws unexpired tokens by index\\n    // incurs a 50% penalty which is distributed based on locked balances.\\n    function withdrawByIndex(uint256 index) public {\\n        LockedBalance memory earnings = userEarnings[msg.sender][index];\\n        require(earnings.amount > 0, \\\"Cannot withdraw 0\\\");\\n        require(earnings.unlockTime > block.timestamp, \\\"Token should be unexpired\\\");\\n\\n        uint amount = earnings.amount;\\n        uint256 penaltyAmount = amount / 2;\\n        delete userEarnings[msg.sender][index];\\n\\n        Balances storage bal = balances[msg.sender];\\n        bal.earned = bal.earned.sub(amount);\\n        bal.total = bal.total.sub(amount);\\n        totalSupply = totalSupply.sub(amount);\\n        stakingToken.safeTransfer(msg.sender, amount.sub(penaltyAmount));\\n        if (penaltyAmount > 0) {\\n            stakingToken.safeTransfer(penaltyReceiver, penaltyAmount);\\n        }\\n        emit Withdrawn(msg.sender, amount.sub(penaltyAmount), penaltyAmount);\\n    }\\n\\n    /* ========== RESTRICTED FUNCTIONS ========== */\\n\\n    // Added to support recovering LP Rewards from other systems such as BAL to be distributed to holders\\n    function recoverERC20(address tokenAddress, uint256 tokenAmount) external onlyOwner {\\n        require(tokenAddress != address(stakingToken), \\\"Cannot withdraw staking token\\\");\\n        IERC20(tokenAddress).safeTransfer(owner(), tokenAmount);\\n        emit Recovered(tokenAddress, tokenAmount);\\n    }\\n\\n    /* ========== EVENTS ========== */\\n\\n    event Mint(address indexed user, uint256 amount, bool withPenalty);\\n    event Withdrawn(address indexed user, uint256 receivedAmount, uint256 penaltyPaid);\\n    event Recovered(address token, uint256 amount);\\n}\\n\",\"keccak256\":\"0xf1398203c3d1bf46aa063ce89d60f19d725ad572b1b4ca5bd58d3ccac92bde55\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101165760003560e01c80638da5cb5b116100a2578063e1b7fd4211610071578063e1b7fd4214610220578063e206e94214610228578063f2fde38b1461023b578063f4359ce51461024e578063f46eccc41461025657610116565b80638da5cb5b146101ce5780638fd9f2ca146101d6578063d1a1beb4146101eb578063df379876146101fe57610116565b8063547d0096116100e9578063547d0096146101785780636eacd3981461018b578063715018a61461019e57806372f702f3146101a65780638980f11f146101bb57610116565b806302b629381461011b578063045544431461014657806318160ddd1461015b5780632e1a7d4d14610163575b600080fd5b61012e6101293660046113fd565b610269565b60405161013d93929190611a3b565b60405180910390f35b61014e61039b565b60405161013d919061197b565b61014e6103a2565b610176610171366004611547565b6103a8565b005b61017661018636600461148e565b6106c6565b61014e6101993660046113fd565b61077e565b610176610799565b6101ae610822565b60405161013d9190611597565b6101766101c9366004611418565b610846565b6101ae610930565b6101de61093f565b60405161013d91906115c4565b6101766101f9366004611442565b610948565b61021161020c3660046113fd565b610c29565b60405161013d93929190611984565b6101ae610dff565b610176610236366004611547565b610e0e565b6101766102493660046113fd565b610fe9565b61014e6110a9565b6101de6102643660046113fd565b6110b0565b6001600160a01b0381166000908152600560205260408120600281015482918291801561036f576001600160a01b038616600090815260066020526040812054905b81811015610355576001600160a01b03881660009081526006602052604081208054839081106102d757fe5b906000526020600020906002020160000154905080600014156102fa575061034d565b6001600160a01b038916600090815260066020526040902080544291908490811061032157fe5b906000526020600020906002020160010154111561033f5750610355565b61034987826110c5565b9650505b6001016102ab565b5061036b600261036584886110f3565b9061111b565b9350505b6103908361038a8385600101546110c590919063ffffffff16565b906110f3565b945050509193909250565b6224ea0081565b60045481565b600081116103d15760405162461bcd60e51b81526004016103c8906117cd565b60405180910390fd5b336000908152600560205260408120600181015490919083116104075760018201546103fd90846110f3565b60018301556105dc565b60006104208360010154856110f390919063ffffffff16565b905080836002015410156104465760405162461bcd60e51b81526004016103c8906118c3565b60006001840155600283015461045c90826110f3565b600284015560005b33600090815260066020526040812080548390811061047f57fe5b906000526020600020906002020160000154905080600014156104a257506105d1565b831580156104dd57503360009081526006602052604090208054429190849081106104c957fe5b906000526020600020906002020160010154115b1561054f5782935082856002015410156105095760405162461bcd60e51b81526004016103c8906116d7565b600285015461051890846110f3565b600286018190556105415733600090815260066020526040812061053b91611389565b506105d9565b61054c83600261114d565b92505b8083116105925761056081846110f3565b33600090815260066020526040902080548490811061057b57fe5b6000918252602090912060029091020155506105d9565b3360009081526006602052604090208054839081106105ad57fe5b600091825260208220600290910201818155600101556105cd83826110f3565b9250505b600101610464565b50505b60006105e884836110c5565b83549091506105f790826110f3565b835560045461060690826110f3565b60045561063d6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163386611187565b811561067d5760015461067d906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116911684611187565b336001600160a01b03167f92ccf450a286a957af52509bc1c9939d1a6a481783e142e41e2499f0bb66ebc685846040516106b8929190611a2d565b60405180910390a250505050565b6106ce6111dd565b6001600160a01b03166106df610930565b6001600160a01b0316146107055760405162461bcd60e51b81526004016103c890611839565b60035460ff161561071557600080fd5b60005b815181101561076d5760016002600084848151811061073357fe5b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff1916911515919091179055600101610718565b50506003805460ff19166001179055565b6001600160a01b031660009081526005602052604090205490565b6107a16111dd565b6001600160a01b03166107b2610930565b6001600160a01b0316146107d85760405162461bcd60e51b81526004016103c890611839565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b7f000000000000000000000000000000000000000000000000000000000000000081565b61084e6111dd565b6001600160a01b031661085f610930565b6001600160a01b0316146108855760405162461bcd60e51b81526004016103c890611839565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b031614156108d75760405162461bcd60e51b81526004016103c89061188c565b6108f36108e2610930565b6001600160a01b0384169083611187565b7f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa2882826040516109249291906115ab565b60405180910390a15050565b6000546001600160a01b031690565b60035460ff1681565b3360009081526002602052604090205460ff166109775760405162461bcd60e51b81526004016103c890611602565b6001600160a01b0383163014156109a05760405162461bcd60e51b81526004016103c89061186e565b816109aa57610c24565b6040516340c10f1960e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906340c10f19906109f890309086906004016115ab565b600060405180830381600087803b158015610a1257600080fd5b505af1158015610a26573d6000803e3d6000fd5b5050600454610a3892509050836110c5565b6004556001600160a01b03831660009081526005602052604090208054610a5f90846110c5565b81558115610bd4576002810154610a7690846110c5565b60028201556000610aa16224ea00610a9b62093a80610a95428261111b565b9061114d565b906110c5565b6001600160a01b0386166000908152600660205260409020805491925090801580610b1657506000826001830381548110610ad857fe5b906000526020600020906002020160010154118015610b16575082826001830381548110610b0257fe5b906000526020600020906002020160010154105b15610b58576040805180820190915286815260208082018581528454600181810187556000878152939093209351600290910290930192835551910155610bcc565b610b8286836001840381548110610b6b57fe5b6000918252602090912060029091020154906110c5565b826001830381548110610b9157fe5b90600052602060002090600202016000018190555082826001830381548110610bb657fe5b9060005260206000209060020201600101819055505b505050610be9565b6001810154610be390846110c5565b60018201555b836001600160a01b03167ff9288aa3c16d157f87dbf24b824f702d4c76887d38e8fd6ef8212ad19a712aee84846040516106b8929190611a1d565b505050565b6001600160a01b0381166000908152600660205260408120606090819083805b8254811015610c865742838281548110610c5f57fe5b9060005260206000209060020201600101541115610c7e576001909101905b600101610c49565b508067ffffffffffffffff81118015610c9e57600080fd5b50604051908082528060200260200182016040528015610cd857816020015b610cc56113ad565b815260200190600190039081610cbd5790505b5093508067ffffffffffffffff81118015610cf257600080fd5b50604051908082528060200260200182016040528015610d1c578160200160208202803683370190505b5092506000805b8354811015610df45742848281548110610d3957fe5b9060005260206000209060020201600101541115610dec57838181548110610d5d57fe5b906000526020600020906002020160405180604001604052908160008201548152602001600182015481525050868381518110610d9657fe5b602002602001018190525080858381518110610dae57fe5b6020026020010181815250508180600101925050610de9848281548110610dd157fe5b600091825260209091206002909102015488906110c5565b96505b600101610d23565b505050509193909250565b6001546001600160a01b031681565b610e166113ad565b336000908152600660205260409020805483908110610e3157fe5b90600052602060002090600202016040518060400160405290816000820154815260200160018201548152505090506000816000015111610e845760405162461bcd60e51b81526004016103c8906117cd565b42816020015111610ea75760405162461bcd60e51b81526004016103c8906116a0565b8051336000908152600660205260409020805460028304919085908110610eca57fe5b6000918252602080832060029283020183815560010183905533835260059052604090912090810154610efd90846110f3565b60028201558054610f0e90846110f3565b8155600454610f1d90846110f3565b600455610f5f33610f2e85856110f3565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169190611187565b8115610f9f57600154610f9f906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116911684611187565b337f92ccf450a286a957af52509bc1c9939d1a6a481783e142e41e2499f0bb66ebc6610fcb85856110f3565b84604051610fda929190611a2d565b60405180910390a25050505050565b610ff16111dd565b6001600160a01b0316611002610930565b6001600160a01b0316146110285760405162461bcd60e51b81526004016103c890611839565b6001600160a01b03811661104e5760405162461bcd60e51b81526004016103c890611623565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b62093a8081565b60026020526000908152604090205460ff1681565b6000828201838110156110ea5760405162461bcd60e51b81526004016103c890611669565b90505b92915050565b6000828211156111155760405162461bcd60e51b81526004016103c890611719565b50900390565b600080821161113c5760405162461bcd60e51b81526004016103c890611796565b81838161114557fe5b049392505050565b60008261115c575060006110ed565b8282028284828161116957fe5b04146110ea5760405162461bcd60e51b81526004016103c8906117f8565b610c248363a9059cbb60e01b84846040516024016111a69291906115ab565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526111e1565b3390565b6060611236826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166112709092919063ffffffff16565b805190915015610c245780806020019051810190611254919061152b565b610c245760405162461bcd60e51b81526004016103c890611931565b606061127f8484600085611289565b90505b9392505050565b6060824710156112ab5760405162461bcd60e51b81526004016103c890611750565b6112b48561134a565b6112d05760405162461bcd60e51b81526004016103c8906118fa565b60006060866001600160a01b031685876040516112ed919061157b565b60006040518083038185875af1925050503d806000811461132a576040519150601f19603f3d011682016040523d82523d6000602084013e61132f565b606091505b509150915061133f828286611350565b979650505050505050565b3b151590565b6060831561135f575081611282565b82511561136f5782518084602001fd5b8160405162461bcd60e51b81526004016103c891906115cf565b50805460008255600202906000526020600020908101906113aa91906113c7565b50565b604051806040016040528060008152602001600081525090565b5b808211156113e257600080825560018201556002016113c8565b5090565b80356001600160a01b03811681146110ed57600080fd5b60006020828403121561140e578081fd5b61128283836113e6565b6000806040838503121561142a578081fd5b61143484846113e6565b946020939093013593505050565b600080600060608486031215611456578081fd5b83356001600160a01b038116811461146c578182fd5b925060208401359150604084013561148381611ac8565b809150509250925092565b600060208083850312156114a0578182fd5b823567ffffffffffffffff8111156114b6578283fd5b8301601f810185136114c6578283fd5b80356114d96114d482611a78565b611a51565b81815283810190838501858402850186018910156114f5578687fd5b8694505b8385101561151f5761150b89826113e6565b8352600194909401939185019185016114f9565b50979650505050505050565b60006020828403121561153c578081fd5b81516110ea81611ac8565b600060208284031215611558578081fd5b5035919050565b805182526020908101519082015260400190565b815260200190565b6000825161158d818460208701611a98565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b901515815260200190565b60006020825282518060208401526115ee816040850160208701611a98565b601f01601f19169190910160400192915050565b60208082526007908201526610b6b4b73a32b960c91b604082015260600190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b60208082526019908201527f546f6b656e2073686f756c6420626520756e6578706972656400000000000000604082015260600190565b60208082526022908201527f496e73756666696369656e742062616c616e63652061667465722070656e616c604082015261747960f01b606082015260800190565b6020808252601e908201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604082015260600190565b60208082526026908201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6040820152651c8818d85b1b60d21b606082015260800190565b6020808252601a908201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604082015260600190565b602080825260119082015270043616e6e6f74207769746864726177203607c1b604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526004908201526339b2b63360e11b604082015260600190565b6020808252601d908201527f43616e6e6f74207769746864726177207374616b696e6720746f6b656e000000604082015260600190565b6020808252601d908201527f496e73756666696369656e7420756e6c6f636b65642062616c616e6365000000604082015260600190565b6020808252601d908201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6040820152691bdd081cdd58d8d9595960b21b606082015260800190565b90815260200190565b60006060820185835260206060818501528186516119a2818561197b565b91508288019350845b818110156119cc576119be83865161155f565b9484019492506001016119ab565b5050848103604086015280925085516119e5818361197b565b93508287019150845b81811015611a0f57611a01858451611573565b9450918301916001016119ee565b509298975050505050505050565b9182521515602082015260400190565b918252602082015260400190565b9283526020830191909152604082015260600190565b60405181810167ffffffffffffffff81118282101715611a7057600080fd5b604052919050565b600067ffffffffffffffff821115611a8e578081fd5b5060209081020190565b60005b83811015611ab3578181015183820152602001611a9b565b83811115611ac2576000848401525b50505050565b80151581146113aa57600080fdfea264697066735822122079083e776953c38312e3a7e004b0b8618aea8daeb4d2e4110c30e8cc5b47b82864736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/staking/MultiFeeDistribution.sol:MultiFeeDistribution",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 25191,
        "contract": "contracts/staking/MultiFeeDistribution.sol:MultiFeeDistribution",
        "label": "penaltyReceiver",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 25205,
        "contract": "contracts/staking/MultiFeeDistribution.sol:MultiFeeDistribution",
        "label": "minters",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 25207,
        "contract": "contracts/staking/MultiFeeDistribution.sol:MultiFeeDistribution",
        "label": "mintersAreSet",
        "offset": 0,
        "slot": "3",
        "type": "t_bool"
      },
      {
        "astId": 25209,
        "contract": "contracts/staking/MultiFeeDistribution.sol:MultiFeeDistribution",
        "label": "totalSupply",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 25213,
        "contract": "contracts/staking/MultiFeeDistribution.sol:MultiFeeDistribution",
        "label": "balances",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_struct(Balances)25182_storage)"
      },
      {
        "astId": 25218,
        "contract": "contracts/staking/MultiFeeDistribution.sol:MultiFeeDistribution",
        "label": "userEarnings",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_array(t_struct(LockedBalance)25187_storage)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(LockedBalance)25187_storage)dyn_storage": {
        "base": "t_struct(LockedBalance)25187_storage",
        "encoding": "dynamic_array",
        "label": "struct MultiFeeDistribution.LockedBalance[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_struct(LockedBalance)25187_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct MultiFeeDistribution.LockedBalance[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(LockedBalance)25187_storage)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(Balances)25182_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct MultiFeeDistribution.Balances)",
        "numberOfBytes": "32",
        "value": "t_struct(Balances)25182_storage"
      },
      "t_struct(Balances)25182_storage": {
        "encoding": "inplace",
        "label": "struct MultiFeeDistribution.Balances",
        "members": [
          {
            "astId": 25177,
            "contract": "contracts/staking/MultiFeeDistribution.sol:MultiFeeDistribution",
            "label": "total",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 25179,
            "contract": "contracts/staking/MultiFeeDistribution.sol:MultiFeeDistribution",
            "label": "unlocked",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 25181,
            "contract": "contracts/staking/MultiFeeDistribution.sol:MultiFeeDistribution",
            "label": "earned",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(LockedBalance)25187_storage": {
        "encoding": "inplace",
        "label": "struct MultiFeeDistribution.LockedBalance",
        "members": [
          {
            "astId": 25184,
            "contract": "contracts/staking/MultiFeeDistribution.sol:MultiFeeDistribution",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 25186,
            "contract": "contracts/staking/MultiFeeDistribution.sol:MultiFeeDistribution",
            "label": "unlockTime",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}